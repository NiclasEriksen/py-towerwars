__main__: None -> <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/_pyi_bootstrap.py imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('pyi_archive', 0, 0, -1), ('pyi_os_path', 0, 0, -1), ('site', 0, 0, -1), ('pyi_importers', 0, 0, -1), ('warnings', 0, 1, -1), ('encodings', 0, 0, -1)] binaries=[] datas=[]>
sys: None -> <BuiltinModule 'sys' None imports=[] binaries=[] datas=[]>
os: None -> <PyModule 'os' /usr/lib/python2.7/os.pyc imports=[('subprocess', 1, 0, -1), ('os.path.pardir', 0, 0, -1), ('copy_reg', 0, 0, -1), ('os.path.altsep', 0, 0, -1), ('os.path.devnull', 0, 0, -1), ('posix._exit', 0, 1, -1), ('posix', 0, 1, -1), ('os.path.extsep', 0, 0, -1), ('posix.*', 0, 1, -1), ('os.path.pathsep', 0, 0, -1), ('os.path', 0, 0, -1), ('warnings', 1, 0, -1), ('errno', 0, 0, -1), ('posixpath', 0, 1, -1), ('sys', 0, 0, -1), ('UserDict', 0, 1, -1), ('os.path.sep', 0, 0, -1), ('_emx_link', 0, 1, -1), ('os.path.defpath', 0, 0, -1), ('os2emxpath', 0, 1, -1), ('_emx_link.link', 0, 1, -1), ('os.path.curdir', 0, 0, -1)] binaries=[] datas=[]>
pyi_archive: None -> <PyModule 'pyi_archive' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_archive.pyc imports=[('imp', 0, 0, -1), ('sys', 0, 0, -1), ('marshal', 0, 0, -1), ('os', 1, 1, -1), ('struct', 0, 0, -1), ('imp', 1, 0, -1)] binaries=[] datas=[]>
pyi_os_path: None -> <PyModule 'pyi_os_path' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_os_path.pyc imports=[('sys', 0, 0, -1), ('posix.environ', 0, 1, -1), ('nt.listdir', 0, 1, -1), ('nt.environ', 0, 1, -1), ('posix', 0, 1, -1), ('posix.listdir', 0, 1, -1), ('nt', 0, 1, -1)] binaries=[] datas=[]>
site: None -> <PyModule 'site' /usr/lib/python2.7/site-packages/PyInstaller/fake/fake-site.pyc imports=[('pydoc', 1, 0, -1)] binaries=[] datas=[]>
pyi_importers: None -> <PyModule 'pyi_importers' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_importers.pyc imports=[('pyi_archive.ZlibArchive', 0, 0, -1), ('imp', 0, 0, -1), ('sys', 0, 0, -1), ('pyi_archive.ArchiveReadError', 0, 0, -1), ('pyi_archive', 0, 0, -1), ('pyi_os_path', 0, 0, -1)] binaries=[] datas=[]>
warnings: None -> <PyModule 'warnings' /usr/lib/python2.7/warnings.pyc imports=[('linecache', 0, 0, -1), ('_warnings.default_action', 0, 0, -1), ('sys', 0, 0, -1), ('_warnings', 0, 0, -1), ('types', 0, 0, -1), ('_warnings.warn', 0, 0, -1), ('_warnings.once_registry', 0, 0, -1), ('_warnings.filters', 0, 0, -1), ('_warnings.warn_explicit', 0, 0, -1), ('re', 1, 0, -1)] binaries=[] datas=[]>
encodings: None -> <PkgModule 'encodings' /usr/lib/python2.7/encodings/__init__.pyc imports=[('encodings', 0, 0, -1), ('codecs', 0, 0, -1), ('encodings.aliases', 0, 0, -1), ('__builtin__', 0, 0, -1), ('encodings.euc_jis_2004', 0, 0, -1), ('encodings.unicode_escape', 0, 0, -1), ('encodings.string_escape', 0, 0, -1), ('encodings.mac_arabic', 0, 0, -1), ('encodings.latin_1', 0, 0, -1), ('encodings.iso2022_jp_3', 0, 0, -1), ('encodings.cp1257', 0, 0, -1), ('encodings.cp875', 0, 0, -1), ('encodings.cp863', 0, 0, -1), ('encodings.euc_kr', 0, 0, -1), ('encodings.unicode_internal', 0, 0, -1), ('encodings.mac_cyrillic', 0, 0, -1), ('encodings.cp857', 0, 0, -1), ('encodings.cp1255', 0, 0, -1), ('encodings.cp860', 0, 0, -1), ('encodings.cp866', 0, 0, -1), ('encodings.utf_7', 0, 0, -1), ('encodings.mac_roman', 0, 0, -1), ('encodings.iso2022_jp', 0, 0, -1), ('encodings.cp1140', 0, 0, -1), ('encodings.cp1026', 0, 0, -1), ('encodings.cp869', 0, 0, -1), ('encodings.cp1253', 0, 0, -1), ('encodings.utf_16_le', 0, 0, -1), ('encodings.ptcp154', 0, 0, -1), ('encodings.cp950', 0, 0, -1), ('encodings.base64_codec', 0, 0, -1), ('encodings.bz2_codec', 0, 0, -1), ('encodings.iso8859_3', 0, 0, -1), ('encodings.johab', 0, 0, -1), ('encodings.utf_32', 0, 0, -1), ('encodings.mbcs', 0, 0, -1), ('encodings.cp850', 0, 0, -1), ('encodings.cp1251', 0, 0, -1), ('encodings.cp1254', 0, 0, -1), ('encodings.shift_jis', 0, 0, -1), ('encodings.big5hkscs', 0, 0, -1), ('encodings.mac_romanian', 0, 0, -1), ('encodings.cp858', 0, 0, -1), ('encodings.iso8859_14', 0, 0, -1), ('encodings.cp775', 0, 0, -1), ('encodings.mac_iceland', 0, 0, -1), ('encodings.iso2022_jp_1', 0, 0, -1), ('encodings.shift_jis_2004', 0, 0, -1), ('encodings.tis_620', 0, 0, -1), ('encodings.cp720', 0, 0, -1), ('encodings.cp855', 0, 0, -1), ('encodings.iso8859_11', 0, 0, -1), ('encodings.iso8859_5', 0, 0, -1), ('encodings.cp852', 0, 0, -1), ('encodings.mac_turkish', 0, 0, -1), ('encodings.cp1258', 0, 0, -1), ('encodings.cp874', 0, 0, -1), ('encodings.uu_codec', 0, 0, -1), ('encodings.big5', 0, 0, -1), ('encodings.iso8859_16', 0, 0, -1), ('encodings.quopri_codec', 0, 0, -1), ('encodings.iso2022_jp_2004', 0, 0, -1), ('encodings.iso8859_2', 0, 0, -1), ('encodings.hex_codec', 0, 0, -1), ('encodings.shift_jisx0213', 0, 0, -1), ('encodings.raw_unicode_escape', 0, 0, -1), ('encodings.iso8859_8', 0, 0, -1), ('encodings.cp949', 0, 0, -1), ('encodings.palmos', 0, 0, -1), ('encodings.mac_centeuro', 0, 0, -1), ('encodings.cp932', 0, 0, -1), ('encodings.gb2312', 0, 0, -1), ('encodings.cp424', 0, 0, -1), ('encodings.iso8859_10', 0, 0, -1), ('encodings.punycode', 0, 0, -1), ('encodings.mac_greek', 0, 0, -1), ('encodings.iso2022_kr', 0, 0, -1), ('encodings.iso8859_9', 0, 0, -1), ('encodings.mac_farsi', 0, 0, -1), ('encodings.cp1256', 0, 0, -1), ('encodings.zlib_codec', 0, 0, -1), ('encodings.cp500', 0, 0, -1), ('encodings.euc_jisx0213', 0, 0, -1), ('encodings.iso2022_jp_ext', 0, 0, -1), ('encodings.cp1252', 0, 0, -1), ('encodings.iso8859_4', 0, 0, -1), ('encodings.aliases', 0, 0, -1), ('encodings.iso8859_13', 0, 0, -1), ('encodings.cp865', 0, 0, -1), ('encodings.cp737', 0, 0, -1), ('encodings.charmap', 0, 0, -1), ('encodings.koi8_u', 0, 0, -1), ('encodings.idna', 0, 0, -1), ('encodings.hp_roman8', 0, 0, -1), ('encodings.iso8859_6', 0, 0, -1), ('encodings.hz', 0, 0, -1), ('encodings.utf_16', 0, 0, -1), ('encodings.undefined', 0, 0, -1), ('encodings.utf_32_le', 0, 0, -1), ('encodings.iso8859_15', 0, 0, -1), ('encodings.cp862', 0, 0, -1), ('encodings.cp864', 0, 0, -1), ('encodings.cp1006', 0, 0, -1), ('encodings.utf_16_be', 0, 0, -1), ('encodings.cp856', 0, 0, -1), ('encodings.gb18030', 0, 0, -1), ('encodings.cp037', 0, 0, -1), ('encodings.iso2022_jp_2', 0, 0, -1), ('encodings.koi8_r', 0, 0, -1), ('encodings.utf_8', 0, 0, -1), ('encodings.utf_8_sig', 0, 0, -1), ('encodings.rot_13', 0, 0, -1), ('encodings.gbk', 0, 0, -1), ('encodings.euc_jp', 0, 0, -1), ('encodings.mac_latin2', 0, 0, -1), ('encodings.iso8859_7', 0, 0, -1), ('encodings.cp861', 0, 0, -1), ('encodings.ascii', 0, 0, -1), ('encodings.mac_croatian', 0, 0, -1), ('encodings.cp437', 0, 0, -1), ('encodings.cp1250', 0, 0, -1), ('encodings.utf_32_be', 0, 0, -1), ('encodings.iso8859_1', 0, 0, -1)] binaries=[] datas=[]>
subprocess: None -> <PyModule 'subprocess' /usr/lib/python2.7/subprocess.pyc imports=[('_subprocess.SW_HIDE', 0, 1, -1), ('gc', 0, 0, -1), ('_subprocess.STARTF_USESHOWWINDOW', 0, 1, -1), ('_subprocess', 0, 1, -1), ('sys', 0, 0, -1), ('_subprocess.STARTF_USESTDHANDLES', 0, 1, -1), ('types', 0, 0, -1), ('fcntl', 0, 1, -1), ('os', 0, 0, -1), ('threading', 0, 1, -1), ('_subprocess.STD_INPUT_HANDLE', 0, 1, -1), ('msvcrt', 0, 1, -1), ('_subprocess.CREATE_NEW_PROCESS_GROUP', 0, 1, -1), ('_subprocess.STD_OUTPUT_HANDLE', 0, 1, -1), ('traceback', 0, 0, -1), ('_subprocess.CREATE_NEW_CONSOLE', 0, 1, -1), ('errno', 0, 0, -1), ('signal', 0, 0, -1), ('pickle', 0, 1, -1), ('select', 0, 1, -1), ('_subprocess.STD_ERROR_HANDLE', 0, 1, -1)] binaries=[] datas=[]>
copy_reg: None -> <PyModule 'copy_reg' /usr/lib/python2.7/copy_reg.pyc imports=[('types.ClassType', 0, 0, -1), ('types', 0, 0, -1)] binaries=[] datas=[]>
posix: None -> <BuiltinModule 'posix' None imports=[] binaries=[] datas=[]>
errno: None -> <BuiltinModule 'errno' None imports=[] binaries=[] datas=[]>
posixpath: None -> <PyModule 'posixpath' /usr/lib/python2.7/posixpath.pyc imports=[('re', 1, 1, -1), ('pwd', 1, 1, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('warnings', 0, 0, -1), ('genericpath', 0, 0, -1), ('stat', 0, 0, -1), ('genericpath.*', 0, 0, -1)] binaries=[] datas=[]>
UserDict: None -> <PyModule 'UserDict' /usr/lib/python2.7/UserDict.pyc imports=[('_abcoll', 0, 0, -1), ('copy', 1, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
os2emxpath: None -> <PyModule 'os2emxpath' /usr/lib/python2.7/os2emxpath.pyc imports=[('ntpath.splitdrive', 0, 0, -1), ('ntpath.walk', 0, 0, -1), ('os', 0, 0, -1), ('ntpath.splitext', 0, 0, -1), ('genericpath', 0, 0, -1), ('stat', 0, 0, -1), ('ntpath.isabs', 0, 0, -1), ('ntpath.split', 0, 0, -1), ('ntpath.islink', 0, 0, -1), ('ntpath.expanduser', 0, 0, -1), ('genericpath.*', 0, 0, -1), ('ntpath.expandvars', 0, 0, -1), ('ntpath', 0, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
_subprocess: None -> None
  DEL _subprocess
gc: None -> <BuiltinModule 'gc' None imports=[] binaries=[] datas=[]>
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
types: None -> <PyModule 'types' /usr/lib/python2.7/types.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
fcntl: None -> <ExtensionModule 'fcntl' /usr/lib/python2.7/lib-dynload/fcntl.so imports=[] binaries=[] datas=[]>
threading: None -> <PyModule 'threading' /usr/lib/python2.7/threading.pyc imports=[('collections.deque', 0, 0, -1), ('random.random', 1, 0, -1), ('itertools', 0, 0, -1), ('_threading_local.local', 0, 1, -1), ('sys', 0, 0, -1), ('collections', 0, 0, -1), ('thread._local', 0, 0, -1), ('traceback.format_exc', 0, 0, -1), ('warnings', 0, 0, -1), ('time.time', 0, 0, -1), ('thread', 0, 0, -1), ('thread.stack_size', 0, 0, -1), ('traceback', 0, 0, -1), ('time.sleep', 0, 0, -1), ('itertools.count', 0, 0, -1), ('random', 1, 0, -1), ('time', 0, 0, -1), ('_threading_local', 0, 1, -1)] binaries=[] datas=[]>
_subprocess: None -> None
  DEL _subprocess
msvcrt: None -> None
  DEL msvcrt
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
traceback: None -> <PyModule 'traceback' /usr/lib/python2.7/traceback.pyc imports=[('linecache', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1)] binaries=[] datas=[]>
_subprocess: None -> None
  DEL _subprocess
signal: None -> <BuiltinModule 'signal' None imports=[] binaries=[] datas=[]>
pickle: None -> <PyModule 'pickle' /usr/lib/python2.7/pickle.pyc imports=[('re', 0, 0, -1), ('copy_reg.dispatch_table', 0, 0, -1), ('types.*', 0, 0, -1), ('marshal', 0, 0, -1), ('types', 0, 0, -1), ('StringIO.StringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 0, -1), ('struct', 0, 0, -1), ('org.python.core', 0, 0, -1), ('copy_reg', 0, 0, -1), ('cStringIO', 0, 0, -1), ('copy_reg._extension_cache', 0, 0, -1), ('doctest', 1, 0, -1), ('StringIO', 0, 1, -1), ('copy_reg._inverted_registry', 0, 0, -1), ('binascii', 0, 0, -1), ('copy_reg._extension_registry', 0, 0, -1), ('org.python.core.PyStringMap', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
select: None -> <ExtensionModule 'select' /usr/lib/python2.7/lib-dynload/select.so imports=[] binaries=[] datas=[]>
_subprocess: None -> None
  DEL _subprocess
collections: None -> <PyModule 'collections' /usr/lib/python2.7/collections.pyc imports=[('keyword.iskeyword', 0, 0, -1), ('cPickle.loads', 0, 1, -1), ('itertools.repeat', 0, 0, -1), ('cPickle.dumps', 0, 1, -1), ('_collections', 0, 0, -1), ('_abcoll.*', 0, 0, -1), ('itertools', 0, 0, -1), ('itertools.starmap', 0, 0, -1), ('sys', 0, 0, -1), ('cPickle', 0, 1, -1), ('doctest', 0, 1, -1), ('_collections.defaultdict', 0, 0, -1), ('heapq', 0, 0, -1), ('dummy_thread', 0, 1, -1), ('itertools.imap', 0, 0, -1), ('_abcoll', 0, 0, -1), ('operator.eq', 0, 0, -1), ('itertools.chain', 0, 0, -1), ('keyword', 0, 0, -1), ('thread', 0, 0, -1), ('operator.itemgetter', 0, 0, -1), ('dummy_thread.get_ident', 0, 1, -1), ('operator', 0, 0, -1), ('_collections.deque', 0, 0, -1), ('thread.get_ident', 0, 0, -1)] binaries=[] datas=[]>
random: None -> <PyModule 'random' /usr/lib/python2.7/random.pyc imports=[('os', 0, 0, -1), ('warnings', 0, 0, -1), ('__future__', 0, 0, -1), ('hashlib', 0, 0, -1), ('math.log', 0, 0, -1), ('math.cos', 0, 0, -1), ('time', 1, 1, -1), ('math.sin', 0, 0, -1), ('math.sqrt', 0, 0, -1), ('math', 0, 0, -1), ('__future__.division', 0, 0, -1), ('os.urandom', 0, 0, -1), ('binascii', 0, 0, -1), ('_random', 0, 0, -1), ('math.acos', 0, 0, -1), ('types', 0, 0, -1), ('types.BuiltinMethodType', 0, 0, -1), ('binascii.hexlify', 0, 0, -1), ('types.MethodType', 0, 0, -1), ('math.exp', 0, 0, -1), ('time', 1, 0, -1), ('math.pi', 0, 0, -1), ('math.e', 0, 0, -1), ('math.ceil', 0, 0, -1), ('warnings.warn', 0, 0, -1)] binaries=[] datas=[]>
itertools: None -> <ExtensionModule 'itertools' /usr/lib/python2.7/lib-dynload/itertools.so imports=[] binaries=[] datas=[]>
_threading_local: None -> <PyModule '_threading_local' /usr/lib/python2.7/_threading_local.pyc imports=[('threading.current_thread', 0, 0, -1), ('threading', 0, 0, -1), ('threading.RLock', 0, 0, -1), ('threading', 1, 0, -1)] binaries=[] datas=[]>
thread: None -> <BuiltinModule 'thread' None imports=[] binaries=[] datas=[]>
time: None -> <ExtensionModule 'time' /usr/lib/python2.7/lib-dynload/time.so imports=[('_strptime', 0, 0, -1)] binaries=[] datas=[]>
keyword: None -> <PyModule 'keyword' /usr/lib/python2.7/keyword.pyc imports=[('sys', 1, 0, -1), ('re', 1, 0, -1)] binaries=[] datas=[]>
cPickle: None -> <ExtensionModule 'cPickle' /usr/lib/python2.7/lib-dynload/cPickle.so imports=[('copy_reg', 0, 0, -1), ('types', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
_collections: None -> <ExtensionModule '_collections' /usr/lib/python2.7/lib-dynload/_collections.so imports=[] binaries=[] datas=[]>
_abcoll: None -> <PyModule '_abcoll' /usr/lib/python2.7/_abcoll.pyc imports=[('abc', 0, 0, -1), ('abc.abstractmethod', 0, 0, -1), ('abc.ABCMeta', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
doctest: None -> <PyModule 'doctest' /usr/lib/python2.7/doctest.pyc imports=[('collections', 0, 0, -1), ('linecache', 0, 0, -1), ('StringIO', 0, 0, -1), ('sys', 0, 0, -1), ('pdb', 0, 0, -1), ('os', 0, 0, -1), ('StringIO.StringIO', 0, 0, -1), ('warnings', 0, 0, -1), ('re', 0, 0, -1), ('__future__', 0, 0, -1), ('inspect', 0, 0, -1), ('collections.namedtuple', 0, 0, -1), ('pdb', 1, 0, -1), ('difflib', 0, 0, -1), ('traceback', 0, 0, -1), ('types', 1, 0, -1), ('unittest', 0, 0, -1), ('tempfile', 0, 0, -1)] binaries=[] datas=[]>
heapq: None -> <PyModule 'heapq' /usr/lib/python2.7/heapq.pyc imports=[('operator.itemgetter', 0, 0, -1), ('itertools', 0, 0, -1), ('doctest', 0, 1, -1), ('operator', 0, 0, -1), ('itertools.chain', 0, 0, -1), ('itertools.tee', 0, 0, -1), ('itertools.islice', 0, 0, -1), ('itertools.izip', 0, 0, -1), ('_heapq', 0, 0, -1), ('itertools.count', 0, 0, -1), ('itertools.imap', 0, 0, -1), ('_heapq.*', 0, 0, -1)] binaries=[] datas=[]>
dummy_thread: None -> <PyModule 'dummy_thread' /usr/lib/python2.7/dummy_thread.pyc imports=[('traceback', 0, 0, -1)] binaries=[] datas=[]>
operator: None -> <ExtensionModule 'operator' /usr/lib/python2.7/lib-dynload/operator.so imports=[] binaries=[] datas=[]>
re: None -> <PyModule 're' /usr/lib/python2.7/re.pyc imports=[('sre_constants', 1, 0, -1), ('sys', 0, 0, -1), ('sre_parse', 0, 0, -1), ('sre_constants.BRANCH', 1, 0, -1), ('sre_compile', 0, 0, -1), ('sre_constants.SUBPATTERN', 1, 0, -1), ('copy_reg', 0, 0, -1), ('_locale', 0, 0, -1)] binaries=[] datas=[]>
sre_constants: None -> <PyModule 'sre_constants' /usr/lib/python2.7/sre_constants.pyc imports=[('_sre', 0, 0, -1), ('_sre.MAXREPEAT', 0, 0, -1), ('_sre', 0, 1, -1)] binaries=[] datas=[]>
sre_parse: None -> <PyModule 'sre_parse' /usr/lib/python2.7/sre_parse.pyc imports=[('sre_constants', 0, 0, -1), ('sys', 0, 0, -1), ('sre_constants.*', 0, 0, -1)] binaries=[] datas=[]>
sre_compile: None -> <PyModule 'sre_compile' /usr/lib/python2.7/sre_compile.pyc imports=[('sys', 0, 0, -1), ('sre_constants.*', 0, 0, -1), ('sre_parse', 0, 0, -1), ('sre_constants', 0, 0, -1), ('_sre', 0, 0, -1), ('array', 1, 0, -1)] binaries=[] datas=[]>
_locale: None -> <ExtensionModule '_locale' /usr/lib/python2.7/lib-dynload/_locale.so imports=[] binaries=[] datas=[]>
_sre: None -> <BuiltinModule '_sre' None imports=[('copy_reg', 0, 0, -1)] binaries=[] datas=[]>
array: None -> <ExtensionModule 'array' /usr/lib/python2.7/lib-dynload/array.so imports=[] binaries=[] datas=[]>
string: None -> <PyModule 'string' /usr/lib/python2.7/string.pyc imports=[('strop.uppercase', 0, 0, -1), ('re', 0, 0, -1), ('strop', 0, 0, -1), ('strop.lowercase', 0, 0, -1), ('strop.whitespace', 0, 0, -1), ('strop.maketrans', 0, 0, -1)] binaries=[] datas=[]>
strop: None -> <ExtensionModule 'strop' /usr/lib/python2.7/lib-dynload/strop.so imports=[] binaries=[] datas=[]>
abc: None -> <PyModule 'abc' /usr/lib/python2.7/abc.pyc imports=[('_weakrefset.WeakSet', 0, 0, -1), ('_weakrefset', 0, 0, -1), ('types', 0, 0, -1)] binaries=[] datas=[]>
_weakrefset: None -> <PyModule '_weakrefset' /usr/lib/python2.7/_weakrefset.pyc imports=[('_weakref.ref', 0, 0, -1), ('_weakref', 0, 0, -1)] binaries=[] datas=[]>
_weakref: None -> <BuiltinModule '_weakref' None imports=[] binaries=[] datas=[]>
linecache: None -> <PyModule 'linecache' /usr/lib/python2.7/linecache.pyc imports=[('os', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
StringIO: None -> <PyModule 'StringIO' /usr/lib/python2.7/StringIO.pyc imports=[('sys', 1, 0, -1), ('errno', 0, 0, -1), ('errno.EINVAL', 0, 0, -1)] binaries=[] datas=[]>
pdb: None -> <PyModule 'pdb' /usr/lib/python2.7/pdb.pyc imports=[('linecache', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('repr.Repr', 0, 0, -1), ('bdb', 0, 0, -1), ('re', 0, 0, -1), ('pprint', 0, 0, -1), ('pdb', 0, 1, -1), ('shlex', 1, 1, -1), ('repr', 0, 0, -1), ('__main__', 1, 0, -1), ('cmd', 0, 0, -1), ('traceback', 0, 0, -1), ('readline', 1, 0, -1)] binaries=[] datas=[]>
__future__: None -> <PyModule '__future__' /usr/lib/python2.7/__future__.pyc imports=[] binaries=[] datas=[]>
inspect: None -> <PyModule 'inspect' /usr/lib/python2.7/inspect.pyc imports=[('collections', 0, 0, -1), ('re', 0, 0, -1), ('dis', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('os', 0, 0, -1), ('imp', 0, 0, -1), ('string', 0, 0, -1), ('operator', 0, 0, -1), ('linecache', 0, 0, -1), ('operator.attrgetter', 0, 0, -1), ('collections.namedtuple', 0, 0, -1), ('tokenize', 0, 0, -1)] binaries=[] datas=[]>
difflib: None -> <PyModule 'difflib' /usr/lib/python2.7/difflib.pyc imports=[('difflib', 1, 0, -1), ('collections', 0, 0, -1), ('re', 0, 0, -1), ('functools', 0, 0, -1), ('functools.reduce', 0, 0, -1), ('doctest', 1, 0, -1), ('re', 1, 0, -1), ('heapq', 0, 0, -1), ('collections.namedtuple', 0, 0, -1)] binaries=[] datas=[]>
unittest: None -> <PkgModule 'unittest' /usr/lib/python2.7/unittest/__init__.pyc imports=[('loader.findTestCases', 0, 0, 1), ('result.TestResult', 0, 0, 1), ('case.skipIf', 0, 0, 1), ('case.skip', 0, 0, 1), ('case.TestCase', 0, 0, 1), ('main.main', 0, 0, 1), ('signals', 0, 0, 1), ('result', 0, 0, 1), ('loader.TestLoader', 0, 0, 1), ('main.TestProgram', 0, 0, 1), ('suite', 0, 0, 1), ('signals.installHandler', 0, 0, 1), ('case.SkipTest', 0, 0, 1), ('suite.TestSuite', 0, 0, 1), ('runner', 0, 0, 1), ('runner.TextTestResult', 0, 0, 1), ('loader.defaultTestLoader', 0, 0, 1), ('suite.BaseTestSuite', 0, 0, 1), ('loader', 0, 0, 1), ('runner.TextTestRunner', 0, 0, 1), ('case.expectedFailure', 0, 0, 1), ('signals.removeResult', 0, 0, 1), ('main', 0, 0, 1), ('signals.registerResult', 0, 0, 1), ('case.skipUnless', 0, 0, 1), ('signals.removeHandler', 0, 0, 1), ('case.FunctionTestCase', 0, 0, 1), ('case', 0, 0, 1), ('loader.getTestCaseNames', 0, 0, 1), ('loader.makeSuite', 0, 0, 1)] binaries=[] datas=[]>
tempfile: None -> <PyModule 'tempfile' /usr/lib/python2.7/tempfile.pyc imports=[('os', 0, 0, -1), ('dummy_thread', 0, 1, -1), ('thread', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('cStringIO', 0, 0, -1), ('fcntl', 0, 0, -1), ('StringIO.StringIO', 0, 1, -1), ('random', 0, 0, -1), ('StringIO', 0, 1, -1), ('errno', 0, 0, -1), ('random.Random', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
repr: None -> <PyModule 'repr' /usr/lib/python2.7/repr.pyc imports=[('itertools.islice', 0, 0, -1), ('itertools', 0, 0, -1), ('__builtin__', 0, 0, -1)] binaries=[] datas=[]>
bdb: None -> <PyModule 'bdb' /usr/lib/python2.7/bdb.pyc imports=[('repr', 1, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('os', 0, 0, -1), ('fnmatch', 0, 0, -1), ('linecache', 1, 0, -1), ('__main__', 1, 1, -1)] binaries=[] datas=[]>
pprint: None -> <PyModule 'pprint' /usr/lib/python2.7/pprint.pyc imports=[('sys', 0, 0, -1), ('time', 1, 0, -1), ('warnings', 0, 0, -1), ('cStringIO', 0, 0, -1), ('StringIO.StringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1)] binaries=[] datas=[]>
shlex: None -> <PyModule 'shlex' /usr/lib/python2.7/shlex.pyc imports=[('collections.deque', 0, 0, -1), ('sys', 0, 0, -1), ('collections', 0, 0, -1), ('os.path', 0, 0, -1), ('cStringIO', 0, 0, -1), ('StringIO.StringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1)] binaries=[] datas=[]>
cmd: None -> <PyModule 'cmd' /usr/lib/python2.7/cmd.pyc imports=[('sys', 1, 0, -1), ('readline', 1, 1, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
readline: None -> <ExtensionModule 'readline' /usr/lib/python2.7/lib-dynload/readline.so imports=[] binaries=[] datas=[]>
__builtin__: None -> <BuiltinModule '__builtin__' None imports=[] binaries=[] datas=[]>
fnmatch: None -> <PyModule 'fnmatch' /usr/lib/python2.7/fnmatch.pyc imports=[('re', 0, 0, -1), ('posixpath', 1, 0, -1), ('os', 1, 0, -1)] binaries=[] datas=[]>
pwd: None -> <BuiltinModule 'pwd' None imports=[] binaries=[] datas=[]>
genericpath: None -> <PyModule 'genericpath' /usr/lib/python2.7/genericpath.pyc imports=[('os', 0, 0, -1), ('stat', 0, 0, -1)] binaries=[] datas=[]>
stat: None -> <PyModule 'stat' /usr/lib/python2.7/stat.pyc imports=[] binaries=[] datas=[]>
_warnings: None -> <BuiltinModule '_warnings' None imports=[] binaries=[] datas=[]>
cStringIO: None -> <ExtensionModule 'cStringIO' /usr/lib/python2.7/lib-dynload/cStringIO.so imports=[('copy_reg', 0, 0, -1)] binaries=[] datas=[]>
_strptime: None -> <PyModule '_strptime' /usr/lib/python2.7/_strptime.pyc imports=[('thread.allocate_lock', 0, 0, -1), ('dummy_thread', 0, 0, -1), ('re', 0, 0, -1), ('re.compile', 0, 0, -1), ('re.escape', 0, 0, -1), ('calendar', 0, 0, -1), ('locale', 0, 0, -1), ('datetime.date', 0, 0, -1), ('datetime', 0, 0, -1), ('dummy_thread.allocate_lock', 0, 0, -1), ('thread', 0, 0, -1), ('time', 0, 0, -1), ('re.IGNORECASE', 0, 0, -1)] binaries=[] datas=[]>
calendar: None -> <PyModule 'calendar' /usr/lib/python2.7/calendar.pyc imports=[('optparse', 1, 0, -1), ('datetime', 0, 0, -1), ('sys', 0, 0, -1), ('locale', 0, 0, -1)] binaries=[] datas=[]>
locale: None -> <PyModule 'locale' /usr/lib/python2.7/locale.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('_locale', 1, 0, -1), ('os', 1, 0, -1), ('operator', 0, 0, -1), ('_locale', 0, 0, -1), ('_locale.*', 0, 0, -1), ('functools', 0, 0, -1), ('encodings', 0, 0, -1), ('encodings.aliases', 0, 0, -1)] binaries=[] datas=[]>
datetime: None -> <ExtensionModule 'datetime' /usr/lib/python2.7/lib-dynload/datetime.so imports=[] binaries=[] datas=[]>
optparse: None -> <PyModule 'optparse' /usr/lib/python2.7/optparse.pyc imports=[('sys', 0, 0, -1), ('types', 0, 0, -1), ('os', 0, 0, -1), ('__builtin__', 1, 1, -1), ('gettext.gettext', 0, 0, -1), ('textwrap', 0, 0, -1), ('gettext', 0, 0, -1)] binaries=[] datas=[]>
gettext: None -> <PyModule 'gettext' /usr/lib/python2.7/gettext.pyc imports=[('re', 0, 0, -1), ('locale.normalize', 1, 0, -1), ('sys', 0, 0, -1), ('errno.ENOENT', 0, 0, -1), ('copy', 0, 0, -1), ('os', 0, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('cStringIO.StringIO', 1, 0, -1), ('struct', 0, 0, -1), ('locale', 1, 0, -1), ('token', 1, 0, -1), ('tokenize', 1, 0, -1), ('__builtin__', 1, 0, -1), ('errno', 0, 0, -1), ('locale', 0, 0, -1), ('cStringIO', 1, 0, -1)] binaries=[] datas=[]>
textwrap: None -> <PyModule 'textwrap' /usr/lib/python2.7/textwrap.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
copy: None -> <PyModule 'copy' /usr/lib/python2.7/copy.pyc imports=[('copy_reg.dispatch_table', 0, 0, -1), ('weakref', 0, 0, -1), ('sys', 1, 1, -1), ('types', 0, 0, -1), ('copy_reg', 0, 0, -1), ('repr', 1, 0, -1), ('org.python.core.PyStringMap', 0, 0, -1), ('org.python.core', 0, 0, -1)] binaries=[] datas=[]>
struct: None -> <PyModule 'struct' /usr/lib/python2.7/struct.pyc imports=[('_struct.__doc__', 0, 0, -1), ('_struct.*', 0, 0, -1), ('_struct', 0, 0, -1), ('_struct._clearcache', 0, 0, -1)] binaries=[] datas=[]>
token: None -> <PyModule 'token' /usr/lib/python2.7/token.pyc imports=[('sys', 1, 0, -1), ('re', 1, 0, -1)] binaries=[] datas=[]>
tokenize: None -> <PyModule 'tokenize' /usr/lib/python2.7/tokenize.pyc imports=[('re', 0, 0, -1), ('token', 0, 0, -1), ('string', 0, 0, -1), ('itertools', 0, 0, -1), ('itertools.chain', 0, 0, -1), ('sys', 0, 1, -1), ('token.*', 0, 0, -1)] binaries=[] datas=[]>
functools: None -> <PyModule 'functools' /usr/lib/python2.7/functools.pyc imports=[('_functools.reduce', 0, 0, -1), ('_functools.partial', 0, 0, -1), ('_functools', 0, 0, -1)] binaries=[] datas=[]>
encodings.aliases: None -> <PyModule 'encodings.aliases' /usr/lib/python2.7/encodings/aliases.pyc imports=[] binaries=[] datas=[]>
_functools: None -> <ExtensionModule '_functools' /usr/lib/python2.7/lib-dynload/_functools.so imports=[] binaries=[] datas=[]>
encodings.encodings: None -> None
encodings.codecs: None -> None
codecs: None -> <PyModule 'codecs' /usr/lib/python2.7/codecs.pyc imports=[('encodings', 0, 1, -1), ('_codecs', 0, 0, -1), ('_codecs.*', 0, 0, -1), ('sys', 0, 0, -1), ('__builtin__', 0, 0, -1), ('encodings', 0, 0, -1)] binaries=[] datas=[]>
encodings.__builtin__: None -> None
encodings.euc_jis_2004: None -> <PyModule 'encodings.euc_jis_2004' /usr/lib/python2.7/encodings/euc_jis_2004.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_jp', 0, 0, -1)] binaries=[] datas=[]>
encodings.unicode_escape: None -> <PyModule 'encodings.unicode_escape' /usr/lib/python2.7/encodings/unicode_escape.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.string_escape: None -> <PyModule 'encodings.string_escape' /usr/lib/python2.7/encodings/string_escape.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_arabic: None -> <PyModule 'encodings.mac_arabic' /usr/lib/python2.7/encodings/mac_arabic.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.latin_1: None -> <PyModule 'encodings.latin_1' /usr/lib/python2.7/encodings/latin_1.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_3: None -> <PyModule 'encodings.iso2022_jp_3' /usr/lib/python2.7/encodings/iso2022_jp_3.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1257: None -> <PyModule 'encodings.cp1257' /usr/lib/python2.7/encodings/cp1257.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp875: None -> <PyModule 'encodings.cp875' /usr/lib/python2.7/encodings/cp875.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp863: None -> <PyModule 'encodings.cp863' /usr/lib/python2.7/encodings/cp863.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.euc_kr: None -> <PyModule 'encodings.euc_kr' /usr/lib/python2.7/encodings/euc_kr.pyc imports=[('_codecs_kr', 0, 0, -1), ('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.unicode_internal: None -> <PyModule 'encodings.unicode_internal' /usr/lib/python2.7/encodings/unicode_internal.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_cyrillic: None -> <PyModule 'encodings.mac_cyrillic' /usr/lib/python2.7/encodings/mac_cyrillic.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp857: None -> <PyModule 'encodings.cp857' /usr/lib/python2.7/encodings/cp857.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1255: None -> <PyModule 'encodings.cp1255' /usr/lib/python2.7/encodings/cp1255.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp860: None -> <PyModule 'encodings.cp860' /usr/lib/python2.7/encodings/cp860.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp866: None -> <PyModule 'encodings.cp866' /usr/lib/python2.7/encodings/cp866.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_7: None -> <PyModule 'encodings.utf_7' /usr/lib/python2.7/encodings/utf_7.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_roman: None -> <PyModule 'encodings.mac_roman' /usr/lib/python2.7/encodings/mac_roman.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp: None -> <PyModule 'encodings.iso2022_jp' /usr/lib/python2.7/encodings/iso2022_jp.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1140: None -> <PyModule 'encodings.cp1140' /usr/lib/python2.7/encodings/cp1140.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1026: None -> <PyModule 'encodings.cp1026' /usr/lib/python2.7/encodings/cp1026.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp869: None -> <PyModule 'encodings.cp869' /usr/lib/python2.7/encodings/cp869.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1253: None -> <PyModule 'encodings.cp1253' /usr/lib/python2.7/encodings/cp1253.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_16_le: None -> <PyModule 'encodings.utf_16_le' /usr/lib/python2.7/encodings/utf_16_le.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.ptcp154: None -> <PyModule 'encodings.ptcp154' /usr/lib/python2.7/encodings/ptcp154.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp950: None -> <PyModule 'encodings.cp950' /usr/lib/python2.7/encodings/cp950.pyc imports=[('_codecs_tw', 0, 0, -1), ('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.base64_codec: None -> <PyModule 'encodings.base64_codec' /usr/lib/python2.7/encodings/base64_codec.pyc imports=[('base64', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.bz2_codec: None -> <PyModule 'encodings.bz2_codec' /usr/lib/python2.7/encodings/bz2_codec.pyc imports=[('codecs', 0, 0, -1), ('bz2', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_3: None -> <PyModule 'encodings.iso8859_3' /usr/lib/python2.7/encodings/iso8859_3.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.johab: None -> <PyModule 'encodings.johab' /usr/lib/python2.7/encodings/johab.pyc imports=[('_codecs_kr', 0, 0, -1), ('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_32: None -> <PyModule 'encodings.utf_32' /usr/lib/python2.7/encodings/utf_32.pyc imports=[('codecs', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
encodings.mbcs: None -> <PyModule 'encodings.mbcs' /usr/lib/python2.7/encodings/mbcs.pyc imports=[('codecs.mbcs_decode', 0, 0, -1), ('codecs', 0, 0, -1), ('codecs.mbcs_encode', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp850: None -> <PyModule 'encodings.cp850' /usr/lib/python2.7/encodings/cp850.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1251: None -> <PyModule 'encodings.cp1251' /usr/lib/python2.7/encodings/cp1251.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1254: None -> <PyModule 'encodings.cp1254' /usr/lib/python2.7/encodings/cp1254.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.shift_jis: None -> <PyModule 'encodings.shift_jis' /usr/lib/python2.7/encodings/shift_jis.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_jp', 0, 0, -1)] binaries=[] datas=[]>
encodings.big5hkscs: None -> <PyModule 'encodings.big5hkscs' /usr/lib/python2.7/encodings/big5hkscs.pyc imports=[('_codecs_hk', 0, 0, -1), ('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_romanian: None -> <PyModule 'encodings.mac_romanian' /usr/lib/python2.7/encodings/mac_romanian.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp858: None -> <PyModule 'encodings.cp858' /usr/lib/python2.7/encodings/cp858.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_14: None -> <PyModule 'encodings.iso8859_14' /usr/lib/python2.7/encodings/iso8859_14.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp775: None -> <PyModule 'encodings.cp775' /usr/lib/python2.7/encodings/cp775.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_iceland: None -> <PyModule 'encodings.mac_iceland' /usr/lib/python2.7/encodings/mac_iceland.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_1: None -> <PyModule 'encodings.iso2022_jp_1' /usr/lib/python2.7/encodings/iso2022_jp_1.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.shift_jis_2004: None -> <PyModule 'encodings.shift_jis_2004' /usr/lib/python2.7/encodings/shift_jis_2004.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_jp', 0, 0, -1)] binaries=[] datas=[]>
encodings.tis_620: None -> <PyModule 'encodings.tis_620' /usr/lib/python2.7/encodings/tis_620.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp720: None -> <PyModule 'encodings.cp720' /usr/lib/python2.7/encodings/cp720.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp855: None -> <PyModule 'encodings.cp855' /usr/lib/python2.7/encodings/cp855.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_11: None -> <PyModule 'encodings.iso8859_11' /usr/lib/python2.7/encodings/iso8859_11.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_5: None -> <PyModule 'encodings.iso8859_5' /usr/lib/python2.7/encodings/iso8859_5.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp852: None -> <PyModule 'encodings.cp852' /usr/lib/python2.7/encodings/cp852.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_turkish: None -> <PyModule 'encodings.mac_turkish' /usr/lib/python2.7/encodings/mac_turkish.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1258: None -> <PyModule 'encodings.cp1258' /usr/lib/python2.7/encodings/cp1258.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp874: None -> <PyModule 'encodings.cp874' /usr/lib/python2.7/encodings/cp874.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.uu_codec: None -> <PyModule 'encodings.uu_codec' /usr/lib/python2.7/encodings/uu_codec.pyc imports=[('cStringIO.StringIO', 1, 0, -1), ('binascii.a2b_uu', 1, 0, -1), ('binascii', 1, 0, -1), ('binascii.b2a_uu', 1, 0, -1), ('binascii', 0, 0, -1), ('codecs', 0, 0, -1), ('cStringIO', 1, 0, -1)] binaries=[] datas=[]>
encodings.big5: None -> <PyModule 'encodings.big5' /usr/lib/python2.7/encodings/big5.pyc imports=[('_codecs_tw', 0, 0, -1), ('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_16: None -> <PyModule 'encodings.iso8859_16' /usr/lib/python2.7/encodings/iso8859_16.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.quopri_codec: None -> <PyModule 'encodings.quopri_codec' /usr/lib/python2.7/encodings/quopri_codec.pyc imports=[('quopri', 0, 0, -1), ('cStringIO', 0, 0, -1), ('StringIO.StringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_2004: None -> <PyModule 'encodings.iso2022_jp_2004' /usr/lib/python2.7/encodings/iso2022_jp_2004.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_2: None -> <PyModule 'encodings.iso8859_2' /usr/lib/python2.7/encodings/iso8859_2.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.hex_codec: None -> <PyModule 'encodings.hex_codec' /usr/lib/python2.7/encodings/hex_codec.pyc imports=[('binascii', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.shift_jisx0213: None -> <PyModule 'encodings.shift_jisx0213' /usr/lib/python2.7/encodings/shift_jisx0213.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_jp', 0, 0, -1)] binaries=[] datas=[]>
encodings.raw_unicode_escape: None -> <PyModule 'encodings.raw_unicode_escape' /usr/lib/python2.7/encodings/raw_unicode_escape.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_8: None -> <PyModule 'encodings.iso8859_8' /usr/lib/python2.7/encodings/iso8859_8.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp949: None -> <PyModule 'encodings.cp949' /usr/lib/python2.7/encodings/cp949.pyc imports=[('_codecs_kr', 0, 0, -1), ('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.palmos: None -> <PyModule 'encodings.palmos' /usr/lib/python2.7/encodings/palmos.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_centeuro: None -> <PyModule 'encodings.mac_centeuro' /usr/lib/python2.7/encodings/mac_centeuro.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp932: None -> <PyModule 'encodings.cp932' /usr/lib/python2.7/encodings/cp932.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_jp', 0, 0, -1)] binaries=[] datas=[]>
encodings.gb2312: None -> <PyModule 'encodings.gb2312' /usr/lib/python2.7/encodings/gb2312.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_cn', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp424: None -> <PyModule 'encodings.cp424' /usr/lib/python2.7/encodings/cp424.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_10: None -> <PyModule 'encodings.iso8859_10' /usr/lib/python2.7/encodings/iso8859_10.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.punycode: None -> <PyModule 'encodings.punycode' /usr/lib/python2.7/encodings/punycode.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_greek: None -> <PyModule 'encodings.mac_greek' /usr/lib/python2.7/encodings/mac_greek.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_kr: None -> <PyModule 'encodings.iso2022_kr' /usr/lib/python2.7/encodings/iso2022_kr.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_9: None -> <PyModule 'encodings.iso8859_9' /usr/lib/python2.7/encodings/iso8859_9.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_farsi: None -> <PyModule 'encodings.mac_farsi' /usr/lib/python2.7/encodings/mac_farsi.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1256: None -> <PyModule 'encodings.cp1256' /usr/lib/python2.7/encodings/cp1256.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.zlib_codec: None -> <PyModule 'encodings.zlib_codec' /usr/lib/python2.7/encodings/zlib_codec.pyc imports=[('zlib', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp500: None -> <PyModule 'encodings.cp500' /usr/lib/python2.7/encodings/cp500.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.euc_jisx0213: None -> <PyModule 'encodings.euc_jisx0213' /usr/lib/python2.7/encodings/euc_jisx0213.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_jp', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_ext: None -> <PyModule 'encodings.iso2022_jp_ext' /usr/lib/python2.7/encodings/iso2022_jp_ext.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1252: None -> <PyModule 'encodings.cp1252' /usr/lib/python2.7/encodings/cp1252.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_4: None -> <PyModule 'encodings.iso8859_4' /usr/lib/python2.7/encodings/iso8859_4.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_13: None -> <PyModule 'encodings.iso8859_13' /usr/lib/python2.7/encodings/iso8859_13.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp865: None -> <PyModule 'encodings.cp865' /usr/lib/python2.7/encodings/cp865.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp737: None -> <PyModule 'encodings.cp737' /usr/lib/python2.7/encodings/cp737.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.charmap: None -> <PyModule 'encodings.charmap' /usr/lib/python2.7/encodings/charmap.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.koi8_u: None -> <PyModule 'encodings.koi8_u' /usr/lib/python2.7/encodings/koi8_u.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.idna: None -> <PyModule 'encodings.idna' /usr/lib/python2.7/encodings/idna.pyc imports=[('unicodedata.ucd_3_2_0', 0, 0, -1), ('re', 0, 0, -1), ('unicodedata', 0, 0, -1), ('codecs', 0, 0, -1), ('stringprep', 0, 0, -1)] binaries=[] datas=[]>
encodings.hp_roman8: None -> <PyModule 'encodings.hp_roman8' /usr/lib/python2.7/encodings/hp_roman8.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_6: None -> <PyModule 'encodings.iso8859_6' /usr/lib/python2.7/encodings/iso8859_6.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.hz: None -> <PyModule 'encodings.hz' /usr/lib/python2.7/encodings/hz.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_cn', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_16: None -> <PyModule 'encodings.utf_16' /usr/lib/python2.7/encodings/utf_16.pyc imports=[('codecs', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
encodings.undefined: None -> <PyModule 'encodings.undefined' /usr/lib/python2.7/encodings/undefined.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_32_le: None -> <PyModule 'encodings.utf_32_le' /usr/lib/python2.7/encodings/utf_32_le.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_15: None -> <PyModule 'encodings.iso8859_15' /usr/lib/python2.7/encodings/iso8859_15.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp862: None -> <PyModule 'encodings.cp862' /usr/lib/python2.7/encodings/cp862.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp864: None -> <PyModule 'encodings.cp864' /usr/lib/python2.7/encodings/cp864.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1006: None -> <PyModule 'encodings.cp1006' /usr/lib/python2.7/encodings/cp1006.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_16_be: None -> <PyModule 'encodings.utf_16_be' /usr/lib/python2.7/encodings/utf_16_be.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp856: None -> <PyModule 'encodings.cp856' /usr/lib/python2.7/encodings/cp856.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.gb18030: None -> <PyModule 'encodings.gb18030' /usr/lib/python2.7/encodings/gb18030.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_cn', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp037: None -> <PyModule 'encodings.cp037' /usr/lib/python2.7/encodings/cp037.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso2022_jp_2: None -> <PyModule 'encodings.iso2022_jp_2' /usr/lib/python2.7/encodings/iso2022_jp_2.pyc imports=[('_codecs_iso2022', 0, 0, -1), ('codecs', 0, 0, -1), ('_multibytecodec', 0, 0, -1)] binaries=[] datas=[]>
encodings.koi8_r: None -> <PyModule 'encodings.koi8_r' /usr/lib/python2.7/encodings/koi8_r.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_8: None -> <PyModule 'encodings.utf_8' /usr/lib/python2.7/encodings/utf_8.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_8_sig: None -> <PyModule 'encodings.utf_8_sig' /usr/lib/python2.7/encodings/utf_8_sig.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.rot_13: None -> <PyModule 'encodings.rot_13' /usr/lib/python2.7/encodings/rot_13.pyc imports=[('sys', 0, 1, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.gbk: None -> <PyModule 'encodings.gbk' /usr/lib/python2.7/encodings/gbk.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_cn', 0, 0, -1)] binaries=[] datas=[]>
encodings.euc_jp: None -> <PyModule 'encodings.euc_jp' /usr/lib/python2.7/encodings/euc_jp.pyc imports=[('_multibytecodec', 0, 0, -1), ('codecs', 0, 0, -1), ('_codecs_jp', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_latin2: None -> <PyModule 'encodings.mac_latin2' /usr/lib/python2.7/encodings/mac_latin2.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_7: None -> <PyModule 'encodings.iso8859_7' /usr/lib/python2.7/encodings/iso8859_7.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp861: None -> <PyModule 'encodings.cp861' /usr/lib/python2.7/encodings/cp861.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.ascii: None -> <PyModule 'encodings.ascii' /usr/lib/python2.7/encodings/ascii.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.mac_croatian: None -> <PyModule 'encodings.mac_croatian' /usr/lib/python2.7/encodings/mac_croatian.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp437: None -> <PyModule 'encodings.cp437' /usr/lib/python2.7/encodings/cp437.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.cp1250: None -> <PyModule 'encodings.cp1250' /usr/lib/python2.7/encodings/cp1250.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.utf_32_be: None -> <PyModule 'encodings.utf_32_be' /usr/lib/python2.7/encodings/utf_32_be.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
encodings.iso8859_1: None -> <PyModule 'encodings.iso8859_1' /usr/lib/python2.7/encodings/iso8859_1.pyc imports=[('codecs', 0, 0, -1)] binaries=[] datas=[]>
_codecs: None -> <BuiltinModule '_codecs' None imports=[] binaries=[] datas=[]>
encodings._multibytecodec: None -> None
_multibytecodec: None -> <ExtensionModule '_multibytecodec' /usr/lib/python2.7/lib-dynload/_multibytecodec.so imports=[] binaries=[] datas=[]>
encodings._codecs_jp: None -> None
_codecs_jp: None -> <ExtensionModule '_codecs_jp' /usr/lib/python2.7/lib-dynload/_codecs_jp.so imports=[] binaries=[] datas=[]>
encodings._codecs_iso2022: None -> None
_codecs_iso2022: None -> <ExtensionModule '_codecs_iso2022' /usr/lib/python2.7/lib-dynload/_codecs_iso2022.so imports=[] binaries=[] datas=[]>
encodings._codecs_kr: None -> None
_codecs_kr: None -> <ExtensionModule '_codecs_kr' /usr/lib/python2.7/lib-dynload/_codecs_kr.so imports=[] binaries=[] datas=[]>
encodings._codecs_tw: None -> None
_codecs_tw: None -> <ExtensionModule '_codecs_tw' /usr/lib/python2.7/lib-dynload/_codecs_tw.so imports=[] binaries=[] datas=[]>
encodings.base64: None -> None
base64: None -> <PyModule 'base64' /usr/lib/python2.7/base64.pyc imports=[('sys', 1, 0, -1), ('binascii', 0, 0, -1), ('re', 0, 0, -1), ('struct', 0, 0, -1), ('getopt', 1, 0, -1)] binaries=[] datas=[]>
binascii: None -> <ExtensionModule 'binascii' /usr/lib/python2.7/lib-dynload/binascii.so imports=[] binaries=[] datas=[]>
getopt: None -> <PyModule 'getopt' /usr/lib/python2.7/getopt.pyc imports=[('sys', 0, 1, -1), ('os', 0, 0, -1)] binaries=[] datas=[]>
_struct: None -> <ExtensionModule '_struct' /usr/lib/python2.7/lib-dynload/_struct.so imports=[] binaries=[] datas=[]>
encodings.bz2: None -> None
bz2: None -> <ExtensionModule 'bz2' /usr/lib/python2.7/lib-dynload/bz2.so imports=[] binaries=[] datas=[]>
encodings.sys: None -> None
encodings._codecs_hk: None -> None
_codecs_hk: None -> <ExtensionModule '_codecs_hk' /usr/lib/python2.7/lib-dynload/_codecs_hk.so imports=[] binaries=[] datas=[]>
encodings.cStringIO: None -> None
encodings.binascii: None -> None
encodings.quopri: None -> None
quopri: None -> <PyModule 'quopri' /usr/lib/python2.7/quopri.pyc imports=[('cStringIO.StringIO', 1, 0, -1), ('getopt', 1, 0, -1), ('binascii.a2b_qp', 0, 0, -1), ('binascii.b2a_qp', 0, 0, -1), ('sys', 1, 0, -1), ('binascii', 0, 0, -1), ('cStringIO', 1, 0, -1)] binaries=[] datas=[]>
encodings.StringIO: None -> None
encodings._codecs_cn: None -> None
_codecs_cn: None -> <ExtensionModule '_codecs_cn' /usr/lib/python2.7/lib-dynload/_codecs_cn.so imports=[] binaries=[] datas=[]>
encodings.zlib: None -> None
zlib: None -> <ExtensionModule 'zlib' /usr/lib/python2.7/lib-dynload/zlib.so imports=[] binaries=[] datas=[]>
encodings.unicodedata: None -> None
unicodedata: None -> <ExtensionModule 'unicodedata' /usr/lib/python2.7/lib-dynload/unicodedata.so imports=[] binaries=[] datas=[]>
encodings.re: None -> None
encodings.stringprep: None -> None
stringprep: None -> <PyModule 'stringprep' /usr/lib/python2.7/stringprep.pyc imports=[('unicodedata', 0, 0, -1), ('unicodedata.ucd_3_2_0', 0, 0, -1)] binaries=[] datas=[]>
weakref: None -> <PyModule 'weakref' /usr/lib/python2.7/weakref.pyc imports=[('_weakrefset', 0, 0, -1), ('_weakref.ProxyType', 0, 0, -1), ('exceptions.ReferenceError', 0, 0, -1), ('_weakref.getweakrefcount', 0, 0, -1), ('copy.deepcopy', 1, 0, -1), ('_weakref.ref', 0, 0, -1), ('_weakref.ReferenceType', 0, 0, -1), ('_weakrefset._IterationGuard', 0, 0, -1), ('exceptions', 0, 0, -1), ('_weakref.getweakrefs', 0, 0, -1), ('_weakref.CallableProxyType', 0, 0, -1), ('copy', 1, 0, -1), ('_weakrefset.WeakSet', 0, 0, -1), ('UserDict', 0, 0, -1), ('_weakref', 0, 0, -1), ('_weakref.proxy', 0, 0, -1)] binaries=[] datas=[]>
org: None -> None
  DEL org
org: None -> None
  DEL org
exceptions: None -> <BuiltinModule 'exceptions' None imports=[] binaries=[] datas=[]>
dis: None -> <PyModule 'dis' /usr/lib/python2.7/dis.pyc imports=[('opcode', 0, 0, -1), ('opcode.*', 0, 0, -1), ('opcode.__all__', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1)] binaries=[] datas=[]>
imp: None -> <BuiltinModule 'imp' None imports=[] binaries=[] datas=[]>
opcode: None -> <PyModule 'opcode' /usr/lib/python2.7/opcode.pyc imports=[] binaries=[] datas=[]>
_heapq: None -> <ExtensionModule '_heapq' /usr/lib/python2.7/lib-dynload/_heapq.so imports=[] binaries=[] datas=[]>
unittest.loader: None -> <PyModule 'unittest.loader' /usr/lib/python2.7/unittest/loader.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('os', 0, 0, -1), ('fnmatch.fnmatch', 0, 0, -1), ('fnmatch', 0, 0, -1), ('functools.cmp_to_key', 0, 0, -1), ('suite', 0, 0, 1), ('traceback', 0, 0, -1), ('case', 0, 0, 1), ('functools', 0, 0, -1), ('', 0, 0, 1)] binaries=[] datas=[]>
unittest.result: None -> <PyModule 'unittest.result' /usr/lib/python2.7/unittest/result.pyc imports=[('functools.wraps', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('StringIO.StringIO', 0, 0, -1), ('StringIO', 0, 0, -1), ('traceback', 0, 0, -1), ('util', 0, 0, 1), ('functools', 0, 0, -1), ('', 0, 0, 1)] binaries=[] datas=[]>
unittest.case: None -> <PyModule 'unittest.case' /usr/lib/python2.7/unittest/case.pyc imports=[('util._count_diff_hashable', 0, 0, 1), ('collections', 0, 0, -1), ('re', 0, 0, -1), ('util._count_diff_all_purpose', 0, 0, 1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('', 0, 0, 1), ('warnings', 0, 0, -1), ('util.safe_repr', 0, 0, 1), ('util.unorderable_list_difference', 0, 0, 1), ('difflib', 0, 0, -1), ('util.strclass', 0, 0, 1), ('pprint', 0, 0, -1), ('result', 0, 0, 1), ('util', 0, 0, 1), ('functools', 0, 0, -1)] binaries=[] datas=[]>
unittest.main: None -> <PyModule 'unittest.main' /usr/lib/python2.7/unittest/main.pyc imports=[('runner', 0, 0, 1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('os', 0, 0, -1), ('', 0, 0, 1), ('loader', 0, 0, 1), ('optparse', 1, 0, -1), ('getopt', 1, 0, -1), ('signals.installHandler', 0, 0, 1), ('signals', 0, 0, 1)] binaries=[] datas=[]>
unittest.signals: None -> <PyModule 'unittest.signals' /usr/lib/python2.7/unittest/signals.pyc imports=[('functools', 0, 0, -1), ('functools.wraps', 0, 0, -1), ('signal', 0, 0, -1), ('weakref', 0, 0, -1)] binaries=[] datas=[]>
unittest.suite: None -> <PyModule 'unittest.suite' /usr/lib/python2.7/unittest/suite.pyc imports=[('util', 0, 0, 1), ('case', 0, 0, 1), ('', 0, 0, 1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
unittest.runner: None -> <PyModule 'unittest.runner' /usr/lib/python2.7/unittest/runner.pyc imports=[('result', 0, 0, 1), ('sys', 0, 0, -1), ('', 0, 0, 1), ('signals', 0, 0, 1), ('time', 0, 0, -1), ('signals.registerResult', 0, 0, 1)] binaries=[] datas=[]>
unittest.re: None -> None
unittest.sys: None -> None
unittest.types: None -> None
unittest.os: None -> None
unittest.fnmatch: None -> None
unittest.functools: None -> None
unittest.traceback: None -> None
unittest.util: None -> <PyModule 'unittest.util' /usr/lib/python2.7/unittest/util.pyc imports=[('collections', 0, 0, -1), ('collections.namedtuple', 0, 0, -1), ('collections.OrderedDict', 0, 0, -1)] binaries=[] datas=[]>
unittest.collections: None -> None
unittest.warnings: None -> None
unittest.difflib: None -> None
unittest.pprint: None -> None
unittest.StringIO: None -> None
unittest.optparse: None -> None
unittest.getopt: None -> None
unittest.time: None -> None
unittest.signal: None -> None
unittest.weakref: None -> None
io: None -> <PyModule 'io' /usr/lib/python2.7/io.pyc imports=[('_io.BytesIO', 0, 0, -1), ('_io.BufferedRWPair', 0, 0, -1), ('_io.FileIO', 0, 0, -1), ('_io', 0, 0, -1), ('_io.IncrementalNewlineDecoder', 0, 0, -1), ('_io.UnsupportedOperation', 0, 0, -1), ('_io.BufferedWriter', 0, 0, -1), ('abc', 0, 0, -1), ('_io.open', 0, 0, -1), ('_io.TextIOWrapper', 0, 0, -1), ('_io.BufferedRandom', 0, 0, -1), ('_io.DEFAULT_BUFFER_SIZE', 0, 0, -1), ('_io.BlockingIOError', 0, 0, -1), ('_io.BufferedReader', 0, 0, -1), ('_io.StringIO', 0, 0, -1)] binaries=[] datas=[]>
hashlib: None -> <PyModule 'hashlib' /usr/lib/python2.7/hashlib.pyc imports=[('_sha256', 1, 1, -1), ('logging', 0, 1, -1), ('_hashlib.pbkdf2_hmac', 0, 0, -1), ('binascii', 0, 1, -1), ('_sha512', 1, 1, -1), ('_sha', 1, 1, -1), ('_md5', 1, 1, -1), ('struct', 0, 1, -1), ('_hashlib', 0, 0, -1)] binaries=[] datas=[]>
math: None -> <ExtensionModule 'math' /usr/lib/python2.7/lib-dynload/math.so imports=[] binaries=[] datas=[]>
_random: None -> <ExtensionModule '_random' /usr/lib/python2.7/lib-dynload/_random.so imports=[] binaries=[] datas=[]>
_sha256: None -> None
  DEL _sha256
logging: None -> <PkgModule 'logging' /usr/lib/python2.7/logging/__init__.pyc imports=[('collections', 0, 0, -1), ('threading', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('warnings', 0, 0, -1), ('atexit', 0, 0, -1), ('thread', 0, 0, -1), ('cStringIO', 0, 0, -1), ('traceback', 0, 0, -1), ('codecs', 0, 0, -1), ('time', 0, 0, -1), ('weakref', 0, 0, -1)] binaries=[] datas=[]>
_hashlib: None -> <ExtensionModule '_hashlib' /usr/lib/python2.7/lib-dynload/_hashlib.so imports=[] binaries=[] datas=[]>
_sha512: None -> None
  DEL _sha512
_sha: None -> None
  DEL _sha
_md5: None -> None
  DEL _md5
logging.collections: None -> None
logging.threading: None -> None
logging.sys: None -> None
logging.os: None -> None
logging.warnings: None -> None
logging.atexit: None -> None
atexit: None -> <PyModule 'atexit' /usr/lib/python2.7/atexit.pyc imports=[('traceback', 1, 1, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
logging.thread: None -> None
logging.cStringIO: None -> None
logging.traceback: None -> None
logging.codecs: None -> None
logging.time: None -> None
logging.weakref: None -> None
_io: None -> <ExtensionModule '_io' /usr/lib/python2.7/lib-dynload/_io.so imports=[] binaries=[] datas=[]>
marshal: None -> <BuiltinModule 'marshal' None imports=[] binaries=[] datas=[]>
org: None -> None
  DEL org
org: None -> None
  DEL org
ntpath: None -> <PyModule 'ntpath' /usr/lib/python2.7/ntpath.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('nt._getfullpathname', 0, 0, -1), ('warnings', 0, 0, -1), ('nt._isdir', 0, 0, -1), ('genericpath', 0, 0, -1), ('stat', 0, 0, -1), ('nt', 0, 0, -1), ('string', 1, 0, -1), ('genericpath.*', 0, 0, -1)] binaries=[] datas=[]>
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
pydoc: None -> <PyModule 'pydoc' /usr/lib/python2.7/pydoc.pyc imports=[('collections.deque', 0, 0, -1), ('string.rfind', 0, 0, -1), ('tty', 1, 0, -1), ('os', 0, 0, -1), ('warnings', 0, 0, -1), ('pkgutil', 0, 0, -1), ('string.rstrip', 0, 0, -1), ('locale', 0, 1, -1), ('getopt', 1, 0, -1), ('pydoc_data.topics', 1, 0, -1), ('string.find', 0, 0, -1), ('traceback.extract_tb', 0, 0, -1), ('sys', 0, 0, -1), ('formatter', 1, 1, -1), ('string.join', 0, 0, -1), ('string', 0, 0, -1), ('webbrowser', 1, 0, -1), ('repr', 0, 0, -1), ('string.expandtabs', 0, 0, -1), ('BaseHTTPServer', 1, 0, -1), ('collections', 0, 0, -1), ('string.split', 0, 0, -1), ('types', 0, 0, -1), ('StringIO', 1, 1, -1), ('repr.Repr', 0, 0, -1), ('string.strip', 0, 0, -1), ('re', 0, 0, -1), ('threading', 1, 0, -1), ('tempfile', 1, 0, -1), ('string.lower', 0, 0, -1), ('inspect', 0, 0, -1), ('select', 1, 0, -1), ('nturl2path', 1, 1, -1), ('imp', 0, 0, -1), ('mimetools', 1, 0, -1), ('__builtin__', 0, 0, -1), ('traceback', 0, 0, -1)] binaries=[] datas=[]>
tty: None -> <PyModule 'tty' /usr/lib/python2.7/tty.pyc imports=[('termios.*', 0, 0, -1), ('termios', 0, 0, -1)] binaries=[] datas=[]>
pkgutil: None -> <PyModule 'pkgutil' /usr/lib/python2.7/pkgutil.pyc imports=[('imp', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('os', 0, 0, -1), ('os.path', 0, 0, -1), ('zipimport.zipimporter', 0, 0, -1), ('zipimport', 0, 0, -1), ('marshal', 1, 0, -1), ('types.ModuleType', 0, 0, -1), ('inspect', 1, 0, -1)] binaries=[] datas=[]>
pydoc_data: None -> <PkgModule 'pydoc_data' /usr/lib/python2.7/pydoc_data/__init__.pyc imports=[] binaries=[] datas=[]>
pydoc_data.topics: None -> <PyModule 'pydoc_data.topics' /usr/lib/python2.7/pydoc_data/topics.pyc imports=[] binaries=[] datas=[]>
formatter: None -> <PyModule 'formatter' /usr/lib/python2.7/formatter.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
webbrowser: None -> <PyModule 'webbrowser' /usr/lib/python2.7/webbrowser.pyc imports=[('sys', 0, 0, -1), ('copy', 1, 1, -1), ('os', 0, 0, -1), ('glob', 1, 0, -1), ('tempfile', 1, 0, -1), ('stat', 0, 0, -1), ('subprocess', 0, 0, -1), ('pwd', 1, 0, -1), ('getopt', 1, 0, -1), ('socket', 1, 0, -1), ('time', 0, 0, -1), ('shlex', 0, 0, -1)] binaries=[] datas=[]>
BaseHTTPServer: None -> <PyModule 'BaseHTTPServer' /usr/lib/python2.7/BaseHTTPServer.pyc imports=[('sys', 0, 0, -1), ('warnings', 0, 0, -1), ('socket', 0, 0, -1), ('SocketServer', 0, 0, -1), ('warnings.catch_warnings', 0, 0, -1), ('mimetools', 0, 0, -1), ('warnings.filterwarnings', 0, 0, -1), ('time', 0, 0, -1)] binaries=[] datas=[]>
nturl2path: None -> <PyModule 'nturl2path' /usr/lib/python2.7/nturl2path.pyc imports=[('urllib', 1, 0, -1), ('string', 1, 0, -1)] binaries=[] datas=[]>
mimetools: None -> <PyModule 'mimetools' /usr/lib/python2.7/mimetools.pyc imports=[('warnings.warnpy3k', 0, 0, -1), ('sys', 0, 0, -1), ('uu', 1, 1, -1), ('os', 0, 0, -1), ('rfc822', 0, 0, -1), ('quopri', 1, 1, -1), ('warnings', 0, 0, -1), ('dummy_thread', 0, 1, -1), ('socket', 1, 1, -1), ('thread', 0, 0, -1), ('warnings.catch_warnings', 0, 0, -1), ('time', 1, 0, -1), ('base64', 1, 1, -1), ('warnings.filterwarnings', 0, 0, -1), ('tempfile', 0, 0, -1)] binaries=[] datas=[]>
termios: None -> <ExtensionModule 'termios' /usr/lib/python2.7/lib-dynload/termios.so imports=[] binaries=[] datas=[]>
zipimport: None -> <BuiltinModule 'zipimport' None imports=[] binaries=[] datas=[]>
glob: None -> <PyModule 'glob' /usr/lib/python2.7/glob.pyc imports=[('os', 0, 0, -1), ('re', 0, 0, -1), ('sys', 0, 0, -1), ('fnmatch', 0, 0, -1)] binaries=[] datas=[]>
socket: None -> <PyModule 'socket' /usr/lib/python2.7/socket.pyc imports=[('_ssl.SSL_ERROR_EOF', 0, 1, -1), ('functools.partial', 0, 0, -1), ('_ssl.RAND_add', 0, 1, -1), ('os', 0, 0, -1), ('warnings', 0, 0, -1), ('_ssl.RAND_egd', 0, 1, -1), ('_ssl', 0, 1, -1), ('sys', 0, 0, -1), ('ssl', 1, 0, -1), ('cStringIO', 0, 0, -1), ('_ssl.SSL_ERROR_INVALID_ERROR_CODE', 0, 1, -1), ('_ssl.SSL_ERROR_WANT_X509_LOOKUP', 0, 1, -1), ('_ssl.SSL_ERROR_WANT_CONNECT', 0, 1, -1), ('_ssl.SSL_ERROR_SYSCALL', 0, 1, -1), ('_ssl.SSL_ERROR_WANT_WRITE', 0, 1, -1), ('_socket.*', 0, 0, -1), ('types', 0, 0, -1), ('_ssl.SSL_ERROR_WANT_READ', 0, 1, -1), ('_ssl', 0, 0, -1), ('_socket', 0, 0, -1), ('_ssl.RAND_status', 0, 1, -1), ('StringIO.StringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 0, -1), ('errno', 0, 0, -1), ('_ssl.SSL_ERROR_SSL', 0, 1, -1), ('_ssl.SSL_ERROR_ZERO_RETURN', 0, 1, -1), ('functools', 0, 0, -1), ('types.MethodType', 0, 0, -1), ('_ssl.SSLError', 0, 1, -1), ('StringIO', 0, 1, -1)] binaries=[] datas=[]>
_ssl: None -> <ExtensionModule '_ssl' /usr/lib/python2.7/lib-dynload/_ssl.so imports=[] binaries=[] datas=[]>
ssl: None -> <PyModule 'ssl' /usr/lib/python2.7/ssl.pyc imports=[('_ssl.SSLSyscallError', 0, 0, -1), ('_ssl.OPENSSL_VERSION', 0, 0, -1), ('_ssl.VERIFY_CRL_CHECK_LEAF', 0, 0, -1), ('_ssl.RAND_status', 0, 0, -1), ('os', 0, 0, -1), ('socket._fileobject', 0, 0, -1), ('_ssl.CERT_OPTIONAL', 0, 0, -1), ('_ssl.HAS_NPN', 0, 0, -1), ('_ssl.SSLWantReadError', 0, 0, -1), ('_ssl.SSLEOFError', 0, 0, -1), ('socket.SOCK_STREAM', 0, 0, -1), ('_ssl.OPENSSL_VERSION_INFO', 0, 0, -1), ('calendar', 1, 0, -1), ('contextlib', 0, 0, -1), ('_ssl.RAND_egd', 0, 0, -1), ('sys', 0, 0, -1), ('_ssl.HAS_ECDH', 0, 0, -1), ('socket.SO_TYPE', 0, 0, -1), ('contextlib.closing', 0, 0, -1), ('time.strptime', 1, 0, -1), ('socket.error', 0, 0, -1), ('_ssl', 0, 1, -1), ('textwrap', 0, 0, -1), ('_ssl.VERIFY_X509_STRICT', 0, 0, -1), ('_ssl.RAND_add', 0, 0, -1), ('socket.create_connection', 0, 0, -1), ('_ssl.OPENSSL_VERSION_NUMBER', 0, 0, -1), ('_ssl._SSLContext', 0, 0, -1), ('_ssl.VERIFY_CRL_CHECK_CHAIN', 0, 0, -1), ('collections', 0, 0, -1), ('_ssl.CERT_REQUIRED', 0, 0, -1), ('_ssl.SSLError', 0, 0, -1), ('_ssl.txt2obj', 0, 0, -1), ('_ssl.SSLZeroReturnError', 0, 0, -1), ('_ssl._OPENSSL_API_VERSION', 0, 0, -1), ('_ssl.enum_crls', 0, 1, -1), ('_ssl.nid2obj', 0, 0, -1), ('_ssl.enum_certificates', 0, 1, -1), ('_ssl', 0, 0, -1), ('base64', 0, 0, -1), ('socket', 0, 0, -1), ('calendar.timegm', 1, 0, -1), ('errno', 0, 0, -1), ('collections.namedtuple', 0, 0, -1), ('_ssl.CERT_NONE', 0, 0, -1), ('socket._delegate_methods', 0, 0, -1), ('re', 0, 0, -1), ('_ssl.SSLWantWriteError', 0, 0, -1), ('time', 1, 0, -1), ('_ssl.VERIFY_DEFAULT', 0, 0, -1), ('_ssl.HAS_SNI', 0, 0, -1), ('socket.socket', 0, 0, -1), ('socket.AF_INET', 0, 0, -1), ('socket.SOL_SOCKET', 0, 0, -1)] binaries=[] datas=[]>
_socket: None -> <ExtensionModule '_socket' /usr/lib/python2.7/lib-dynload/_socket.so imports=[] binaries=[] datas=[]>
contextlib: None -> <PyModule 'contextlib' /usr/lib/python2.7/contextlib.pyc imports=[('functools.wraps', 0, 0, -1), ('functools', 0, 0, -1), ('warnings', 0, 0, -1), ('sys', 0, 0, -1), ('warnings.warn', 0, 0, -1)] binaries=[] datas=[]>
SocketServer: None -> <PyModule 'SocketServer' /usr/lib/python2.7/SocketServer.pyc imports=[('threading', 0, 0, -1), ('sys', 0, 0, -1), ('select', 0, 0, -1), ('os', 0, 0, -1), ('StringIO', 1, 1, -1), ('StringIO.StringIO', 1, 1, -1), ('cStringIO.StringIO', 1, 0, -1), ('socket', 0, 0, -1), ('errno', 0, 0, -1), ('cStringIO', 1, 0, -1), ('dummy_threading', 0, 1, -1), ('traceback', 1, 0, -1)] binaries=[] datas=[]>
dummy_threading: None -> <PyModule 'dummy_threading' /usr/lib/python2.7/dummy_threading.pyc imports=[('dummy_thread', 0, 0, -1), ('threading', 0, 0, -1), ('sys', 0, 0, -1), ('_dummy_threading', 0, 0, -1), ('_dummy_threading.__all__', 0, 0, -1), ('_dummy_threading.*', 0, 0, -1), ('sys.modules', 0, 0, -1)] binaries=[] datas=[]>
_dummy_threading: None -> None
  DEL _dummy_threading
_dummy_threading: None -> None
  DEL _dummy_threading
_dummy_threading: None -> None
  DEL _dummy_threading
uu: None -> <PyModule 'uu' /usr/lib/python2.7/uu.pyc imports=[('optparse', 1, 0, -1), ('binascii', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1)] binaries=[] datas=[]>
rfc822: None -> <PyModule 'rfc822' /usr/lib/python2.7/rfc822.pyc imports=[('sys', 0, 1, -1), ('warnings', 0, 0, -1), ('warnings.warnpy3k', 0, 0, -1), ('time', 0, 0, -1), ('os', 0, 1, -1)] binaries=[] datas=[]>
urllib: None -> <PyModule 'urllib' /usr/lib/python2.7/urllib.pyc imports=[('ssl', 0, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('os', 0, 0, -1), ('email.utils', 1, 0, -1), ('StringIO', 1, 1, -1), ('nturl2path.url2pathname', 0, 1, -1), ('re', 1, 0, -1), ('cStringIO', 1, 1, -1), ('_scproxy._get_proxy_settings', 0, 1, -1), ('tempfile', 1, 1, -1), ('ftplib', 1, 0, -1), ('fnmatch', 1, 0, -1), ('re', 1, 1, -1), ('sys', 0, 0, -1), ('_scproxy', 0, 1, -1), ('mimetools', 1, 0, -1), ('warnings.warnpy3k', 1, 0, -1), ('string', 0, 0, -1), ('cStringIO.StringIO', 1, 1, -1), ('nturl2path.pathname2url', 0, 1, -1), ('warnings', 1, 0, -1), ('time', 0, 0, -1), ('_scproxy._get_proxies', 0, 1, -1), ('rourl2path.pathname2url', 0, 1, -1), ('urlparse', 0, 0, -1), ('mimetypes', 1, 0, -1), ('rourl2path', 0, 1, -1), ('socket', 0, 0, -1), ('base64', 0, 0, -1), ('ftplib', 1, 1, -1), ('getpass', 1, 0, -1), ('cStringIO', 1, 0, -1), ('re', 0, 0, -1), ('httplib', 1, 0, -1), ('urlparse.urljoin', 0, 0, -1), ('rourl2path.url2pathname', 0, 1, -1), ('nturl2path', 0, 1, -1), ('_winreg', 1, 0, -1), ('mimetools', 1, 1, -1), ('fnmatch.fnmatch', 1, 0, -1), ('socket', 1, 0, -1), ('StringIO.StringIO', 1, 1, -1)] binaries=[] datas=[]>
email: None -> <PkgModule 'email' /usr/lib/python2.7/email/__init__.pyc imports=[('email.mime', 0, 0, -1), ('email.parser.Parser', 1, 0, -1), ('sys', 0, 0, -1), ('email.parser', 1, 0, -1), ('email.charset', 0, 0, -1), ('email.encoders', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.feedparser', 0, 0, -1), ('email.generator', 0, 0, -1), ('email.header', 0, 0, -1), ('email.iterators', 0, 0, -1), ('email.message', 0, 0, -1), ('email.parser', 0, 0, -1), ('email.utils', 0, 0, -1), ('email.base64mime', 0, 0, -1), ('email.quoprimime', 0, 0, -1), ('email.mime.audio', 0, 0, -1), ('email.mime.base', 0, 0, -1), ('email.mime.image', 0, 0, -1), ('email.mime.message', 0, 0, -1), ('email.mime.multipart', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('email.mime.text', 0, 0, -1)] binaries=[] datas=[]>
email.utils: None -> <PyModule 'email.utils' /usr/lib/python2.7/email/utils.pyc imports=[('email._parseaddr', 0, 0, -1), ('email.encoders', 0, 0, -1), ('re', 0, 0, -1), ('email._parseaddr.parsedate', 0, 0, -1), ('email._parseaddr.parsedate_tz', 0, 0, -1), ('email._parseaddr.quote', 0, 0, -1), ('os', 0, 0, -1), ('urllib', 1, 0, -1), ('email._parseaddr.mktime_tz', 0, 0, -1), ('warnings', 0, 0, -1), ('quopri.decodestring', 0, 0, -1), ('socket', 0, 0, -1), ('email.encoders._qencode', 0, 0, -1), ('random', 0, 0, -1), ('urllib', 0, 0, -1), ('base64', 0, 0, -1), ('email.encoders._bencode', 0, 0, -1), ('time', 0, 0, -1), ('quopri', 0, 0, -1), ('email._parseaddr.AddressList', 0, 0, -1)] binaries=[] datas=[]>
_scproxy: None -> None
  DEL _scproxy
ftplib: None -> <PyModule 'ftplib' /usr/lib/python2.7/ftplib.pyc imports=[('ssl', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('re', 1, 1, -1), ('socket', 0, 0, -1), ('socket._GLOBAL_DEFAULT_TIMEOUT', 0, 0, -1), ('SOCKS', 0, 0, -1), ('socket', 0, 1, -1), ('socket.getfqdn', 0, 0, -1)] binaries=[] datas=[]>
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
rourl2path: None -> None
  DEL rourl2path
urlparse: None -> <PyModule 'urlparse' /usr/lib/python2.7/urlparse.pyc imports=[('collections', 0, 0, -1), ('re', 0, 0, -1), ('collections.namedtuple', 0, 0, -1)] binaries=[] datas=[]>
mimetypes: None -> <PyModule 'mimetypes' /usr/lib/python2.7/mimetypes.pyc imports=[('_winreg', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('urllib', 0, 0, -1), ('posixpath', 0, 0, -1), ('getopt', 0, 1, -1)] binaries=[] datas=[]>
rourl2path: None -> None
  DEL rourl2path
getpass: None -> <PyModule 'getpass' /usr/lib/python2.7/getpass.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('EasyDialogs', 0, 1, -1), ('warnings', 0, 0, -1), ('EasyDialogs.AskPassword', 0, 1, -1), ('msvcrt', 1, 0, -1), ('msvcrt', 0, 1, -1), ('pwd', 1, 0, -1), ('termios', 0, 0, -1), ('os', 1, 0, -1)] binaries=[] datas=[]>
httplib: None -> <PyModule 'httplib' /usr/lib/python2.7/httplib.pyc imports=[('sys.py3kwarning', 0, 0, -1), ('ssl', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('array', 0, 0, -1), ('warnings', 0, 0, -1), ('socket', 0, 0, -1), ('cStringIO', 0, 0, -1), ('mimetools', 0, 0, -1), ('array.array', 0, 0, -1), ('StringIO.StringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 0, -1), ('StringIO', 0, 1, -1), ('urlparse.urlsplit', 0, 0, -1), ('urlparse', 0, 0, -1), ('_ssl', 0, 0, -1), ('ssl', 0, 0, -1)] binaries=[] datas=[]>
rourl2path: None -> None
  DEL rourl2path
_winreg: None -> None
  DEL _winreg
email.email: None -> None
email.mime: None -> <PkgModule 'email.mime' /usr/lib/python2.7/email/mime/__init__.pyc imports=[] binaries=[] datas=[]>
email.parser: None -> <PyModule 'email.parser' /usr/lib/python2.7/email/parser.pyc imports=[('email.message', 0, 0, -1), ('warnings', 0, 0, -1), ('cStringIO', 0, 0, -1), ('email.feedparser', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('email.feedparser.FeedParser', 0, 0, -1), ('email.message.Message', 0, 0, -1)] binaries=[] datas=[]>
email.sys: None -> None
email.charset: None -> <PyModule 'email.charset' /usr/lib/python2.7/email/charset.pyc imports=[('email.encoders', 0, 0, -1), ('email.quoprimime', 0, 0, -1), ('email', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.base64mime', 0, 0, -1), ('email.encoders.encode_7or8bit', 0, 0, -1), ('codecs', 0, 0, -1)] binaries=[] datas=[]>
email.encoders: None -> <PyModule 'email.encoders' /usr/lib/python2.7/email/encoders.pyc imports=[('base64', 0, 0, -1), ('quopri.encodestring', 0, 0, -1), ('quopri', 0, 0, -1)] binaries=[] datas=[]>
email.errors: None -> <PyModule 'email.errors' /usr/lib/python2.7/email/errors.pyc imports=[] binaries=[] datas=[]>
email.feedparser: None -> <PyModule 'email.feedparser' /usr/lib/python2.7/email/feedparser.pyc imports=[('email.errors', 0, 0, -1), ('re', 0, 0, -1), ('email', 0, 0, -1), ('email.message', 0, 0, -1)] binaries=[] datas=[]>
email.generator: None -> <PyModule 'email.generator' /usr/lib/python2.7/email/generator.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('warnings', 0, 0, -1), ('email.header.Header', 0, 0, -1), ('email.header', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('cStringIO', 0, 0, -1), ('random', 0, 0, -1), ('time', 0, 0, -1)] binaries=[] datas=[]>
email.header: None -> <PyModule 'email.header' /usr/lib/python2.7/email/header.pyc imports=[('re', 0, 0, -1), ('email.quoprimime', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.charset.Charset', 0, 0, -1), ('email.base64mime', 0, 0, -1), ('email.errors.HeaderParseError', 0, 0, -1), ('binascii', 0, 0, -1), ('email.charset', 0, 0, -1)] binaries=[] datas=[]>
email.iterators: None -> <PyModule 'email.iterators' /usr/lib/python2.7/email/iterators.pyc imports=[('cStringIO.StringIO', 0, 0, -1), ('cStringIO', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
email.message: None -> <PyModule 'email.message' /usr/lib/python2.7/email/message.pyc imports=[('re', 0, 0, -1), ('email.iterators', 1, 0, -1), ('email', 0, 0, -1), ('email.errors', 0, 0, -1), ('email.iterators.walk', 1, 0, -1), ('warnings', 0, 0, -1), ('email.generator.Generator', 1, 0, -1), ('cStringIO', 0, 0, -1), ('email.utils', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('binascii', 0, 0, -1), ('email.charset', 0, 0, -1), ('uu', 0, 0, -1), ('email.generator', 1, 0, -1), ('email.iterators', 0, 0, -1), ('email.generator', 0, 0, -1)] binaries=[] datas=[]>
email.base64mime: None -> <PyModule 'email.base64mime' /usr/lib/python2.7/email/base64mime.pyc imports=[('email.utils.fix_eols', 0, 0, -1), ('binascii', 0, 0, -1), ('email.utils', 0, 0, -1), ('binascii.a2b_base64', 0, 0, -1), ('binascii.b2a_base64', 0, 0, -1)] binaries=[] datas=[]>
email.quoprimime: None -> <PyModule 'email.quoprimime' /usr/lib/python2.7/email/quoprimime.pyc imports=[('string.hexdigits', 0, 0, -1), ('re', 0, 0, -1), ('email.utils.fix_eols', 0, 0, -1), ('string', 0, 0, -1), ('email.utils', 0, 0, -1)] binaries=[] datas=[]>
email.mime.audio: None -> <PyModule 'email.mime.audio' /usr/lib/python2.7/email/mime/audio.pyc imports=[('email.encoders', 0, 0, -1), ('email', 0, 0, -1), ('sndhdr', 0, 0, -1), ('email.mime.nonmultipart.MIMENonMultipart', 0, 0, -1), ('cStringIO', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('cStringIO.StringIO', 0, 0, -1)] binaries=[] datas=[]>
email.mime.base: None -> <PyModule 'email.mime.base' /usr/lib/python2.7/email/mime/base.pyc imports=[('email', 0, 0, -1), ('email.message', 0, 0, -1)] binaries=[] datas=[]>
email.mime.image: None -> <PyModule 'email.mime.image' /usr/lib/python2.7/email/mime/image.pyc imports=[('email.encoders', 0, 0, -1), ('email.mime.nonmultipart.MIMENonMultipart', 0, 0, -1), ('imghdr', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('email', 0, 0, -1)] binaries=[] datas=[]>
email.mime.message: None -> <PyModule 'email.mime.message' /usr/lib/python2.7/email/mime/message.pyc imports=[('email.mime.nonmultipart.MIMENonMultipart', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1), ('email', 0, 0, -1), ('email.message', 0, 0, -1)] binaries=[] datas=[]>
email.mime.multipart: None -> <PyModule 'email.mime.multipart' /usr/lib/python2.7/email/mime/multipart.pyc imports=[('email.mime.base', 0, 0, -1), ('email.mime.base.MIMEBase', 0, 0, -1)] binaries=[] datas=[]>
email.mime.nonmultipart: None -> <PyModule 'email.mime.nonmultipart' /usr/lib/python2.7/email/mime/nonmultipart.pyc imports=[('email.errors', 0, 0, -1), ('email.mime.base', 0, 0, -1), ('email.mime.base.MIMEBase', 0, 0, -1), ('email', 0, 0, -1)] binaries=[] datas=[]>
email.mime.text: None -> <PyModule 'email.mime.text' /usr/lib/python2.7/email/mime/text.pyc imports=[('email.encoders', 0, 0, -1), ('email.mime.nonmultipart.MIMENonMultipart', 0, 0, -1), ('email.encoders.encode_7or8bit', 0, 0, -1), ('email.mime.nonmultipart', 0, 0, -1)] binaries=[] datas=[]>
email.warnings: None -> None
email.cStringIO: None -> None
email.re: None -> None
email.binascii: None -> None
email.uu: None -> None
email.random: None -> None
email.time: None -> None
email.string: None -> None
email._parseaddr: None -> <PyModule 'email._parseaddr' /usr/lib/python2.7/email/_parseaddr.pyc imports=[('calendar', 0, 0, -1), ('time', 0, 0, -1)] binaries=[] datas=[]>
email.os: None -> None
email.urllib: None -> None
email.quopri: None -> None
email.socket: None -> None
email.base64: None -> None
email.calendar: None -> None
email.codecs: None -> None
email.mime.email: None -> None
email.mime.sndhdr: None -> None
sndhdr: None -> <PyModule 'sndhdr' /usr/lib/python2.7/sndhdr.pyc imports=[('sys', 1, 0, -1), ('aifc', 1, 0, -1), ('glob', 1, 1, -1), ('os', 1, 0, -1)] binaries=[] datas=[]>
email.mime.cStringIO: None -> None
aifc: None -> <PyModule 'aifc' /usr/lib/python2.7/aifc.pyc imports=[('cl', 1, 1, -1), ('struct', 0, 0, -1), ('audioop', 1, 0, -1), ('chunk.Chunk', 0, 0, -1), ('__builtin__', 0, 0, -1), ('sys', 0, 1, -1), ('cl', 1, 0, -1), ('math', 1, 0, -1), ('chunk', 0, 0, -1), ('audioop', 1, 1, -1)] binaries=[] datas=[]>
cl: None -> None
  DEL cl
audioop: None -> <ExtensionModule 'audioop' /usr/lib/python2.7/lib-dynload/audioop.so imports=[] binaries=[] datas=[]>
chunk: None -> <PyModule 'chunk' /usr/lib/python2.7/chunk.pyc imports=[('struct', 1, 0, -1)] binaries=[] datas=[]>
cl: None -> None
  DEL cl
email.mime.imghdr: None -> None
imghdr: None -> <PyModule 'imghdr' /usr/lib/python2.7/imghdr.pyc imports=[('sys', 1, 0, -1), ('glob', 1, 1, -1), ('os', 1, 0, -1)] binaries=[] datas=[]>
SOCKS: None -> None
  DEL SOCKS
_winreg: None -> None
  DEL _winreg
EasyDialogs: None -> None
  DEL EasyDialogs
EasyDialogs: None -> None
  DEL EasyDialogs
msvcrt: None -> None
  DEL msvcrt
msvcrt: None -> None
  DEL msvcrt
__main__: <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/_pyi_bootstrap.py imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('pyi_archive', 0, 0, -1), ('pyi_os_path', 0, 0, -1), ('site', 0, 0, -1), ('pyi_importers', 0, 0, -1), ('warnings', 0, 1, -1), ('encodings', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_importers.py imports=[('pyi_archive.ZlibArchive', 0, 0, -1), ('imp', 0, 0, -1), ('sys', 0, 0, -1), ('pyi_archive.ArchiveReadError', 0, 0, -1), ('pyi_archive', 0, 0, -1), ('pyi_os_path', 0, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
msvcrt: None -> None
  DEL msvcrt
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
org: None -> None
  DEL org
org: None -> None
  DEL org
_sha256: None -> None
  DEL _sha256
_sha512: None -> None
  DEL _sha512
_sha: None -> None
  DEL _sha
_md5: None -> None
  DEL _md5
org: None -> None
  DEL org
org: None -> None
  DEL org
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
__main__: <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_importers.py imports=[('pyi_archive.ZlibArchive', 0, 0, -1), ('imp', 0, 0, -1), ('sys', 0, 0, -1), ('pyi_archive.ArchiveReadError', 0, 0, -1), ('pyi_archive', 0, 0, -1), ('pyi_os_path', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_archive.py imports=[('imp', 0, 0, -1), ('sys', 0, 0, -1), ('marshal', 0, 0, -1), ('os', 1, 1, -1), ('struct', 0, 0, -1), ('imp', 1, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
msvcrt: None -> None
  DEL msvcrt
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
org: None -> None
  DEL org
org: None -> None
  DEL org
_sha256: None -> None
  DEL _sha256
_sha512: None -> None
  DEL _sha512
_sha: None -> None
  DEL _sha
_md5: None -> None
  DEL _md5
org: None -> None
  DEL org
org: None -> None
  DEL org
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
__main__: <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_archive.py imports=[('imp', 0, 0, -1), ('sys', 0, 0, -1), ('marshal', 0, 0, -1), ('os', 1, 1, -1), ('struct', 0, 0, -1), ('imp', 1, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_carchive.py imports=[('zlib', 0, 0, -1), ('os.path', 1, 0, -1), ('pyi_archive', 0, 0, -1), ('sys', 0, 0, -1), ('struct', 0, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
msvcrt: None -> None
  DEL msvcrt
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
org: None -> None
  DEL org
org: None -> None
  DEL org
_sha256: None -> None
  DEL _sha256
_sha512: None -> None
  DEL _sha512
_sha: None -> None
  DEL _sha
_md5: None -> None
  DEL _md5
org: None -> None
  DEL org
org: None -> None
  DEL org
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
__main__: <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_carchive.py imports=[('zlib', 0, 0, -1), ('os.path', 1, 0, -1), ('pyi_archive', 0, 0, -1), ('sys', 0, 0, -1), ('struct', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_os_path.py imports=[('sys', 0, 0, -1), ('posix.environ', 0, 1, -1), ('nt.listdir', 0, 1, -1), ('nt.environ', 0, 1, -1), ('posix', 0, 1, -1), ('posix.listdir', 0, 1, -1), ('nt', 0, 1, -1)] binaries=[] datas=[]>
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
__main__: <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/pyi_os_path.py imports=[('sys', 0, 0, -1), ('posix.environ', 0, 1, -1), ('nt.listdir', 0, 1, -1), ('nt.environ', 0, 1, -1), ('posix', 0, 1, -1), ('posix.listdir', 0, 1, -1), ('nt', 0, 1, -1)] binaries=[] datas=[]> -> <PyScript '__main__' main.py imports=[('lepton.texturizer.SpriteTexturizer', 0, 0, -1), ('ui', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('animation.*', 0, 0, -1), ('lepton', 0, 0, -1), ('mob', 0, 0, -1), ('particles.*', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('lepton.emitter.StaticEmitter', 0, 0, -1), ('game', 0, 0, -1), ('mob.*', 0, 0, -1), ('lepton.Particle', 0, 0, -1), ('lepton.renderer', 0, 0, -1), ('math.cos', 0, 0, -1), ('math.sin', 0, 0, -1), ('collections.OrderedDict', 0, 0, -1), ('math.pi', 0, 0, -1), ('tower', 0, 0, -1), ('functions.*', 0, 0, -1), ('lepton.controller.Gravity', 0, 0, -1), ('animation', 0, 0, -1), ('collections', 0, 0, -1), ('lepton.renderer.PointRenderer', 0, 0, -1), ('lepton.ParticleGroup', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('lepton.controller.Lifetime', 0, 0, -1), ('pypf', 0, 0, -1), ('lepton.texturizer', 0, 0, -1), ('functions', 0, 0, -1), ('particles', 0, 0, -1), ('lepton.controller.Fader', 0, 0, -1), ('pyglet.window.mouse', 0, 0, -1), ('tower.*', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('lepton.controller', 0, 0, -1), ('math', 0, 0, -1), ('lepton.emitter', 0, 0, -1), ('lepton.controller.Movement', 0, 0, -1), ('lepton.default_system', 0, 0, -1), ('ui.*', 0, 0, -1), ('game.*', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
lepton: None -> <PkgModule 'lepton' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/__init__.pyc imports=[('group.ParticleGroup', 0, 0, -1), ('system.ParticleSystem', 0, 0, -1), ('group', 0, 0, -1), ('system', 0, 0, -1), ('particle_struct', 0, 0, -1), ('particle_struct.Particle', 0, 0, -1)] binaries=[] datas=[]>
lepton.texturizer: None -> <PyModule 'lepton.texturizer' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/texturizer.pyc imports=[('ctypes', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.gl', 1, 0, -1), ('_texturizer', 0, 0, -1), ('math', 0, 0, -1)] binaries=[] datas=[]>
ui: None -> <PyModule 'ui' /media/ssd/fredspipa/src/peace-tw/deploy/src/ui.pyc imports=[('pyglet.text', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('copy', 0, 0, -1), ('pyglet.sprite', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('functions', 0, 0, -1), ('functions.*', 0, 0, -1), ('pyglet.graphics', 0, 0, -1), ('pyglet.sprite.Sprite', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet: None -> <PkgModule 'pyglet' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/__init__.pyc imports=[('canvas', 0, 1, -1), ('text', 0, 1, -1), ('os', 0, 0, -1), ('platform', 1, 1, -1), ('ctypes', 0, 1, -1), ('app', 0, 1, -1), ('window', 0, 1, -1), ('resource', 0, 1, -1), ('sys', 0, 0, -1), ('media', 0, 1, -1), ('pyglet', 1, 0, -1), ('ctypes', 1, 0, -1), ('input', 0, 1, -1), ('clock', 0, 1, -1), ('struct', 1, 0, -1), ('com', 0, 1, -1), ('gl', 0, 1, -1), ('lib', 0, 1, -1), ('event', 0, 1, -1), ('pyglet.lib', 1, 0, -1), ('graphics', 0, 1, -1), ('image', 0, 1, -1), ('font', 0, 1, -1), ('sprite', 0, 1, -1)] binaries=[] datas=[]>
pyglet.window: None -> <PkgModule 'pyglet.window' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/__init__.pyc imports=[('pyglet.window.carbon.CarbonWindow', 0, 1, -1), ('pyglet.text.Label', 1, 0, -1), ('pyglet.window.xlib.XlibWindow', 0, 1, -1), ('sys', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.window.win32', 0, 1, -1), ('pyglet.window.cocoa', 0, 1, -1), ('pprint', 0, 0, -1), ('pyglet.window.xlib', 0, 1, -1), ('pyglet.event.EventDispatcher', 0, 0, -1), ('pyglet.gl.gl_info', 0, 0, -1), ('pyglet.window.carbon', 0, 1, -1), ('pyglet.text', 1, 0, -1), ('pyglet.window.win32.Win32Window', 0, 1, -1), ('pyglet.event', 0, 0, -1), ('time.time', 1, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('pyglet.window.event', 0, 0, -1), ('time', 1, 0, -1), ('pyglet.app', 1, 0, -1), ('pyglet.window.cocoa.CocoaWindow', 0, 1, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
animation: None -> <PyModule 'animation' /media/ssd/fredspipa/src/peace-tw/deploy/src/animation.pyc imports=[('pyglet.sprite', 0, 0, -1), ('pyglet.sprite.Sprite', 0, 0, -1)] binaries=[] datas=[]>
mob: None -> <PyModule 'mob' /media/ssd/fredspipa/src/peace-tw/deploy/src/mob.pyc imports=[('animation', 0, 0, -1), ('pyglet.sprite', 0, 0, -1), ('functions', 0, 0, -1), ('random', 0, 0, -1), ('functions.*', 0, 0, -1), ('pyglet.sprite.Sprite', 0, 0, -1)] binaries=[] datas=[]>
particles: None -> <PyModule 'particles' /media/ssd/fredspipa/src/peace-tw/deploy/src/particles.pyc imports=[('lepton.texturizer.SpriteTexturizer', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('lepton.controller.Growth', 0, 0, -1), ('lepton', 0, 0, -1), ('lepton.renderer.PointRenderer', 0, 0, -1), ('lepton.controller.ColorBlender', 0, 0, -1), ('lepton.ParticleGroup', 0, 0, -1), ('lepton.emitter', 0, 0, -1), ('lepton.controller.Lifetime', 0, 0, -1), ('lepton.controller', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('lepton.emitter.StaticEmitter', 0, 0, -1), ('lepton.texturizer', 0, 0, -1), ('functions', 0, 0, -1), ('lepton.controller.Movement', 0, 0, -1), ('functions.*', 0, 0, -1), ('lepton.Particle', 0, 0, -1), ('lepton.renderer', 0, 0, -1), ('lepton.default_system', 0, 0, -1), ('lepton.controller.Fader', 0, 0, -1), ('lepton.controller.Gravity', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl: None -> <PkgModule 'pyglet.gl' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/__init__.pyc imports=[('xlib', 0, 1, -1), ('pyglet.gl.gl.*', 0, 0, -1), ('carbon.CarbonConfig', 0, 1, -1), ('pyglet.gl', 0, 0, -1), ('cocoa', 0, 1, -1), ('sys', 0, 0, -1), ('pyglet', 1, 0, -1), ('base', 0, 1, -1), ('pyglet.gl.gl', 0, 0, -1), ('base.CanvasConfig', 0, 0, -1), ('pyglet.window', 0, 1, -1), ('pyglet.gl.glu.*', 0, 0, -1), ('base.ObjectSpace', 0, 0, -1), ('pyglet.gl.gl_info', 0, 0, -1), ('cocoa.CocoaConfig', 0, 1, -1), ('pyglet.compat_platform', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.glext_arb', 0, 0, -1), ('pyglet.gl.lib.GLException', 0, 0, -1), ('pyglet.window', 1, 0, -1), ('carbon', 0, 1, -1), ('base', 0, 0, -1), ('pyglet.gl.glext_arb.*', 0, 0, -1), ('pyglet.window.Window', 1, 0, -1), ('pyglet.app', 1, 0, -1), ('base.Config', 0, 1, -1), ('win32.Win32Config', 0, 1, -1), ('pyglet.gl.glu', 0, 0, -1), ('base.Context', 0, 0, -1), ('win32', 0, 1, -1), ('xlib.XlibConfig', 0, 1, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
lepton.emitter: None -> <ExtensionModule 'lepton.emitter' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/emitter.so imports=[] binaries=[] datas=[]>
game: None -> <PyModule 'game' /media/ssd/fredspipa/src/peace-tw/deploy/src/game.pyc imports=[('grid', 0, 0, -1), ('tiles.*', 0, 0, -1), ('mob', 0, 0, -1), ('tiles', 0, 0, -1), ('functions', 0, 0, -1), ('mob.*', 0, 0, -1), ('functions.*', 0, 0, -1), ('pyglet', 0, 0, -1), ('grid.*', 0, 0, -1)] binaries=[] datas=[]>
lepton.Particle: None -> None
  DEL lepton.Particle
lepton.renderer: None -> <ExtensionModule 'lepton.renderer' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/renderer.so imports=[] binaries=[] datas=[]>
tower: None -> <PyModule 'tower' /media/ssd/fredspipa/src/peace-tw/deploy/src/tower.pyc imports=[('animation', 0, 0, -1), ('lepton', 0, 0, -1), ('pyglet.sprite', 0, 0, -1), ('functions', 0, 0, -1), ('lepton.Particle', 0, 0, -1), ('random', 0, 0, -1), ('functions.*', 0, 0, -1), ('pyglet.sprite.Sprite', 0, 0, -1)] binaries=[] datas=[]>
functions: None -> <PyModule 'functions' /media/ssd/fredspipa/src/peace-tw/deploy/src/functions.pyc imports=[('random', 0, 0, -1), ('math', 0, 0, -1)] binaries=[] datas=[]>
lepton.controller: None -> <PyModule 'lepton.controller' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/controller.pyc imports=[('_controller.Drag', 0, 0, -1), ('_controller.Bounce', 0, 0, -1), ('_controller.Growth', 0, 0, -1), ('_controller.Collector', 0, 0, -1), ('math', 0, 0, -1), ('_controller.Movement', 0, 0, -1), ('_controller.Lifetime', 0, 0, -1), ('_controller.Magnet', 0, 0, -1), ('particle_struct.Color', 0, 0, -1), ('particle_struct.Vec3', 0, 0, -1), ('_controller.ColorBlender', 0, 0, -1), ('math.sqrt', 0, 0, -1), ('_controller.Gravity', 0, 0, -1), ('_controller.Fader', 0, 0, -1), ('_controller', 0, 0, -1), ('particle_struct', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
lepton.ParticleGroup: None -> None
  DEL lepton.ParticleGroup
pypf: None -> <PyModule 'pypf' /media/ssd/fredspipa/src/peace-tw/deploy/src/pypf.pyc imports=[] binaries=[] datas=[]>
pyglet.window.mouse: None -> <PyModule 'pyglet.window.mouse' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/mouse.pyc imports=[] binaries=[] datas=[]>
pyglet.window.key: None -> <PyModule 'pyglet.window.key' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/key.pyc imports=[('pyglet.compat_platform', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
lepton.default_system: None -> None
  DEL lepton.default_system
lepton.group: None -> <ExtensionModule 'lepton.group' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/group.so imports=[] binaries=[] datas=[]>
lepton.system: None -> <PyModule 'lepton.system' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/system.pyc imports=[] binaries=[] datas=[]>
lepton.particle_struct: None -> <PyModule 'lepton.particle_struct' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/particle_struct.pyc imports=[('math.sqrt', 0, 0, -1), ('ctypes', 0, 0, -1), ('math', 0, 0, -1)] binaries=[] datas=[]>
lepton.math: None -> None
lepton.ctypes: None -> None
ctypes: None -> <PkgModule 'ctypes' /usr/lib/python2.7/ctypes/__init__.pyc imports=[('_ctypes.set_errno', 0, 0, -1), ('_ctypes._cast_addr', 0, 0, -1), ('_ctypes.FUNCFLAG_USE_ERRNO', 0, 0, -1), ('_ctypes._memmove_addr', 0, 0, -1), ('os', 0, 0, -1), ('struct', 0, 0, -1), ('_ctypes.get_last_error', 0, 1, -1), ('ctypes._endian.BigEndianStructure', 0, 0, -1), ('_ctypes._memset_addr', 0, 0, -1), ('_ctypes._wstring_at_addr', 0, 0, -1), ('_ctypes.set_conversion_mode', 0, 0, -1), ('_ctypes.alignment', 0, 0, -1), ('sys', 0, 0, -1), ('_ctypes.Structure', 0, 0, -1), ('_ctypes._string_at_addr', 0, 0, -1), ('_ctypes._SimpleCData', 0, 1, -1), ('_ctypes.FUNCFLAG_USE_LASTERROR', 0, 0, -1), ('_ctypes.CFuncPtr', 0, 0, -1), ('_ctypes.Union', 0, 0, -1), ('struct.calcsize', 1, 0, -1), ('_ctypes', 0, 0, -1), ('_ctypes.ArgumentError', 0, 0, -1), ('_ctypes.dlopen', 0, 1, -1), ('struct', 1, 0, -1), ('_ctypes.RTLD_GLOBAL', 0, 0, -1), ('_ctypes.LoadLibrary', 0, 1, -1), ('_ctypes.get_errno', 0, 0, -1), ('_ctypes.resize', 0, 0, -1), ('_ctypes.POINTER', 0, 0, -1), ('_ctypes.set_last_error', 0, 1, -1), ('_ctypes.FUNCFLAG_CDECL', 0, 0, -1), ('_ctypes.FormatError', 0, 1, -1), ('_ctypes.pointer', 0, 0, -1), ('_ctypes.RTLD_LOCAL', 0, 0, -1), ('_ctypes._pointer_type_cache', 0, 0, -1), ('_ctypes._check_HRESULT', 0, 1, -1), ('_ctypes._SimpleCData', 0, 0, -1), ('struct.calcsize', 0, 0, -1), ('ctypes._endian.LittleEndianStructure', 0, 0, -1), ('_ctypes.FUNCFLAG_PYTHONAPI', 0, 0, -1), ('_ctypes.FUNCFLAG_STDCALL', 0, 1, -1), ('_ctypes', 0, 1, -1), ('ctypes._endian', 0, 0, -1), ('_ctypes.sizeof', 0, 0, -1), ('_ctypes.addressof', 0, 0, -1), ('_ctypes.__version__', 0, 0, -1), ('_ctypes._Pointer', 0, 0, -1), ('_ctypes.byref', 0, 0, -1), ('_ctypes.Array', 0, 0, -1)] binaries=[] datas=[]>
ctypes._ctypes: None -> None
_ctypes: None -> <ExtensionModule '_ctypes' /usr/lib/python2.7/lib-dynload/_ctypes.so imports=[] binaries=[] datas=[]>
ctypes.os: None -> None
ctypes.struct: None -> None
ctypes.ctypes: None -> None
ctypes._endian: None -> <PyModule 'ctypes._endian' /usr/lib/python2.7/ctypes/_endian.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
ctypes.sys: None -> None
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
msvcrt: None -> None
  DEL msvcrt
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
org: None -> None
  DEL org
org: None -> None
  DEL org
_sha256: None -> None
  DEL _sha256
_sha512: None -> None
  DEL _sha512
_sha: None -> None
  DEL _sha
_md5: None -> None
  DEL _md5
org: None -> None
  DEL org
org: None -> None
  DEL org
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
lepton.pyglet: None -> None
lepton._texturizer: None -> <ExtensionModule 'lepton._texturizer' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/_texturizer.so imports=[] binaries=[] datas=[]>
pyglet.canvas: None -> <PkgModule 'pyglet.canvas' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/canvas/__init__.pyc imports=[('pyglet.canvas.base', 0, 1, -1), ('pyglet.canvas.xlib.XlibDisplay', 0, 1, -1), ('pyglet.compat_platform', 0, 1, -1), ('pyglet.canvas.cocoa.CocoaScreen', 0, 1, -1), ('pyglet.canvas.base.Screen', 0, 1, -1), ('pyglet.canvas.base.ScreenMode', 0, 1, -1), ('pyglet.canvas.carbon.CarbonCanvas', 0, 1, -1), ('pyglet.canvas.xlib.XlibScreen', 0, 1, -1), ('sys', 0, 0, -1), ('pyglet.canvas.win32', 0, 1, -1), ('pyglet.canvas.base.Canvas', 0, 1, -1), ('pyglet.canvas.carbon.CarbonScreen', 0, 1, -1), ('pyglet.canvas.cocoa.CocoaCanvas', 0, 1, -1), ('pyglet.canvas.xlib', 0, 1, -1), ('pyglet.app.displays', 1, 0, -1), ('pyglet.canvas.win32.Win32Display', 0, 1, -1), ('pyglet', 0, 1, -1), ('pyglet.canvas.xlib.XlibCanvas', 0, 1, -1), ('pyglet.options', 0, 1, -1), ('pyglet.canvas.win32.Win32Canvas', 0, 1, -1), ('pyglet.canvas.cocoa.CocoaDisplay', 0, 1, -1), ('pyglet.canvas.win32.Win32Screen', 0, 1, -1), ('pyglet.app', 1, 0, -1), ('pyglet.canvas.carbon', 0, 1, -1), ('pyglet.canvas.carbon.CarbonDisplay', 0, 1, -1), ('pyglet.canvas.cocoa', 0, 1, -1), ('pyglet.canvas.base.Display', 0, 1, -1)] binaries=[] datas=[]>
pyglet.text: None -> <PkgModule 'pyglet.text' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/__init__.pyc imports=[('pyglet.text.caret', 0, 0, -1), ('pyglet.text', 0, 0, -1), ('pyglet.text.formats.plaintext', 1, 1, -1), ('pyglet.text.layout', 0, 0, -1), ('os.path', 0, 0, -1), ('pyglet.text.formats.attributed', 1, 1, -1), ('pyglet.text.document', 0, 0, -1), ('pyglet.text.formats', 1, 1, -1), ('pyglet.text.formats.html', 1, 1, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.os: None -> None
pyglet.platform: None -> None
platform: None -> <PyModule 'platform' /usr/lib/python2.7/platform.pyc imports=[('subprocess', 1, 0, -1), ('gestalt.gestalt', 1, 0, -1), ('java.lang', 1, 0, -1), ('MacOS', 1, 0, -1), ('os', 0, 0, -1), ('win32api.GetVersionEx', 1, 0, -1), ('win32con.HKEY_LOCAL_MACHINE', 1, 0, -1), ('gestalt', 1, 0, -1), ('java.lang.System', 1, 0, -1), ('sys', 0, 0, -1), ('string', 0, 0, -1), ('plistlib', 1, 0, -1), ('win32con.VER_PLATFORM_WIN32_NT', 1, 0, -1), ('_winreg', 1, 1, -1), ('win32api.RegOpenKeyEx', 1, 0, -1), ('vms_lib', 1, 1, -1), ('tempfile', 1, 0, -1), ('win32api.RegCloseKey', 1, 0, -1), ('re', 0, 0, -1), ('win32con.VER_PLATFORM_WIN32_WINDOWS', 1, 0, -1), ('win32con', 1, 0, -1), ('win32pipe', 1, 1, -1), ('struct', 1, 1, -1), ('win32api', 1, 0, -1), ('socket', 1, 0, -1), ('win32con.VER_NT_WORKSTATION', 1, 0, -1), ('win32api.RegQueryValueEx', 1, 0, -1)] binaries=[] datas=[]>
pyglet.ctypes: None -> None
pyglet.app: None -> <PkgModule 'pyglet.app' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/app/__init__.pyc imports=[('pyglet.app.cocoa.CocoaEventLoop', 0, 1, -1), ('pyglet.compat_platform', 0, 0, -1), ('sys', 0, 0, -1), ('weakref', 0, 0, -1), ('pyglet.app.win32.Win32EventLoop', 0, 1, -1), ('pyglet.app.xlib', 0, 1, -1), ('pyglet', 0, 1, -1), ('pyglet.app.carbon', 0, 1, -1), ('pyglet.app.base.EventLoop', 0, 0, -1), ('pyglet.app.base.PlatformEventLoop', 0, 1, -1), ('pyglet.app.base', 0, 1, -1), ('pyglet.app.xlib.XlibEventLoop', 0, 1, -1), ('pyglet.app.win32', 0, 1, -1), ('pyglet.options', 0, 1, -1), ('pyglet.app.carbon.CarbonEventLoop', 0, 1, -1), ('pyglet.app.cocoa', 0, 1, -1), ('pyglet', 0, 0, -1), ('pyglet.app.base', 0, 0, -1)] binaries=[] datas=[]>
pyglet.resource: None -> <PyModule 'pyglet.resource' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/resource.pyc imports=[('urllib2', 1, 0, -1), ('weakref', 0, 0, -1), ('pyglet.font', 1, 0, -1), ('os', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.compat.BytesIO', 0, 0, -1), ('pyglet.media', 1, 0, -1), ('urlparse', 1, 0, -1), ('zipfile', 0, 0, -1), ('pyglet.compat', 0, 0, -1), ('pyglet', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
pyglet.sys: None -> None
pyglet.media: None -> <PkgModule 'pyglet.media' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/__init__.pyc imports=[('drivers.openal', 1, 1, -1), ('pyglet.image.AnimationFrame', 1, 0, -1), ('warnings', 0, 0, -1), ('avbin', 0, 0, -1), ('drivers.silent', 1, 1, -1), ('threading', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.compat.BytesIO', 0, 0, -1), ('riff', 1, 0, -1), ('drivers.pulse', 1, 1, -1), ('heapq', 0, 0, -1), ('time', 0, 0, -1), ('drivers.directsound', 1, 1, -1), ('atexit', 0, 0, -1), ('pyglet.image', 1, 0, -1), ('pyglet.compat', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.compat.bytes_type', 0, 0, -1), ('avbin', 1, 0, -1), ('pyglet.image.Animation', 1, 0, -1), ('drivers', 1, 1, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.pyglet: None -> None
pyglet.input: None -> <PkgModule 'pyglet.input' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/__init__.pyc imports=[('darwin_hid.get_apple_remote', 0, 1, -1), ('carbon_hid.get_devices', 0, 1, -1), ('base.Tablet', 0, 0, -1), ('directinput', 0, 1, -1), ('base.Control', 0, 0, -1), ('carbon_tablet.get_tablets', 0, 1, -1), ('carbon_hid', 0, 1, -1), ('base.DeviceExclusiveException', 0, 0, -1), ('base.Joystick', 0, 0, -1), ('directinput.get_devices', 0, 1, -1), ('sys', 0, 0, -1), ('x11_xinput', 0, 1, -1), ('carbon_tablet', 0, 1, -1), ('directinput.get_joysticks', 0, 1, -1), ('wintab', 0, 1, -1), ('base.DeviceOpenException', 0, 0, -1), ('base.AbsoluteAxis', 0, 0, -1), ('pyglet.compat_platform', 0, 1, -1), ('darwin_hid.get_devices', 0, 1, -1), ('evdev.get_devices', 0, 1, -1), ('wintab.get_tablets', 0, 1, -1), ('base.Button', 0, 0, -1), ('pyglet', 0, 1, -1), ('base.AppleRemote', 0, 0, -1), ('base.RelativeAxis', 0, 0, -1), ('carbon_hid.get_apple_remote', 0, 1, -1), ('carbon_hid.get_joysticks', 0, 1, -1), ('pyglet.options', 0, 1, -1), ('base.DeviceException', 0, 0, -1), ('darwin_hid', 0, 1, -1), ('evdev', 0, 1, -1), ('base', 0, 0, -1), ('evdev.get_joysticks', 0, 1, -1), ('x11_xinput_tablet.get_tablets', 0, 1, -1), ('base.Device', 0, 0, -1), ('x11_xinput_tablet', 0, 1, -1), ('darwin_hid.get_joysticks', 0, 1, -1), ('x11_xinput.get_devices', 0, 1, -1)] binaries=[] datas=[]>
pyglet.clock: None -> <PyModule 'pyglet.clock' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/clock.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.compat_platform', 0, 0, -1), ('pyglet.font', 1, 0, -1), ('pyglet.lib', 0, 0, -1), ('sys', 1, 0, -1), ('getopt', 1, 0, -1), ('pyglet.font', 1, 1, -1), ('time', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.font.load', 1, 1, -1)] binaries=[] datas=[]>
pyglet.struct: None -> None
pyglet.com: None -> <PyModule 'pyglet.com' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/com.pyc imports=[('ctypes', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
pyglet.lib: None -> <PyModule 'pyglet.lib' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/lib.pyc imports=[('ctypes', 0, 0, -1), ('re', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('ctypes.util', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.event: None -> <PyModule 'pyglet.event' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/event.pyc imports=[('inspect', 0, 0, -1)] binaries=[] datas=[]>
pyglet.graphics: None -> <PkgModule 'pyglet.graphics' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/graphics/__init__.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.graphics.vertexbuffer', 0, 0, -1), ('pyglet.graphics.vertexattribute', 0, 0, -1), ('pyglet.graphics.vertexdomain', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.graphics', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image: None -> <PkgModule 'pyglet.image' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/__init__.pyc imports=[('pyglet.window', 0, 0, -1), ('warnings', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('sys', 0, 0, -1), ('math', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.compat.BytesIO', 0, 0, -1), ('__future__.division', 0, 0, -1), ('pyglet.gl.gl_info', 0, 0, -1), ('weakref', 0, 0, -1), ('pyglet.window.*', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1), ('pyglet.image.atlas', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1), ('ctypes', 0, 0, -1), ('re', 0, 0, -1), ('pyglet.compat.bytes_type', 0, 0, -1), ('math.ceil', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.graphics', 0, 0, -1), ('__future__', 0, 0, -1)] binaries=[] datas=[]>
pyglet.font: None -> <PkgModule 'pyglet.font' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/__init__.pyc imports=[('pyglet.gl.*', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.font.carbon.CarbonFont', 0, 1, -1), ('sys', 0, 0, -1), ('math', 0, 0, -1), ('os', 0, 0, -1), ('pyglet.font.win32', 0, 1, -1), ('pyglet.font.quartz', 0, 1, -1), ('pyglet.font.win32.GDIPlusFont', 0, 1, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('pyglet.font.carbon', 0, 1, -1), ('pyglet.font.quartz.QuartzFont', 0, 1, -1), ('pyglet.font.win32.Win32Font', 0, 1, -1), ('pyglet.font.freetype.FreeTypeFont', 0, 1, -1), ('pyglet.font.freetype', 0, 1, -1), ('pyglet', 0, 0, -1), ('weakref', 0, 0, -1)] binaries=[] datas=[]>
pyglet.sprite: None -> <PyModule 'pyglet.sprite' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/sprite.pyc imports=[('pyglet.clock', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('sys', 0, 0, -1), ('math', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.event', 0, 0, -1), ('pyglet.graphics', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.canvas.pyglet: None -> None
pyglet.canvas.base: None -> <PyModule 'pyglet.canvas.base' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/canvas/base.pyc imports=[('pyglet.gl', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.app', 0, 0, -1)] binaries=[] datas=[]>
pyglet.canvas.xlib: None -> <PyModule 'pyglet.canvas.xlib' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/canvas/xlib.pyc imports=[('base', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.libs.x11.xf86vmode', 0, 0, -1), ('pyglet.libs.x11.xinerama', 0, 0, -1), ('base.ScreenMode', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('pyglet.libs.x11', 0, 0, -1), ('xlib_vidmoderestore', 0, 0, -1), ('base.Canvas', 0, 0, -1), ('pyglet.libs.x11.xsync', 0, 0, -1), ('base.Screen', 0, 0, -1), ('base.Display', 0, 0, -1), ('pyglet.app', 0, 0, -1), ('traceback', 1, 1, -1), ('pyglet.app.xlib', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.app.xlib.XlibSelectDevice', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.canvas.cocoa: None -> <PyModule 'pyglet.canvas.cocoa' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/canvas/cocoa.pyc imports=[('base', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1), ('base.ScreenMode', 0, 0, -1), ('ctypes.util', 0, 0, -1), ('base.Canvas', 0, 0, -1), ('base.Display', 0, 0, -1), ('pyglet.app', 0, 0, -1), ('base.Screen', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.canvas.carbon: None -> <PyModule 'pyglet.canvas.carbon' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/canvas/carbon.pyc imports=[('base', 0, 0, -1), ('MacOS', 1, 0, -1), ('base.ScreenMode', 0, 0, -1), ('pyglet.libs.darwin.*', 0, 0, -1), ('pyglet.libs.darwin', 0, 0, -1), ('base.Canvas', 0, 0, -1), ('base.Display', 0, 0, -1), ('pyglet.libs.darwin._oscheck', 0, 0, -1), ('pyglet.app', 0, 0, -1), ('base.Screen', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.canvas.sys: None -> None
pyglet.canvas.win32: None -> <PyModule 'pyglet.canvas.win32' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/canvas/win32.pyc imports=[('base', 0, 0, -1), ('pyglet.libs.win32.constants', 0, 0, -1), ('pyglet.libs.win32.types', 0, 0, -1), ('base.ScreenMode', 0, 0, -1), ('base.Canvas', 0, 0, -1), ('pyglet.libs.win32', 0, 0, -1), ('base.Display', 0, 0, -1), ('pyglet.libs.win32.types.*', 0, 0, -1), ('base.Screen', 0, 0, -1), ('pyglet.libs.win32._user32', 0, 0, -1), ('pyglet.libs.win32.constants.*', 0, 0, -1), ('pyglet.libs.win32._kernel32', 0, 0, -1)] binaries=[] datas=[]>
pyglet.app.displays: None -> None
  DEL pyglet.app.displays
pyglet.options: None -> None
  DEL pyglet.options
pyglet.gl.xlib: None -> <PyModule 'pyglet.gl.xlib' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/xlib.pyc imports=[('base', 0, 0, -1), ('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.canvas.xlib', 0, 0, -1), ('pyglet.canvas.xlib.XlibCanvas', 0, 0, -1), ('pyglet.gl.glx_info', 0, 0, -1), ('pyglet.gl.glx', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('base.CanvasConfig', 0, 0, -1), ('pyglet.gl.glxext_arb', 0, 0, -1), ('base.Context', 0, 0, -1), ('base.Config', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.gl.glxext_mesa', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.pyglet: None -> None
pyglet.gl.gl: None -> <PyModule 'pyglet.gl.gl' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/gl.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.gl.lib.c_ptrdiff_t', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.link_GL', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.carbon: None -> <PyModule 'pyglet.gl.carbon' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/carbon.pyc imports=[('base', 0, 0, -1), ('pyglet.canvas.carbon.CarbonFullScreenCanvas', 0, 0, -1), ('pyglet.canvas.carbon', 0, 0, -1), ('pyglet.gl.agl', 0, 0, -1), ('base.Context', 0, 0, -1), ('pyglet.gl.ContextException', 0, 0, -1), ('pyglet.libs.darwin', 0, 0, -1), ('pyglet.gl.gl', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('base.CanvasConfig', 0, 0, -1), ('pyglet.libs.darwin._oscheck', 0, 0, -1), ('pyglet.libs.darwin.*', 0, 0, -1), ('base.Config', 0, 0, -1), ('pyglet.canvas.carbon.CarbonCanvas', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.cocoa: None -> <PyModule 'pyglet.gl.cocoa' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/cocoa.pyc imports=[('pyglet.canvas.cocoa', 0, 0, -1), ('pyglet.canvas.cocoa.CocoaCanvas', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet.gl.agl', 0, 0, -1), ('pyglet.gl.base.CanvasConfig', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1), ('pyglet.gl.ContextException', 0, 0, -1), ('pyglet.gl.gl', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.gl.base.Config', 0, 0, -1), ('pyglet.gl.base.Context', 0, 0, -1), ('pyglet.gl.base', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.sys: None -> None
pyglet.gl.base: None -> <PyModule 'pyglet.gl.base' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/base.pyc imports=[('pyglet.gl.gl_info', 0, 0, -1), ('pyglet.compat_platform', 0, 0, -1), ('pprint', 1, 0, -1), ('pyglet.gl.glu_info', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.glu: None -> <PyModule 'pyglet.gl.glu' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/glu.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.gl.lib.c_ptrdiff_t', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.link_GLU', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.gl_info: None -> <PyModule 'pyglet.gl.gl_info' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/gl_info.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.compat.asstr', 0, 0, -1), ('pyglet.gl.glext_arb.GL_NUM_EXTENSIONS', 1, 1, -1), ('pyglet.gl.gl.*', 0, 0, -1), ('warnings', 0, 0, -1), ('pyglet.gl.gl', 0, 0, -1), ('pyglet.gl.glext_arb', 1, 1, -1), ('pyglet.gl.glext_arb.glGetStringi', 1, 1, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.gl.lib: None -> <PyModule 'pyglet.gl.lib' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/lib.pyc imports=[('pyglet.gl.lib_agl.link_GLU', 0, 1, -1), ('ctypes', 0, 0, -1), ('pyglet.gl.lib_glx.link_GLU', 0, 1, -1), ('pyglet.gl.lib_glx.link_GLX', 0, 1, -1), ('pyglet.gl.lib_glx', 0, 1, -1), ('pyglet.gl.lib_wgl.link_GLU', 0, 1, -1), ('pyglet', 1, 0, -1), ('pyglet.gl.lib_agl', 0, 1, -1), ('pyglet.gl.lib_wgl.link_WGL', 0, 1, -1), ('pyglet.gl.lib_wgl', 0, 1, -1), ('pyglet.gl.lib_agl.link_AGL', 0, 1, -1), ('pyglet.gl.lib_agl.link_GL', 0, 1, -1), ('pyglet.gl.lib_glx.link_GL', 0, 1, -1), ('pyglet.gl', 1, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.gl.lib_wgl.link_GL', 0, 1, -1)] binaries=[] datas=[]>
pyglet.gl.glext_arb: None -> <PyModule 'pyglet.gl.glext_arb' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/glext_arb.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.gl.lib.c_ptrdiff_t', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.link_GL', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.Window: None -> None
  DEL pyglet.window.Window
pyglet.gl.win32: None -> <PyModule 'pyglet.gl.win32' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/win32.pyc imports=[('base', 0, 0, -1), ('pyglet.gl.wglext_arb', 0, 0, -1), ('pyglet.gl.gl_info', 0, 0, -1), ('pyglet.libs.win32.constants', 0, 0, -1), ('pyglet.canvas.win32.Win32Canvas', 0, 0, -1), ('base.Context', 0, 0, -1), ('pyglet.gl.wgl', 0, 0, -1), ('pyglet.libs.win32.types', 0, 0, -1), ('pyglet.libs.win32._gdi32', 0, 0, -1), ('pyglet.libs.win32._kernel32', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('base.CanvasConfig', 0, 0, -1), ('pyglet.libs.win32', 0, 0, -1), ('pyglet.gl.wgl_info', 0, 0, -1), ('pyglet.libs.win32.types.*', 0, 0, -1), ('base.Config', 0, 0, -1), ('pyglet.canvas.win32', 0, 0, -1), ('pyglet.libs.win32.constants.*', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.libs.win32._user32', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.ctypes: None -> None
pyglet.gl.glx_info: None -> <PyModule 'pyglet.gl.glx_info' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/glx_info.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.compat.asstr', 0, 0, -1), ('pyglet.gl.glx.*', 0, 0, -1), ('pyglet.gl.glx', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.glx: None -> <PyModule 'pyglet.gl.glx' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/glx.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.lib.link_GLX', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('pyglet.gl.lib.c_ptrdiff_t', 0, 0, -1), ('pyglet.gl.lib.c_void', 0, 0, -1), ('ctypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.glxext_arb: None -> <PyModule 'pyglet.gl.glxext_arb' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/glxext_arb.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.lib.link_GLX', 0, 0, -1), ('pyglet.gl.glx', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('pyglet.gl.lib.c_ptrdiff_t', 0, 0, -1), ('ctypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.glxext_mesa: None -> <PyModule 'pyglet.gl.glxext_mesa' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/glxext_mesa.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.link_GLX', 0, 0, -1)] binaries=[] datas=[]>
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.gl.pprint: None -> None
pyglet.gl.glu_info: None -> <PyModule 'pyglet.gl.glu_info' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/glu_info.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.compat.asstr', 0, 0, -1), ('warnings', 0, 0, -1), ('pyglet.gl.glu', 0, 0, -1), ('pyglet.gl.glu.*', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.compat: None -> <PyModule 'pyglet.compat' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/compat.pyc imports=[('StringIO', 0, 1, -1), ('io', 0, 1, -1), ('itertools', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.warnings: None -> None
pyglet.StringIO: None -> None
pyglet.io: None -> None
pyglet.itertools: None -> None
pyglet.gl.lib_agl: None -> <PyModule 'pyglet.gl.lib_agl' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/lib_agl.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.lib.missing_function', 0, 0, -1), ('pyglet.lib', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.decorate_function', 0, 0, -1), ('ctypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.lib_glx: None -> <PyModule 'pyglet.gl.lib_glx' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/lib_glx.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.lib.missing_function', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.lib', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.decorate_function', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.lib_wgl: None -> <PyModule 'pyglet.gl.lib_wgl' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/lib_wgl.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.gl_info', 1, 1, -1), ('pyglet.gl', 1, 0, -1), ('pyglet.gl.lib.missing_function', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.lib._TraceLibrary', 0, 1, -1), ('pyglet.gl', 1, 1, -1), ('pyglet.gl.lib.decorate_function', 0, 0, -1), ('pyglet.gl.current_context', 1, 0, -1), ('pyglet.lib', 0, 1, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.re: None -> None
ctypes.util: None -> <PyModule 'ctypes.util' /usr/lib/python2.7/ctypes/util.pyc imports=[('struct', 1, 0, -1), ('sys', 0, 0, -1), ('errno', 0, 1, -1), ('os', 0, 0, -1), ('ctypes.macholib.dyld', 0, 1, -1), ('re', 0, 1, -1), ('tempfile', 0, 1, -1), ('ctypes.macholib.dyld.dyld_find', 0, 1, -1), ('ctypes', 1, 0, -1), ('imp', 1, 0, -1), ('ctypes.cdll', 1, 0, -1)] binaries=[] datas=[]>
ctypes.errno: None -> None
ctypes.macholib: None -> <PkgModule 'ctypes.macholib' /usr/lib/python2.7/ctypes/macholib/__init__.pyc imports=[] binaries=[] datas=[]>
ctypes.macholib.dyld: None -> <PyModule 'ctypes.macholib.dyld' /usr/lib/python2.7/ctypes/macholib/dyld.pyc imports=[('framework', 0, 0, -1), ('itertools', 0, 0, -1), ('dylib.dylib_info', 0, 0, -1), ('os', 0, 0, -1), ('itertools.*', 0, 0, -1), ('dylib', 0, 0, -1), ('framework.framework_info', 0, 0, -1)] binaries=[] datas=[]>
ctypes.re: None -> None
ctypes.tempfile: None -> None
ctypes.imp: None -> None
ctypes.cdll: None -> None
  DEL ctypes.cdll
ctypes.macholib.framework: None -> <PyModule 'ctypes.macholib.framework' /usr/lib/python2.7/ctypes/macholib/framework.pyc imports=[('re', 0, 0, -1)] binaries=[] datas=[]>
ctypes.macholib.itertools: None -> None
ctypes.macholib.dylib: None -> <PyModule 'ctypes.macholib.dylib' /usr/lib/python2.7/ctypes/macholib/dylib.pyc imports=[('re', 0, 0, -1)] binaries=[] datas=[]>
ctypes.macholib.os: None -> None
ctypes.macholib.re: None -> None
pyglet.gl.current_context: None -> None
  DEL pyglet.gl.current_context
pyglet.canvas.ctypes: None -> None
pyglet.libs: None -> <PkgModule 'pyglet.libs' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/__init__.pyc imports=[] binaries=[] datas=[]>
pyglet.libs.x11: None -> <PkgModule 'pyglet.libs.x11' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/x11/__init__.pyc imports=[] binaries=[] datas=[]>
pyglet.libs.x11.xf86vmode: None -> <PyModule 'pyglet.libs.x11.xf86vmode' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/x11/xf86vmode.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.x11.xinerama: None -> <PyModule 'pyglet.libs.x11.xinerama' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/x11/xinerama.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.x11.xlib: None -> <PyModule 'pyglet.libs.x11.xlib' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/x11/xlib.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.canvas.xlib_vidmoderestore: None -> <PyModule 'pyglet.canvas.xlib_vidmoderestore' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/canvas/xlib_vidmoderestore.pyc imports=[('ctypes', 0, 0, -1), ('threading', 0, 0, -1), ('pyglet.libs.x11.xf86vmode', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('os', 0, 0, -1), ('pyglet.libs.x11', 0, 0, -1), ('struct', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('signal', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.x11.xsync: None -> <PyModule 'pyglet.libs.x11.xsync' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/x11/xsync.pyc imports=[('ctypes', 0, 0, -1), ('xlib', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.canvas.traceback: None -> None
pyglet.app.xlib: None -> <PyModule 'pyglet.app.xlib' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/app/xlib.pyc imports=[('pyglet.app.base.PlatformEventLoop', 0, 0, -1), ('ctypes', 0, 0, -1), ('threading', 0, 0, -1), ('select', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('os', 0, 0, -1), ('pyglet.app', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.app.base', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.x11.ctypes: None -> None
pyglet.libs.x11.pyglet: None -> None
pyglet.canvas.threading: None -> None
pyglet.canvas.os: None -> None
pyglet.canvas.struct: None -> None
pyglet.canvas.signal: None -> None
pyglet.app.pyglet: None -> None
pyglet.app.cocoa: None -> <PyModule 'pyglet.app.cocoa' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/app/cocoa.pyc imports=[('pyglet.app.base.PlatformEventLoop', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet.app.base', 0, 0, -1)] binaries=[] datas=[]>
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.app.sys: None -> None
pyglet.app.weakref: None -> None
pyglet.app.win32: None -> <PyModule 'pyglet.app.win32' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/app/win32.pyc imports=[('base', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.libs.win32._user32', 0, 0, -1), ('pyglet.libs.win32.constants', 0, 0, -1), ('pyglet.libs.win32.types', 0, 0, -1), ('pyglet.libs.win32', 0, 0, -1), ('pyglet.app', 0, 0, -1), ('pyglet.libs.win32.types.*', 0, 0, -1), ('pyglet.libs.win32._kernel32', 0, 0, -1), ('pyglet.libs.win32.constants.*', 0, 0, -1), ('pyglet', 0, 0, -1), ('base.PlatformEventLoop', 0, 0, -1)] binaries=[] datas=[]>
pyglet.app.carbon: None -> <PyModule 'pyglet.app.carbon' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/app/carbon.pyc imports=[('pyglet.app.base.PlatformEventLoop', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.libs.darwin.*', 0, 0, -1), ('pyglet.libs.darwin', 0, 0, -1), ('pyglet.app', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.app.base', 0, 0, -1)] binaries=[] datas=[]>
pyglet.app.base: None -> <PyModule 'pyglet.app.base' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/app/base.pyc imports=[('pyglet.clock', 0, 0, -1), ('threading', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.window.Window', 1, 0, -1), ('pyglet.window', 1, 0, -1), ('pyglet.app', 0, 0, -1), ('pyglet.event', 0, 0, -1), ('pyglet', 0, 0, -1), ('Queue', 0, 0, -1)] binaries=[] datas=[]>
pyglet.options: None -> None
  DEL pyglet.options
pyglet.libs.darwin: None -> <PkgModule 'pyglet.libs.darwin' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/darwin/__init__.pyc imports=[('constants.*', 0, 1, -1), ('cocoapy.*', 0, 1, -1), ('cocoapy', 0, 1, -1), ('types.*', 0, 1, -1), ('types', 0, 1, -1), ('constants', 0, 1, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.darwin.cocoapy: None -> <PkgModule 'pyglet.libs.darwin.cocoapy' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/darwin/cocoapy/__init__.pyc imports=[('runtime.ObjCInstance', 0, 0, 1), ('cocoalibs', 0, 0, 1), ('cocoalibs.*', 0, 0, 1), ('runtime.ObjCClass', 0, 0, 1), ('runtime.get_selector', 0, 0, 1), ('runtime.send_super', 0, 0, 1), ('runtime.send_message', 0, 0, 1), ('runtime', 0, 0, 1), ('cocoatypes', 0, 0, 1), ('runtime.ObjCSubclass', 0, 0, 1), ('cocoatypes.*', 0, 0, 1), ('runtime.objc', 0, 0, 1)] binaries=[] datas=[]>
pyglet.app.threading: None -> None
pyglet.window.Window: None -> None
  DEL pyglet.window.Window
pyglet.app.Queue: None -> None
Queue: None -> <PyModule 'Queue' /usr/lib/python2.7/Queue.pyc imports=[('collections', 0, 0, -1), ('threading', 0, 0, -1), ('collections.deque', 0, 0, -1), ('time.time', 0, 0, -1), ('heapq', 0, 0, -1), ('dummy_threading', 0, 1, -1), ('time', 0, 0, -1)] binaries=[] datas=[]>
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.getopt: None -> None
pyglet.time: None -> None
pyglet.font.load: None -> None
  DEL pyglet.font.load
pyglet.font.pyglet: None -> None
pyglet.font.carbon: None -> <PyModule 'pyglet.font.carbon' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/carbon.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.font.base', 0, 0, -1), ('math', 0, 0, -1), ('pyglet.libs.darwin', 0, 0, -1), ('pyglet.libs.darwin._oscheck', 0, 0, -1), ('pyglet.libs.darwin.*', 0, 0, -1), ('pyglet.font', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('sys.byteorder', 0, 0, -1)] binaries=[] datas=[]>
pyglet.font.sys: None -> None
pyglet.font.math: None -> None
pyglet.font.os: None -> None
pyglet.font.win32: None -> <PyModule 'pyglet.font.win32' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/win32.pyc imports=[('pyglet.image', 0, 0, -1), ('pyglet.font.base', 0, 0, -1), ('pyglet.libs.win32._gdi32', 0, 0, -1), ('pyglet.libs.win32.constants', 0, 0, -1), ('pyglet.libs.win32.types.*', 0, 0, -1), ('sys.byteorder', 0, 0, -1), ('sys', 0, 0, -1), ('math', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.image.codecs.gdiplus.gdiplus', 0, 0, -1), ('pyglet.image.codecs.gdiplus.BitmapData', 0, 0, -1), ('pyglet.libs.win32.constants.*', 0, 0, -1), ('pyglet.font.win32query', 0, 0, -1), ('pyglet.image.codecs.gdiplus.PixelFormat32bppARGB', 0, 0, -1), ('pyglet.font', 0, 0, -1), ('pyglet.image.codecs.gdiplus.ImageLockModeRead', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('os', 1, 0, -1), ('pyglet.compat', 0, 0, -1), ('pyglet.libs.win32._user32', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.libs.win32.types', 0, 0, -1), ('pyglet.image.codecs.gdiplus', 0, 0, -1), ('pyglet.libs.win32', 0, 0, -1), ('pyglet.image.codecs.gdiplus.Rect', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.libs.win32._kernel32', 0, 0, -1)] binaries=[] datas=[]>
pyglet.font.quartz: None -> <PyModule 'pyglet.font.quartz' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/quartz.pyc imports=[('pyglet.image', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet.font.base', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1), ('math', 0, 0, -1), ('pyglet.font', 0, 0, -1)] binaries=[] datas=[]>
pyglet.font.freetype: None -> <PyModule 'pyglet.font.freetype' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/freetype.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.font.base', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.font.freetype_lib', 0, 0, -1), ('pyglet.font.fontconfig.get_fontconfig', 0, 0, -1), ('pyglet.font.fontconfig', 0, 0, -1), ('pyglet.font', 0, 0, -1), ('pyglet.compat', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.font.freetype_lib.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.font.weakref: None -> None
pyglet.image.pyglet: None -> None
pyglet.image.warnings: None -> None
pyglet.image.sys: None -> None
pyglet.image.math: None -> None
pyglet.image.__future__: None -> None
pyglet.image.weakref: None -> None
pyglet.image.codecs: None -> <PkgModule 'pyglet.image.codecs' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/__init__.pyc imports=[('pyglet.image.codecs.png', 1, 0, -1), ('pyglet.compat_platform', 0, 0, -1), ('os.path', 0, 0, -1), ('pyglet.image.codecs', 1, 0, -1), ('pyglet.image.codecs.gdiplus', 1, 1, -1), ('pyglet.image.codecs.gdkpixbuf2', 1, 1, -1), ('pyglet.image.codecs.pil', 1, 0, -1), ('pyglet.image.codecs.dds', 1, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.image.codecs.quicktime', 1, 1, -1), ('pyglet.image.codecs.bmp', 1, 0, -1), ('pyglet.options', 1, 1, -1), ('pyglet', 1, 1, -1), ('pyglet.image.codecs.quartz', 1, 1, -1)] binaries=[] datas=[]>
pyglet.image.atlas: None -> <PyModule 'pyglet.image.atlas' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/atlas.pyc imports=[('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.ctypes: None -> None
pyglet.image.re: None -> None
pyglet.window.pyglet: None -> None
pyglet.window.carbon: None -> <PkgModule 'pyglet.window.carbon' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/carbon/__init__.pyc imports=[('pyglet.window.WindowException', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('warnings', 0, 0, -1), ('unicodedata', 0, 0, -1), ('pyglet.libs.darwin.*', 0, 0, -1), ('pyglet.canvas.carbon', 0, 0, -1), ('os.path', 0, 0, -1), ('pyglet.libs.darwin.quartzkey.charmap', 0, 0, -1), ('pyglet.event.EventDispatcher', 0, 0, -1), ('pyglet.window.BaseWindow', 0, 0, -1), ('pyglet.libs.darwin.quartzkey.keymap', 0, 0, -1), ('pyglet.window.DefaultMouseCursor', 0, 0, -1), ('pyglet.libs.darwin.quartzkey', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.event', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.window.mouse', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('pyglet.window.event', 0, 0, -1), ('pyglet.canvas.carbon.CarbonCanvas', 0, 0, -1), ('pyglet.app', 1, 0, -1), ('pyglet.libs.darwin', 0, 0, -1), ('pyglet.window._PlatformEventHandler', 0, 0, -1), ('pyglet.window.MouseCursor', 0, 0, -1), ('pyglet.libs.darwin._oscheck', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.carbon.CarbonWindow: None -> None
  DEL pyglet.window.carbon.CarbonWindow
pyglet.text.Label: None -> None
  DEL pyglet.text.Label
pyglet.window.xlib: None -> <PkgModule 'pyglet.window.xlib' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/xlib/__init__.pyc imports=[('pyglet.window.WindowException', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('pyglet.canvas.xlib', 0, 0, -1), ('warnings', 0, 0, -1), ('unicodedata', 0, 0, -1), ('pyglet.window.MouseCursorException', 0, 0, -1), ('pyglet.libs.x11.cursorfont', 0, 0, -1), ('pyglet.window.NoSuchDisplayException', 0, 0, -1), ('pyglet.canvas.xlib.XlibCanvas', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.window._ViewEventHandler', 0, 0, -1), ('pyglet.libs.x11.xsync', 0, 0, -1), ('pyglet.event.EventDispatcher', 0, 0, -1), ('pyglet.window.BaseWindow', 0, 0, -1), ('pyglet.window.DefaultMouseCursor', 0, 0, -1), ('pyglet.window.ImageMouseCursor', 0, 0, -1), ('pyglet.event', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1), ('pyglet.window.mouse', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('pyglet.libs.x11', 0, 0, -1), ('pyglet.window._PlatformEventHandler', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('pyglet.window.MouseCursor', 0, 0, -1), ('sys', 1, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.xlib.XlibWindow: None -> None
  DEL pyglet.window.xlib.XlibWindow
pyglet.window.sys: None -> None
pyglet.window.win32: None -> <PkgModule 'pyglet.window.win32' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/win32/__init__.pyc imports=[('pyglet.window.WindowException', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('warnings', 0, 0, -1), ('pyglet.libs.win32._gdi32', 0, 0, -1), ('unicodedata', 0, 0, -1), ('pyglet.libs.win32.types.*', 0, 0, -1), ('pyglet.libs.win32.winkey', 0, 0, -1), ('pyglet.canvas.win32.Win32Canvas', 0, 0, -1), ('pyglet.window._ViewEventHandler', 0, 0, -1), ('pyglet.app', 1, 1, -1), ('pyglet.event.EventDispatcher', 0, 0, -1), ('pyglet.libs.win32.constants', 0, 0, -1), ('pyglet.compat_platform', 0, 0, -1), ('pyglet.window.BaseWindow', 0, 0, -1), ('pyglet.window.DefaultMouseCursor', 0, 0, -1), ('pyglet.libs.win32.winkey.*', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.event', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.canvas.win32', 0, 0, -1), ('pyglet', 1, 1, -1), ('pyglet.libs.win32._user32', 0, 0, -1), ('pyglet.window.mouse', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('pyglet.libs.win32.types', 0, 0, -1), ('pyglet.app', 1, 0, -1), ('pyglet.libs.win32.constants.*', 0, 0, -1), ('pyglet.window._PlatformEventHandler', 0, 0, -1), ('pyglet.libs.win32', 0, 0, -1), ('pyglet.window.MouseCursor', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.libs.win32._kernel32', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.cocoa: None -> <PkgModule 'pyglet.window.cocoa' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/cocoa/__init__.pyc imports=[('pyglet.window.WindowException', 0, 0, -1), ('pyglet.canvas.cocoa.CocoaCanvas', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet_window', 0, 0, -1), ('pyglet_delegate', 0, 0, -1), ('pyglet_textview.PygletTextView', 0, 0, -1), ('pyglet_view', 0, 0, -1), ('pyglet_view.PygletView', 0, 0, -1), ('pyglet.event', 0, 0, -1), ('systemcursor', 0, 0, -1), ('pyglet.canvas.cocoa', 0, 0, -1), ('pyglet_window.PygletToolWindow', 0, 0, -1), ('pyglet.event.EventDispatcher', 0, 0, -1), ('pyglet.window.BaseWindow', 0, 0, -1), ('pyglet.window.DefaultMouseCursor', 0, 0, -1), ('pyglet_window.PygletWindow', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet_textview', 0, 0, -1), ('ctypes', 0, 0, -1), ('systemcursor.SystemCursor', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1), ('pyglet.window.MouseCursor', 0, 0, -1), ('pyglet_delegate.PygletDelegate', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.pprint: None -> None
pyglet.window.win32.Win32Window: None -> None
  DEL pyglet.window.win32.Win32Window
pyglet.window.time: None -> None
pyglet.window.event: None -> <PyModule 'pyglet.window.event' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/event.pyc imports=[('pyglet.window.mouse', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.cocoa.CocoaWindow: None -> None
  DEL pyglet.window.cocoa.CocoaWindow
pyglet.window.carbon.pyglet: None -> None
pyglet.window.WindowException: None -> None
  DEL pyglet.window.WindowException
pyglet.window.carbon.warnings: None -> None
pyglet.window.carbon.unicodedata: None -> None
pyglet.window.carbon.os: None -> None
pyglet.libs.darwin.quartzkey: None -> <PyModule 'pyglet.libs.darwin.quartzkey' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/darwin/quartzkey.pyc imports=[('pyglet.window.key', 0, 0, -1), ('pyglet.window', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.BaseWindow: None -> None
  DEL pyglet.window.BaseWindow
pyglet.window.DefaultMouseCursor: None -> None
  DEL pyglet.window.DefaultMouseCursor
pyglet.window.carbon.ctypes: None -> None
pyglet.window._PlatformEventHandler: None -> None
  DEL pyglet.window._PlatformEventHandler
pyglet.window.MouseCursor: None -> None
  DEL pyglet.window.MouseCursor
pyglet.libs.darwin._oscheck: None -> None
  DEL pyglet.libs.darwin._oscheck
pyglet.libs.darwin.constants: None -> <PyModule 'pyglet.libs.darwin.constants' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/darwin/constants.pyc imports=[] binaries=[] datas=[]>
pyglet.libs.darwin.types: None -> <PyModule 'pyglet.libs.darwin.types' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/darwin/types.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.darwin.pyglet: None -> None
pyglet.libs.darwin.cocoapy.runtime: None -> <PyModule 'pyglet.libs.darwin.cocoapy.runtime' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/darwin/cocoapy/runtime.pyc imports=[('ctypes', 0, 0, -1), ('platform', 0, 0, -1), ('sys', 0, 0, -1), ('cocoalibs', 1, 1, 1), ('ctypes.util', 0, 0, -1), ('struct', 0, 0, -1), ('cocoatypes', 0, 0, 1), ('cocoatypes.*', 0, 0, 1), ('ctypes.*', 0, 0, -1), ('cocoalibs.cfstring_to_string', 1, 1, 1)] binaries=[] datas=[]>
pyglet.libs.darwin.cocoapy.cocoalibs: None -> <PyModule 'pyglet.libs.darwin.cocoapy.cocoalibs' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/darwin/cocoapy/cocoalibs.pyc imports=[('ctypes', 0, 0, -1), ('runtime.ObjCInstance', 0, 0, 1), ('ctypes.util', 0, 0, -1), ('runtime.send_message', 0, 0, 1), ('runtime', 0, 0, 1), ('cocoatypes', 0, 0, 1), ('cocoatypes.*', 0, 0, 1), ('ctypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.darwin.cocoapy.cocoatypes: None -> <PyModule 'pyglet.libs.darwin.cocoapy.cocoatypes' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/darwin/cocoapy/cocoatypes.pyc imports=[('ctypes', 0, 0, -1), ('platform', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('sys', 0, 0, -1), ('struct', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.darwin.cocoapy.ctypes: None -> None
pyglet.libs.darwin.cocoapy.platform: None -> None
pyglet.libs.darwin.cocoapy.sys: None -> None
pyglet.libs.darwin.cocoapy.struct: None -> None
gestalt: None -> None
  DEL gestalt
java: None -> None
  DEL java
MacOS: None -> None
  DEL MacOS
win32api: None -> None
  DEL win32api
win32con: None -> None
  DEL win32con
gestalt: None -> None
  DEL gestalt
java: None -> None
  DEL java
plistlib: None -> <PyModule 'plistlib' /usr/lib/python2.7/plistlib.pyc imports=[('Carbon.Files.fsRdWrPerm', 1, 0, -1), ('re', 0, 0, -1), ('xml.parsers.expat', 1, 0, -1), ('warnings', 1, 0, -1), ('Carbon.File.FSRef', 1, 0, -1), ('Carbon.File.FSGetResourceForkName', 1, 0, -1), ('Carbon.Files.fsRdPerm', 1, 0, -1), ('Carbon.Res', 1, 0, -1), ('warnings', 0, 0, -1), ('warnings.warn', 1, 0, -1), ('Carbon.Files', 1, 0, -1), ('cStringIO', 0, 0, -1), ('datetime', 0, 0, -1), ('xml.parsers.expat.ParserCreate', 1, 0, -1), ('Carbon', 1, 0, -1), ('cStringIO.StringIO', 0, 0, -1), ('binascii', 0, 0, -1), ('Carbon.File', 1, 0, -1)] binaries=[] datas=[]>
win32con: None -> None
  DEL win32con
_winreg: None -> None
  DEL _winreg
win32api: None -> None
  DEL win32api
vms_lib: None -> None
  DEL vms_lib
win32api: None -> None
  DEL win32api
win32con: None -> None
  DEL win32con
win32con: None -> None
  DEL win32con
win32pipe: None -> None
  DEL win32pipe
win32api: None -> None
  DEL win32api
win32con: None -> None
  DEL win32con
win32api: None -> None
  DEL win32api
Carbon: None -> None
  DEL Carbon
xml: None -> <PkgModule 'xml' /usr/lib/python2.7/xml/__init__.pyc imports=[('sys', 0, 1, -1), ('_xmlplus', 0, 0, -1), ('xml.sax.xmlreader', 0, 0, -1), ('xml.sax.expatreader', 0, 0, -1)] binaries=[] datas=[]>
xml.parsers: None -> <PkgModule 'xml.parsers' /usr/lib/python2.7/xml/parsers/__init__.pyc imports=[] binaries=[] datas=[]>
xml.parsers.expat: None -> <PyModule 'xml.parsers.expat' /usr/lib/python2.7/xml/parsers/expat.pyc imports=[('pyexpat', 0, 0, -1), ('pyexpat.*', 0, 0, -1)] binaries=[] datas=[]>
Carbon: None -> None
  DEL Carbon
Carbon: None -> None
  DEL Carbon
Carbon: None -> None
  DEL Carbon
Carbon: None -> None
  DEL Carbon
Carbon: None -> None
  DEL Carbon
Carbon: None -> None
  DEL Carbon
Carbon: None -> None
  DEL Carbon
xml.sys: None -> None
xml._xmlplus: None -> None
_xmlplus: None -> None
  DEL _xmlplus
xml.xml: None -> None
xml.sax: None -> <PkgModule 'xml.sax' /usr/lib/python2.7/xml/sax/__init__.pyc imports=[('handler', 0, 0, -1), ('_exceptions.SAXNotSupportedException', 0, 0, -1), ('cStringIO', 1, 0, -1), ('handler.ErrorHandler', 0, 0, -1), ('handler.ContentHandler', 0, 0, -1), ('xml.sax.expatreader', 0, 1, -1), ('_exceptions.SAXReaderNotAvailable', 0, 0, -1), ('_exceptions.SAXNotRecognizedException', 0, 0, -1), ('StringIO', 1, 1, -1), ('cStringIO.StringIO', 1, 0, -1), ('_exceptions.SAXParseException', 0, 0, -1), ('_exceptions', 0, 0, -1), ('sys', 1, 1, -1), ('org.python.core', 1, 0, -1), ('xmlreader', 0, 0, -1), ('_exceptions.SAXException', 0, 0, -1), ('os', 0, 0, -1), ('org.python.core.imp', 1, 0, -1), ('xmlreader.InputSource', 0, 0, -1), ('StringIO.StringIO', 1, 1, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
xml.sax.xmlreader: None -> <PyModule 'xml.sax.xmlreader' /usr/lib/python2.7/xml/sax/xmlreader.pyc imports=[('handler', 0, 0, -1), ('_exceptions.SAXNotSupportedException', 0, 0, -1), ('saxutils', 1, 0, -1), ('_exceptions.SAXNotRecognizedException', 0, 0, -1), ('_exceptions', 0, 0, -1)] binaries=[] datas=[]>
xml.sax.expatreader: None -> <PyModule 'xml.sax.expatreader' /usr/lib/python2.7/xml/sax/expatreader.pyc imports=[('xml.sax.handler', 0, 0, -1), ('xml.sax.handler.property_xml_string', 0, 0, -1), ('xml.sax.handler.feature_external_pes', 0, 0, -1), ('sys', 0, 0, -1), ('xml.sax.xmlreader', 0, 0, -1), ('xml.sax.handler.feature_string_interning', 0, 0, -1), ('xml.sax._exceptions', 0, 0, -1), ('weakref', 0, 1, -1), ('xml.sax', 0, 0, -1), ('xml.sax.handler.feature_namespace_prefixes', 0, 0, -1), ('xml.sax.saxutils', 0, 0, -1), ('xml.parsers', 0, 0, -1), ('xml.sax._exceptions.*', 0, 0, -1), ('xml.sax.handler.feature_validation', 0, 0, -1), ('xml.sax.handler.property_interning_dict', 0, 0, -1), ('xml.sax.handler.feature_namespaces', 0, 0, -1), ('xml.sax.saxutils', 0, 1, -1), ('_weakref', 0, 0, -1), ('xml.sax.handler.feature_external_ges', 0, 0, -1), ('xml.parsers.expat', 0, 0, -1)] binaries=[] datas=[]>
xml.sax.handler: None -> <PyModule 'xml.sax.handler' /usr/lib/python2.7/xml/sax/handler.pyc imports=[] binaries=[] datas=[]>
xml.sax._exceptions: None -> <PyModule 'xml.sax._exceptions' /usr/lib/python2.7/xml/sax/_exceptions.pyc imports=[('java.lang.Exception', 0, 1, -1), ('sys', 0, 0, -1), ('java.lang', 0, 1, -1)] binaries=[] datas=[]>
xml.sax.cStringIO: None -> None
xml.sax.xml: None -> None
xml.sax.StringIO: None -> None
xml.sax.sys: None -> None
xml.sax.org: None -> None
org: None -> None
  DEL org
xml.sax.os: None -> None
org: None -> None
  DEL org
xml.sax.java: None -> None
java: None -> None
  DEL java
java: None -> None
  DEL java
xml.sax.weakref: None -> None
xml.sax.saxutils: None -> <PyModule 'xml.sax.saxutils' /usr/lib/python2.7/xml/sax/saxutils.pyc imports=[('handler', 0, 0, -1), ('sys', 0, 0, -1), ('sys', 1, 1, -1), ('types', 0, 0, -1), ('os', 0, 0, -1), ('xmlreader', 0, 0, -1), ('urllib', 0, 0, -1), ('io', 0, 0, -1), ('urlparse', 0, 0, -1)] binaries=[] datas=[]>
xml.sax._weakref: None -> None
xml.sax.types: None -> None
xml.sax.urllib: None -> None
xml.sax.io: None -> None
xml.sax.urlparse: None -> None
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
_scproxy: None -> None
  DEL _scproxy
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
rourl2path: None -> None
  DEL rourl2path
_winreg: None -> None
  DEL _winreg
cl: None -> None
  DEL cl
cl: None -> None
  DEL cl
SOCKS: None -> None
  DEL SOCKS
_winreg: None -> None
  DEL _winreg
EasyDialogs: None -> None
  DEL EasyDialogs
EasyDialogs: None -> None
  DEL EasyDialogs
msvcrt: None -> None
  DEL msvcrt
msvcrt: None -> None
  DEL msvcrt
xml.parsers.pyexpat: None -> None
pyexpat: None -> <ExtensionModule 'pyexpat' /usr/lib/python2.7/lib-dynload/pyexpat.so imports=[('xmlparse', 0, 0, -1), ('xmltok', 0, 0, -1)] binaries=[] datas=[]>
xmlparse: None -> None
  DEL xmlparse
xmltok: None -> None
  DEL xmltok
pyglet.libs.darwin.ctypes: None -> None
pyglet.canvas.MacOS: None -> None
MacOS: None -> None
  DEL MacOS
pyglet.libs.darwin._oscheck: None -> None
  DEL pyglet.libs.darwin._oscheck
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.inspect: None -> None
pyglet.text.pyglet: None -> None
pyglet.text.caret: None -> <PyModule 'pyglet.text.caret' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/caret.pyc imports=[('pyglet.clock', 0, 0, -1), ('re', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.window.key', 0, 0, -1), ('pyglet.event', 0, 0, -1), ('time', 0, 0, -1), ('pyglet.gl', 1, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.text.formats: None -> <PkgModule 'pyglet.text.formats' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/formats/__init__.pyc imports=[] binaries=[] datas=[]>
pyglet.text.formats.plaintext: None -> <PyModule 'pyglet.text.formats.plaintext' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/formats/plaintext.pyc imports=[('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.text.layout: None -> <PyModule 'pyglet.text.layout' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/layout.pyc imports=[('pyglet.font.base._grapheme_break', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.font.base', 0, 0, -1), ('pyglet.text', 0, 0, -1), ('re', 0, 0, -1), ('pyglet.text.runlist', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.event', 0, 0, -1), ('pyglet.graphics', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.text.os: None -> None
pyglet.text.formats.attributed: None -> <PyModule 'pyglet.text.formats.attributed' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/formats/attributed.pyc imports=[('parser', 0, 0, -1), ('re', 0, 0, -1), ('token', 0, 0, -1), ('operator', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.text.document: None -> <PyModule 'pyglet.text.document' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/document.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.text', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.text.runlist', 0, 0, -1), ('pyglet.event', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.font', 1, 0, -1)] binaries=[] datas=[]>
pyglet.text.formats.html: None -> <PyModule 'pyglet.text.formats.html' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/formats/html.pyc imports=[('HTMLParser', 0, 0, -1), ('re', 0, 0, -1), ('pyglet.text.formats', 0, 0, -1), ('htmlentitydefs', 0, 0, -1), ('pyglet.text.formats.structured', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.text.re: None -> None
pyglet.text.time: None -> None
pyglet.text.formats.pyglet: None -> None
pyglet.font.base: None -> <PyModule 'pyglet.font.base' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/base.pyc imports=[('pyglet.gl', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('unicodedata', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.image', 0, 0, -1)] binaries=[] datas=[]>
pyglet.text.sys: None -> None
pyglet.text.runlist: None -> <PyModule 'pyglet.text.runlist' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/runlist.pyc imports=[] binaries=[] datas=[]>
pyglet.font.unicodedata: None -> None
pyglet.graphics.ctypes: None -> None
pyglet.graphics.pyglet: None -> None
pyglet.graphics.vertexbuffer: None -> <PyModule 'pyglet.graphics.vertexbuffer' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/graphics/vertexbuffer.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet', 1, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.gl', 1, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.graphics.vertexattribute: None -> <PyModule 'pyglet.graphics.vertexattribute' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/graphics/vertexattribute.pyc imports=[('ctypes', 0, 0, -1), ('re', 0, 0, -1), ('pyglet.graphics.vertexbuffer', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.graphics', 0, 0, -1)] binaries=[] datas=[]>
pyglet.graphics.vertexdomain: None -> <PyModule 'pyglet.graphics.vertexdomain' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/graphics/vertexdomain.pyc imports=[('ctypes', 0, 0, -1), ('re', 0, 0, -1), ('pyglet.graphics.vertexbuffer', 0, 0, -1), ('pyglet.graphics.vertexattribute', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.graphics.allocation', 0, 0, -1), ('pyglet.graphics', 0, 0, -1)] binaries=[] datas=[]>
pyglet.graphics.sys: None -> None
pyglet.graphics.re: None -> None
pyglet.graphics.allocation: None -> <PyModule 'pyglet.graphics.allocation' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/graphics/allocation.pyc imports=[] binaries=[] datas=[]>
pyglet.text.formats.parser: None -> None
parser: None -> <ExtensionModule 'parser' /usr/lib/python2.7/lib-dynload/parser.so imports=[('copy_reg', 0, 0, -1)] binaries=[] datas=[]>
pyglet.text.formats.re: None -> None
pyglet.text.formats.token: None -> None
pyglet.text.formats.operator: None -> None
pyglet.text.formats.HTMLParser: None -> None
HTMLParser: None -> <PyModule 'HTMLParser' /usr/lib/python2.7/HTMLParser.pyc imports=[('markupbase', 0, 0, -1), ('htmlentitydefs', 1, 0, -1), ('re', 0, 0, -1)] binaries=[] datas=[]>
pyglet.text.formats.htmlentitydefs: None -> None
htmlentitydefs: None -> <PyModule 'htmlentitydefs' /usr/lib/python2.7/htmlentitydefs.pyc imports=[] binaries=[] datas=[]>
pyglet.text.formats.structured: None -> <PyModule 'pyglet.text.formats.structured' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/text/formats/structured.pyc imports=[('re', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
markupbase: None -> <PyModule 'markupbase' /usr/lib/python2.7/markupbase.pyc imports=[('re', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.xlib.pyglet: None -> None
pyglet.window.WindowException: None -> None
  DEL pyglet.window.WindowException
pyglet.window.xlib.warnings: None -> None
pyglet.window.xlib.unicodedata: None -> None
pyglet.window.MouseCursorException: None -> None
  DEL pyglet.window.MouseCursorException
pyglet.libs.x11.cursorfont: None -> <PyModule 'pyglet.libs.x11.cursorfont' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/x11/cursorfont.pyc imports=[] binaries=[] datas=[]>
pyglet.window.NoSuchDisplayException: None -> None
  DEL pyglet.window.NoSuchDisplayException
pyglet.window._ViewEventHandler: None -> None
  DEL pyglet.window._ViewEventHandler
pyglet.window.BaseWindow: None -> None
  DEL pyglet.window.BaseWindow
pyglet.window.DefaultMouseCursor: None -> None
  DEL pyglet.window.DefaultMouseCursor
pyglet.window.ImageMouseCursor: None -> None
  DEL pyglet.window.ImageMouseCursor
pyglet.window.xlib.ctypes: None -> None
pyglet.window._PlatformEventHandler: None -> None
  DEL pyglet.window._PlatformEventHandler
pyglet.window.MouseCursor: None -> None
  DEL pyglet.window.MouseCursor
pyglet.window.xlib.sys: None -> None
pyglet.window.win32.pyglet: None -> None
pyglet.window.WindowException: None -> None
  DEL pyglet.window.WindowException
pyglet.window.win32.warnings: None -> None
pyglet.libs.win32: None -> <PkgModule 'pyglet.libs.win32' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/win32/__init__.pyc imports=[('ctypes', 0, 0, -1), ('types.*', 0, 0, -1), ('types', 0, 0, -1), ('constants', 0, 0, -1), ('struct', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet', 0, 0, -1), ('traceback', 0, 1, -1)] binaries=[] datas=[]>
pyglet.libs.win32._gdi32: None -> None
  DEL pyglet.libs.win32._gdi32
pyglet.window.win32.unicodedata: None -> None
pyglet.libs.win32.types: None -> <PyModule 'pyglet.libs.win32.types' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/win32/types.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('ctypes.wintypes', 0, 0, -1), ('ctypes.wintypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.win32.winkey: None -> <PyModule 'pyglet.libs.win32.winkey' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/win32/winkey.pyc imports=[('pyglet.window.key', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('constants.*', 0, 0, -1), ('constants', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window._ViewEventHandler: None -> None
  DEL pyglet.window._ViewEventHandler
pyglet.libs.win32.constants: None -> <PyModule 'pyglet.libs.win32.constants' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/win32/constants.pyc imports=[] binaries=[] datas=[]>
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.window.BaseWindow: None -> None
  DEL pyglet.window.BaseWindow
pyglet.window.DefaultMouseCursor: None -> None
  DEL pyglet.window.DefaultMouseCursor
pyglet.window.win32.ctypes: None -> None
pyglet.libs.win32._user32: None -> None
  DEL pyglet.libs.win32._user32
pyglet.window._PlatformEventHandler: None -> None
  DEL pyglet.window._PlatformEventHandler
pyglet.window.MouseCursor: None -> None
  DEL pyglet.window.MouseCursor
pyglet.libs.win32._kernel32: None -> None
  DEL pyglet.libs.win32._kernel32
pyglet.libs.win32.ctypes: None -> None
pyglet.libs.win32.struct: None -> None
pyglet.libs.win32.pyglet: None -> None
pyglet.libs.win32.traceback: None -> None
ctypes.wintypes: None -> <PyModule 'ctypes.wintypes' /usr/lib/python2.7/ctypes/wintypes.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('ctypes._SimpleCData', 0, 0, -1)] binaries=[] datas=[]>
ctypes._SimpleCData: None -> None
  DEL ctypes._SimpleCData
pyglet.libs.win32._user32: None -> None
  DEL pyglet.libs.win32._user32
pyglet.libs.win32._kernel32: None -> None
  DEL pyglet.libs.win32._kernel32
pyglet.window.cocoa.pyglet: None -> None
pyglet.window.WindowException: None -> None
  DEL pyglet.window.WindowException
pyglet.window.cocoa.pyglet_window: None -> <PyModule 'pyglet.window.cocoa.pyglet_window' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/cocoa/pyglet_window.pyc imports=[('pyglet.app', 1, 1, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet', 1, 1, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.cocoa.pyglet_delegate: None -> <PyModule 'pyglet.window.cocoa.pyglet_delegate' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/cocoa/pyglet_delegate.pyc imports=[('systemcursor.SystemCursor', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('systemcursor', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.cocoa.pyglet_textview: None -> <PyModule 'pyglet.window.cocoa.pyglet_textview' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/cocoa/pyglet_textview.pyc imports=[('pyglet.window.key', 0, 0, -1), ('unicodedata', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.cocoa.pyglet_view: None -> <PyModule 'pyglet.window.cocoa.pyglet_view' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/cocoa/pyglet_view.pyc imports=[('pyglet.window.mouse', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet.libs.darwin.quartzkey.keymap', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1), ('pyglet.app', 1, 1, -1), ('pyglet.libs.darwin.quartzkey', 0, 0, -1), ('pyglet.libs.darwin.quartzkey.charmap', 0, 0, -1), ('pyglet', 1, 1, -1)] binaries=[] datas=[]>
pyglet.window.cocoa.systemcursor: None -> <PyModule 'pyglet.window.cocoa.systemcursor' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/window/cocoa/systemcursor.pyc imports=[('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1)] binaries=[] datas=[]>
pyglet.window.BaseWindow: None -> None
  DEL pyglet.window.BaseWindow
pyglet.window.DefaultMouseCursor: None -> None
  DEL pyglet.window.DefaultMouseCursor
pyglet.window.cocoa.ctypes: None -> None
pyglet.window.MouseCursor: None -> None
  DEL pyglet.window.MouseCursor
pyglet.window.cocoa.unicodedata: None -> None
pyglet.image.codecs.pyglet: None -> None
pyglet.image.codecs.png: None -> <PyModule 'pyglet.image.codecs.png' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/png.pyc imports=[('pyglet.image.codecs.*', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('itertools', 0, 0, -1), ('array', 0, 0, -1), ('pyglet.image.*', 0, 0, -1), ('pyglet.extlibs.png', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1)] binaries=[] datas=[]>
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.image.codecs.os: None -> None
pyglet.image.codecs.gdiplus: None -> <PyModule 'pyglet.image.codecs.gdiplus' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/gdiplus.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.com', 0, 0, -1), ('pyglet.image.codecs.*', 0, 0, -1), ('pyglet.com.IUnknown', 0, 0, -1), ('pyglet.image.*', 0, 0, -1), ('pyglet.libs.win32._kernel32', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.libs.win32', 0, 0, -1), ('pyglet.libs.win32.constants', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1), ('pyglet.libs.win32.types.*', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.libs.win32.constants.*', 0, 0, -1), ('pyglet.libs.win32.types', 0, 0, -1)] binaries=[('gdiplus.dll', '/usr/lib/libgdiplus.so.0', 'BINARY')] datas=[]>
pyglet.image.codecs.gdkpixbuf2: None -> <PyModule 'pyglet.image.codecs.gdkpixbuf2' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/gdkpixbuf2.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.image.codecs.*', 0, 0, -1), ('pyglet.lib', 0, 0, -1), ('pyglet.image.*', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.image.codecs.gif', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.codecs.pil: None -> <PyModule 'pyglet.image.codecs.pil' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/pil.pyc imports=[('os.path', 0, 0, 0), ('PIL.Image', 0, 1, 0), ('__future__', 0, 0, 0), ('pyglet.gl', 0, 0, 0), ('pyglet.image.codecs.*', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('Image', 0, 0, 0), ('pyglet.image.codecs', 0, 0, 0), ('PIL', 0, 1, 0), ('pyglet.gl.*', 0, 0, 0), ('pyglet.image.*', 0, 0, 0), ('pyglet.image', 0, 0, 0)] binaries=[] datas=[]>
pyglet.image.codecs.dds: None -> <PyModule 'pyglet.image.codecs.dds' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/dds.pyc imports=[('__future__.division', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.image.codecs.s3tc', 0, 0, -1), ('struct', 0, 0, -1), ('__future__', 0, 0, -1), ('pyglet.compat.izip_longest', 0, 0, -1), ('pyglet.image.CompressedImageData', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.codecs.quicktime: None -> <PyModule 'pyglet.image.codecs.quicktime' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/quicktime.pyc imports=[('pyglet.libs.darwin.types', 0, 0, -1), ('ctypes', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.libs.darwin.types.*', 0, 0, -1), ('pyglet.image.codecs.*', 0, 0, -1), ('pyglet.libs.darwin.constants', 0, 0, -1), ('pyglet.window.carbon._oscheck', 0, 0, -1), ('pyglet.libs.darwin.constants._name', 0, 0, -1), ('pyglet.window.carbon.carbon', 0, 0, -1), ('pyglet.image.*', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.window.carbon.quicktime', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1), ('pyglet.window.carbon', 0, 0, -1), ('ctypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.codecs.bmp: None -> <PyModule 'pyglet.image.codecs.bmp' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/bmp.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.image.codecs.ImageDecodeException', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.image.ImageData', 0, 0, -1), ('pyglet.image.codecs.ImageDecoder', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1)] binaries=[] datas=[]>
pyglet.options: None -> None
  DEL pyglet.options
pyglet.image.codecs.quartz: None -> <PyModule 'pyglet.image.codecs.quartz' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/quartz.pyc imports=[('pyglet.image.codecs.*', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1), ('pyglet.image.ImageData', 0, 0, -1), ('pyglet.image.AnimationFrame', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1), ('pyglet.image.Animation', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.codecs.itertools: None -> None
pyglet.image.codecs.array: None -> None
pyglet.extlibs: None -> <PkgModule 'pyglet.extlibs' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/extlibs/__init__.pyc imports=[] binaries=[] datas=[]>
pyglet.extlibs.png: None -> <PyModule 'pyglet.extlibs.png' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/extlibs/png.pyc imports=[('optparse', 1, 0, -1), ('optparse.OptionParser', 1, 0, -1), ('itertools', 0, 0, -1), ('sys', 0, 0, -1), ('msvcrt', 1, 1, -1), ('math', 0, 0, -1), ('os', 1, 1, -1), ('array', 0, 0, -1), ('warnings', 0, 0, -1), ('operator', 0, 0, -1), ('struct', 0, 0, -1), ('re', 1, 0, -1), ('__future__', 0, 0, -1), ('cpngfilters', 0, 0, -1), ('array.array', 0, 0, -1), ('zlib', 0, 0, -1), ('__future__.generators', 0, 0, -1)] binaries=[] datas=[]>
pyglet.extlibs.optparse: None -> None
pyglet.extlibs.itertools: None -> None
pyglet.extlibs.sys: None -> None
pyglet.extlibs.msvcrt: None -> None
msvcrt: None -> None
  DEL msvcrt
pyglet.extlibs.math: None -> None
pyglet.extlibs.os: None -> None
pyglet.extlibs.array: None -> None
pyglet.extlibs.warnings: None -> None
pyglet.extlibs.operator: None -> None
pyglet.extlibs.struct: None -> None
pyglet.extlibs.re: None -> None
pyglet.extlibs.__future__: None -> None
pyglet.extlibs.cpngfilters: None -> None
cpngfilters: None -> None
  DEL cpngfilters
pyglet.extlibs.zlib: None -> None
pyglet.image.codecs.ctypes: None -> None
pyglet.libs.win32._kernel32: None -> None
  DEL pyglet.libs.win32._kernel32
pyglet.image.codecs.gif: None -> <PyModule 'pyglet.image.codecs.gif' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/gif.pyc imports=[('pyglet.image.codecs.ImageDecodeException', 0, 0, -1), ('struct', 0, 0, -1), ('pyglet.image.codecs', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.codecs.ImageDecodeException: None -> None
  DEL pyglet.image.codecs.ImageDecodeException
pyglet.image.codecs.struct: None -> None
PIL: None -> <PkgModule 'PIL' /usr/lib/python2.7/site-packages/PIL/__init__.pyc imports=[] binaries=[] datas=[]>
PIL.Image: None -> <PyModule 'PIL.Image' /usr/lib/python2.7/site-packages/PIL/Image.pyc imports=[('PIL._binary.i8', 0, 0, -1), ('PIL', 1, 0, -1), ('os', 0, 0, -1), ('warnings', 0, 0, -1), ('struct', 0, 0, -1), ('__future__', 0, 0, -1), ('cffi', 0, 0, -1), ('PIL._util.isStringType', 0, 0, -1), ('PIL.ImagePalette', 1, 0, -1), ('PIL._imaging', 0, 0, -1), ('PIL.ImageShow', 1, 0, -1), ('sys', 0, 0, -1), ('PIL.ImageColor', 1, 1, -1), ('PIL', 0, 0, -1), ('__builtin__', 0, 1, -1), ('PIL._util.isPath', 0, 0, -1), ('PIL.PILLOW_VERSION', 0, 0, -1), ('builtins', 0, 0, -1), ('PIL.ImageMode', 0, 0, -1), ('PIL.GifImagePlugin', 1, 0, -1), ('collections', 0, 0, -1), ('__future__.print_function', 0, 0, -1), ('math', 1, 1, -1), ('PIL.PngImagePlugin', 1, 0, -1), ('PIL._plugins', 0, 0, -1), ('PIL.PpmImagePlugin', 1, 0, -1), ('PIL', 1, 1, -1), ('io', 1, 0, -1), ('PIL.VERSION', 0, 0, -1), ('PIL._util', 0, 0, -1), ('tempfile', 1, 0, -1), ('io.BytesIO', 1, 0, -1), ('PIL.BmpImagePlugin', 1, 0, -1), ('PIL._util.deferred_error', 0, 0, -1), ('PIL.PyAccess', 1, 1, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImagePalette', 1, 1, -1), ('PIL.ImageChops', 1, 0, -1), ('PIL.JpegImagePlugin', 1, 0, -1), ('numbers', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
Image: None -> <PyModule 'Image' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/Image.pyc imports=[('ImageShow', 1, 0, -1), ('os', 0, 0, -1), ('warnings', 0, 0, -1), ('types.TupleType', 0, 0, -1), ('PpmImagePlugin', 1, 0, -1), ('__builtin__', 1, 1, -1), ('BmpImagePlugin', 1, 0, -1), ('ImageMode', 0, 0, -1), ('sys', 0, 0, -1), ('math', 1, 1, -1), ('types.StringType', 0, 0, -1), ('string', 0, 0, -1), ('ImageChops', 1, 0, -1), ('operator.isNumberType', 0, 0, -1), ('PngImagePlugin', 1, 0, -1), ('types', 0, 0, -1), ('operator.isSequenceType', 0, 0, -1), ('tempfile', 1, 0, -1), ('JpegImagePlugin', 1, 0, -1), ('struct', 0, 1, -1), ('ImagePalette', 0, 0, -1), ('types.IntType', 0, 0, -1), ('operator', 0, 0, -1), ('_imaging', 0, 0, -1), ('GifImagePlugin', 1, 0, -1), ('ImageColor', 1, 1, -1), ('PIL.MicImagePlugin', 0, 0, -1), ('PIL.WmfImagePlugin', 0, 0, -1), ('PIL.ImtImagePlugin', 0, 0, -1), ('PIL.ImImagePlugin', 0, 0, -1), ('PIL.PdfImagePlugin', 0, 0, -1), ('PIL.PcdImagePlugin', 0, 0, -1), ('PIL.GribStubImagePlugin', 0, 0, -1), ('PIL.BmpImagePlugin', 0, 0, -1), ('PIL.XbmImagePlugin', 0, 0, -1), ('PIL.BufrStubImagePlugin', 0, 0, -1), ('PIL.SgiImagePlugin', 0, 0, -1), ('PIL.FpxImagePlugin', 0, 0, -1), ('PIL.FliImagePlugin', 0, 0, -1), ('PIL.TiffImagePlugin', 0, 0, -1), ('PIL.JpegImagePlugin', 0, 0, -1), ('PIL.WebPImagePlugin', 0, 0, -1), ('PIL.EpsImagePlugin', 0, 0, -1), ('PIL.XpmImagePlugin', 0, 0, -1), ('PIL.FitsStubImagePlugin', 0, 0, -1), ('PIL.CurImagePlugin', 0, 0, -1), ('PIL.PngImagePlugin', 0, 0, -1), ('PIL.TgaImagePlugin', 0, 0, -1), ('PIL.IcnsImagePlugin', 0, 0, -1), ('PIL.IptcImagePlugin', 0, 0, -1), ('PIL.Hdf5StubImagePlugin', 0, 0, -1), ('PIL.SpiderImagePlugin', 0, 0, -1), ('PIL.GifImagePlugin', 0, 0, -1), ('PIL.XVThumbImagePlugin', 0, 0, -1), ('PIL.PalmImagePlugin', 0, 0, -1), ('PIL.PsdImagePlugin', 0, 0, -1), ('PIL.MpegImagePlugin', 0, 0, -1), ('PIL.McIdasImagePlugin', 0, 0, -1), ('PIL.Jpeg2KImagePlugin', 0, 0, -1), ('PIL.MpoImagePlugin', 0, 0, -1), ('PIL.PcxImagePlugin', 0, 0, -1), ('PIL.IcoImagePlugin', 0, 0, -1), ('PIL.DcxImagePlugin', 0, 0, -1), ('PIL.PpmImagePlugin', 0, 0, -1), ('PIL.MspImagePlugin', 0, 0, -1), ('PIL.PixarImagePlugin', 0, 0, -1), ('PIL.GbrImagePlugin', 0, 0, -1), ('PIL.SunImagePlugin', 0, 0, -1)] binaries=[] datas=[]>
PIL.PIL: None -> None
PIL._binary: None -> <PyModule 'PIL._binary' /usr/lib/python2.7/site-packages/PIL/_binary.pyc imports=[('struct.pack', 0, 0, -1), ('struct.unpack', 0, 0, -1), ('struct', 0, 0, -1)] binaries=[] datas=[]>
PIL.os: None -> None
PIL.warnings: None -> None
PIL.struct: None -> None
PIL.__future__: None -> None
PIL.cffi: None -> None
cffi: None -> <PkgModule 'cffi' /usr/lib/python2.7/site-packages/cffi/__init__.pyc imports=[('api.CDefError', 0, 0, 1), ('ffiplatform', 0, 0, 1), ('ffiplatform.VerificationError', 0, 0, 1), ('api.FFIError', 0, 0, 1), ('api.FFI', 0, 0, 1), ('ffiplatform.VerificationMissing', 0, 0, 1), ('api', 0, 0, 1)] binaries=[] datas=[]>
PIL._util: None -> <PyModule 'PIL._util' /usr/lib/python2.7/site-packages/PIL/_util.pyc imports=[('os', 0, 0, -1)] binaries=[] datas=[]>
PIL.ImagePalette: None -> <PyModule 'PIL.ImagePalette' /usr/lib/python2.7/site-packages/PIL/ImagePalette.pyc imports=[('PIL.GimpPaletteFile', 1, 1, -1), ('random', 1, 0, -1), ('PIL.ImageColor', 0, 0, -1), ('PIL', 1, 1, -1), ('array', 0, 0, -1), ('warnings', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.PaletteFile', 1, 1, -1), ('PIL.GimpGradientFile', 1, 1, -1), ('random.randint', 1, 0, -1), ('traceback', 1, 1, -1)] binaries=[] datas=[]>
PIL._imaging: None -> <ExtensionModule 'PIL._imaging' /usr/lib/python2.7/site-packages/PIL/_imaging.so imports=[] binaries=[] datas=[]>
PIL.ImageShow: None -> <PyModule 'PIL.ImageShow' /usr/lib/python2.7/site-packages/PIL/ImageShow.pyc imports=[('__future__.print_function', 0, 0, -1), ('shlex.quote', 0, 1, -1), ('os', 0, 0, -1), ('shlex', 0, 1, -1), ('pipes', 0, 1, -1), ('__future__', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('pipes.quote', 0, 1, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PIL.sys: None -> None
PIL.ImageColor: None -> <PyModule 'PIL.ImageColor' /usr/lib/python2.7/site-packages/PIL/ImageColor.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('re', 0, 0, -1), ('colorsys.hls_to_rgb', 1, 1, -1), ('colorsys', 1, 1, -1)] binaries=[] datas=[]>
PIL.__builtin__: None -> None
PIL.PILLOW_VERSION: None -> None
  DEL PIL.PILLOW_VERSION
PIL.builtins: None -> None
builtins: None -> None
  DEL builtins
PIL.ImageMode: None -> <PyModule 'PIL.ImageMode' /usr/lib/python2.7/site-packages/PIL/ImageMode.pyc imports=[('PIL.Image', 1, 1, -1), ('PIL', 1, 1, -1)] binaries=[] datas=[]>
PIL.GifImagePlugin: None -> <PyModule 'PIL.GifImagePlugin' /usr/lib/python2.7/site-packages/PIL/GifImagePlugin.pyc imports=[('subprocess.CalledProcessError', 1, 0, -1), ('subprocess', 1, 0, -1), ('copy.copy', 1, 0, -1), ('subprocess.PIPE', 1, 0, -1), ('tempfile', 1, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('copy', 1, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('subprocess.Popen', 1, 0, -1), ('PIL.Image', 0, 0, -1), ('_imaging_gif', 0, 0, -1), ('math', 1, 0, -1), ('os', 1, 0, -1), ('subprocess.check_call', 1, 0, -1)] binaries=[] datas=[]>
PIL.collections: None -> None
PIL.math: None -> None
PIL.PngImagePlugin: None -> <PyModule 'PIL.PngImagePlugin' /usr/lib/python2.7/site-packages/PIL/PngImagePlugin.pyc imports=[('re', 0, 0, -1), ('__future__.print_function', 0, 0, -1), ('zlib', 0, 0, -1), ('__future__', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1)] binaries=[] datas=[]>
PIL._plugins: None -> None
  DEL PIL._plugins
PIL.PpmImagePlugin: None -> <PyModule 'PIL.PpmImagePlugin' /usr/lib/python2.7/site-packages/PIL/PpmImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('string', 0, 0, -1), ('locale', 0, 0, -1)] binaries=[] datas=[]>
PIL.io: None -> None
PIL.VERSION: None -> None
  DEL PIL.VERSION
PIL.tempfile: None -> None
PIL.BmpImagePlugin: None -> <PyModule 'PIL.BmpImagePlugin' /usr/lib/python2.7/site-packages/PIL/BmpImagePlugin.pyc imports=[('math', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1)] binaries=[] datas=[]>
PIL.PyAccess: None -> <PyModule 'PIL.PyAccess' /usr/lib/python2.7/site-packages/PIL/PyAccess.pyc imports=[('__future__', 0, 0, -1), ('cffi', 0, 0, -1), ('cffi.FFI', 0, 0, -1), ('__future__.print_function', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PIL.ImageChops: None -> <PyModule 'PIL.ImageChops' /usr/lib/python2.7/site-packages/PIL/ImageChops.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1)] binaries=[] datas=[]>
PIL.JpegImagePlugin: None -> <PyModule 'PIL.JpegImagePlugin' /usr/lib/python2.7/site-packages/PIL/JpegImagePlugin.pyc imports=[('PIL._util', 0, 0, -1), ('subprocess', 1, 0, -1), ('MpoImagePlugin', 1, 1, 1), ('PIL.JpegPresets.presets', 0, 0, -1), ('PIL.JpegPresets', 0, 0, -1), ('array', 0, 0, -1), ('struct', 0, 0, -1), ('tempfile', 1, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('MpoImagePlugin.MpoImageFile', 1, 1, 1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('struct.unpack', 0, 0, -1), ('os', 1, 0, -1), ('PIL.TiffImagePlugin', 0, 0, -1), ('PIL._util.isStringType', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
PIL.numbers: None -> None
numbers: None -> <PyModule 'numbers' /usr/lib/python2.7/numbers.pyc imports=[('__future__.division', 0, 0, -1), ('abc', 0, 0, -1), ('abc.abstractproperty', 0, 0, -1), ('__future__', 0, 0, -1), ('abc.abstractmethod', 0, 0, -1), ('abc.ABCMeta', 0, 0, -1)] binaries=[] datas=[]>
cffi.api: None -> <PyModule 'cffi.api' /usr/lib/python2.7/site-packages/cffi/api.pyc imports=[('_cffi_backend', 1, 1, -1), ('model', 1, 0, 1), ('verifier._caller_dir_pycache', 1, 0, 1), ('collections.Callable', 0, 1, -1), ('lock.allocate_lock', 0, 0, 1), ('types', 0, 0, -1), ('gc_weakref', 1, 1, 1), ('verifier', 1, 0, 1), ('', 1, 1, 1), ('__version__', 1, 1, 1), ('ctypes.util', 1, 1, -1), ('sys', 0, 0, -1), ('gc_weakref.GcWeakrefs', 1, 1, 1), ('sys', 1, 0, -1), ('collections', 0, 1, -1), ('', 1, 0, 1), ('model', 1, 1, 1), ('cparser', 1, 0, 1), ('verifier.Verifier', 1, 0, 1), ('os', 1, 0, -1), ('lock', 0, 0, 1)] binaries=[] datas=[]>
cffi.ffiplatform: None -> <PyModule 'cffi.ffiplatform' /usr/lib/python2.7/site-packages/cffi/ffiplatform.pyc imports=[('distutils.core.Extension', 1, 0, -1), ('os.path', 0, 0, -1), ('os', 0, 0, -1), ('distutils.errors', 1, 0, -1), ('io', 0, 1, -1), ('os.path.samefile', 0, 0, -1), ('distutils.core', 1, 0, -1), ('cStringIO', 0, 0, -1), ('distutils.core.Distribution', 1, 0, -1)] binaries=[] datas=[]>
cffi._cffi_backend: None -> None
_cffi_backend: None -> <ExtensionModule '_cffi_backend' /usr/lib/python2.7/site-packages/_cffi_backend.so imports=[] binaries=[] datas=[]>
cffi.model: None -> <PyModule 'cffi.model' /usr/lib/python2.7/site-packages/cffi/model.pyc imports=[('lock', 0, 0, 1), ('lock.allocate_lock', 0, 0, 1), ('ffiplatform', 1, 1, 1), ('ffiplatform.VerificationError', 1, 1, 1), ('', 1, 1, 1), ('types', 0, 0, -1), ('api', 1, 0, 1), ('ffiplatform.VerificationError', 1, 0, 1), ('', 1, 0, 1), ('ffiplatform', 1, 0, 1), ('api', 1, 1, 1), ('weakref', 0, 0, -1)] binaries=[] datas=[]>
cffi.verifier: None -> <PyModule 'cffi.verifier' /usr/lib/python2.7/site-packages/cffi/verifier.pyc imports=[('_cffi_backend', 1, 1, -1), ('importlib.machinery', 0, 1, -1), ('sys', 0, 0, -1), ('ffiplatform', 0, 0, 1), ('shutil', 0, 0, -1), ('os', 0, 0, -1), ('', 0, 0, 1), ('__version_verifier_modules__', 0, 0, 1), ('imp', 0, 1, -1), ('vengine_gen', 1, 1, 1), ('', 1, 0, 1), ('binascii', 0, 0, -1), ('vengine_cpy', 1, 0, 1), ('', 1, 1, 1), ('io', 0, 0, -1)] binaries=[] datas=[]>
cffi.collections: None -> None
cffi.lock: None -> <PyModule 'cffi.lock' /usr/lib/python2.7/site-packages/cffi/lock.pyc imports=[('thread', 0, 1, -1), ('_thread', 0, 1, -1), ('sys', 0, 0, -1), ('dummy_thread.allocate_lock', 0, 1, -1), ('_thread.allocate_lock', 0, 1, -1), ('dummy_thread', 0, 1, -1), ('thread.allocate_lock', 0, 1, -1), ('_dummy_thread.allocate_lock', 0, 1, -1), ('_dummy_thread', 0, 1, -1)] binaries=[] datas=[]>
cffi.types: None -> None
cffi.gc_weakref: None -> <PyModule 'cffi.gc_weakref' /usr/lib/python2.7/site-packages/cffi/gc_weakref.pyc imports=[('weakref.ref', 0, 0, -1), ('weakref', 0, 0, -1)] binaries=[] datas=[]>
cffi.__version__: None -> None
__version__: None -> None
  DEL __version__
cffi.ctypes: None -> None
cffi.sys: None -> None
cffi.cparser: None -> <PyModule 'cffi.cparser' /usr/lib/python2.7/site-packages/cffi/cparser.pyc imports=[('_pycparser', 0, 0, 1), ('re', 0, 0, -1), ('_thread', 0, 1, -1), ('commontypes', 0, 0, 1), ('weakref', 0, 0, -1), ('', 0, 0, 1), ('pycparser', 0, 1, -1), ('sys', 0, 0, -1), ('thread', 0, 1, -1), ('model', 0, 0, 1), ('commontypes.resolve_common_type', 0, 0, 1), ('commontypes.COMMON_TYPES', 0, 0, 1), ('api', 0, 0, 1)] binaries=[] datas=[]>
cffi.os: None -> None
cffi.weakref: None -> None
cffi.thread: None -> None
cffi._thread: None -> None
_thread: None -> None
  DEL _thread
cffi.dummy_thread: None -> None
_thread: None -> None
  DEL _thread
cffi._dummy_thread: None -> None
_dummy_thread: None -> None
  DEL _dummy_thread
_dummy_thread: None -> None
  DEL _dummy_thread
cffi.distutils: None -> None
distutils: None -> <PkgModule 'distutils' /usr/lib/python2.7/distutils/__init__.pyc imports=[] binaries=[] datas=[('include/python2.7/pyconfig.h', '/usr/include/python2.7/pyconfig.h', 'DATA'), ('lib/python2.7/config/Makefile', '/usr/lib/python2.7/config/Makefile', 'DATA')]>
distutils.core: None -> <PyModule 'distutils.core' /usr/lib/python2.7/distutils/core.pyc imports=[('distutils.errors.DistutilsArgError', 0, 0, -1), ('distutils.errors.CCompilerError', 0, 0, -1), ('distutils.extension.Extension', 0, 0, -1), ('distutils.errors.DistutilsSetupError', 0, 0, -1), ('os', 0, 0, -1), ('distutils.config', 0, 0, -1), ('distutils.dist.Distribution', 0, 0, -1), ('distutils.dist', 0, 0, -1), ('distutils.debug.DEBUG', 0, 0, -1), ('distutils.debug', 0, 0, -1), ('distutils.cmd.Command', 0, 0, -1), ('distutils.errors', 0, 0, -1), ('distutils.errors.DistutilsError', 0, 0, -1), ('distutils.config.PyPIRCCommand', 0, 0, -1), ('distutils.extension', 0, 0, -1), ('distutils.cmd', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
distutils.errors: None -> <PyModule 'distutils.errors' /usr/lib/python2.7/distutils/errors.pyc imports=[] binaries=[] datas=[]>
cffi.io: None -> None
cffi.cStringIO: None -> None
distutils.distutils: None -> None
distutils.extension: None -> <PyModule 'distutils.extension' /usr/lib/python2.7/distutils/extension.pyc imports=[('distutils.sysconfig.parse_makefile', 1, 0, -1), ('distutils.text_file', 1, 0, -1), ('types.*', 0, 0, -1), ('types', 0, 0, -1), ('os', 0, 0, -1), ('distutils.util', 1, 0, -1), ('warnings', 0, 0, -1), ('distutils.util.split_quoted', 1, 0, -1), ('string', 0, 0, -1), ('distutils.sysconfig._variable_rx', 1, 0, -1), ('distutils.sysconfig', 1, 0, -1), ('distutils.sysconfig.expand_makefile_vars', 1, 0, -1), ('distutils.text_file.TextFile', 1, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
distutils.os: None -> None
distutils.config: None -> <PyModule 'distutils.config' /usr/lib/python2.7/distutils/config.pyc imports=[('os', 0, 0, -1), ('ConfigParser.ConfigParser', 0, 0, -1), ('ConfigParser', 0, 0, -1), ('distutils.cmd', 0, 0, -1), ('distutils.cmd.Command', 0, 0, -1)] binaries=[] datas=[]>
distutils.dist: None -> <PyModule 'distutils.dist' /usr/lib/python2.7/distutils/dist.pyc imports=[('distutils.cmd.Command', 1, 0, -1), ('pprint.pformat', 1, 0, -1), ('os', 0, 0, -1), ('warnings', 0, 0, -1), ('ConfigParser.ConfigParser', 1, 0, -1), ('distutils.debug', 0, 0, -1), ('distutils.fancy_getopt.translate_longopt', 0, 0, -1), ('distutils.core.gen_usage', 1, 0, -1), ('distutils.log', 0, 0, -1), ('distutils.fancy_getopt', 0, 0, -1), ('distutils.errors.DistutilsModuleError', 0, 0, -1), ('sys', 0, 0, -1), ('email', 0, 0, -1), ('distutils.util.rfc822_escape', 0, 0, -1), ('distutils.util.check_environ', 0, 0, -1), ('distutils.util', 0, 0, -1), ('distutils.command', 1, 0, -1), ('distutils.debug.DEBUG', 0, 0, -1), ('ConfigParser', 1, 0, -1), ('distutils.fancy_getopt.FancyGetopt', 0, 0, -1), ('distutils.errors', 0, 0, -1), ('distutils.errors.DistutilsArgError', 0, 0, -1), ('distutils.core', 1, 0, -1), ('re', 0, 0, -1), ('pprint', 1, 0, -1), ('distutils', 0, 0, -1), ('distutils.errors.DistutilsOptionError', 0, 0, -1), ('email.message_from_file', 0, 0, -1), ('distutils.errors.DistutilsClassError', 0, 0, -1), ('distutils.cmd', 1, 0, -1), ('distutils.util.strtobool', 0, 0, -1), ('distutils.versionpredicate', 1, 0, -1)] binaries=[] datas=[]>
distutils.debug: None -> <PyModule 'distutils.debug' /usr/lib/python2.7/distutils/debug.pyc imports=[('os', 0, 0, -1)] binaries=[] datas=[]>
distutils.cmd: None -> <PyModule 'distutils.cmd' /usr/lib/python2.7/distutils/cmd.pyc imports=[('distutils.fancy_getopt.longopt_xlate', 1, 0, -1), ('re', 0, 0, -1), ('sys', 0, 0, -1), ('distutils.spawn.spawn', 1, 0, -1), ('os', 0, 0, -1), ('distutils.util', 0, 0, -1), ('distutils.dist', 1, 0, -1), ('distutils.dir_util', 0, 0, -1), ('distutils', 0, 0, -1), ('distutils.dep_util', 0, 0, -1), ('distutils.debug.DEBUG', 1, 0, -1), ('distutils.errors.DistutilsOptionError', 0, 0, -1), ('distutils.debug', 1, 0, -1), ('distutils.errors', 0, 0, -1), ('distutils.archive_util', 0, 0, -1), ('distutils.spawn', 1, 0, -1), ('distutils.log', 0, 0, -1), ('distutils.file_util', 0, 0, -1), ('distutils.dist.Distribution', 1, 0, -1), ('distutils.fancy_getopt', 1, 0, -1)] binaries=[] datas=[]>
distutils.sys: None -> None
distutils.sysconfig: None -> <PyModule 'distutils.sysconfig' /usr/lib/python2.7/distutils/sysconfig.pyc imports=[('_osx_support', 1, 1, -1), ('distutils.text_file', 1, 0, -1), ('re', 0, 0, -1), ('_sysconfigdata.build_time_vars', 1, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('string', 0, 0, -1), ('distutils.errors.DistutilsPlatformError', 0, 0, -1), ('distutils.errors', 0, 0, -1), ('_sysconfigdata', 1, 0, -1), ('distutils.text_file.TextFile', 1, 0, -1)] binaries=[] datas=[]>
distutils.text_file: None -> <PyModule 'distutils.text_file' /usr/lib/python2.7/distutils/text_file.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
distutils.types: None -> None
distutils.util: None -> <PyModule 'distutils.util' /usr/lib/python2.7/distutils/util.pyc imports=[('distutils.spawn', 0, 0, -1), ('_osx_support', 1, 1, -1), ('re', 0, 0, -1), ('pwd', 1, 1, -1), ('tempfile.mkstemp', 1, 1, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('distutils.spawn.spawn', 0, 0, -1), ('tempfile', 1, 1, -1), ('distutils.errors.DistutilsByteCompileError', 0, 0, -1), ('string', 0, 0, -1), ('distutils', 0, 0, -1), ('distutils.dep_util', 0, 0, -1), ('distutils.errors.DistutilsPlatformError', 0, 0, -1), ('py_compile.compile', 1, 1, -1), ('distutils.errors', 0, 0, -1), ('tempfile.mktemp', 1, 1, -1), ('py_compile', 1, 1, -1), ('distutils.log', 0, 0, -1), ('distutils.sysconfig', 1, 1, -1), ('distutils.dep_util.newer', 0, 0, -1)] binaries=[] datas=[]>
distutils.warnings: None -> None
distutils.string: None -> None
distutils._osx_support: None -> None
_osx_support: None -> <PyModule '_osx_support' /usr/lib/python2.7/_osx_support.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('distutils', 1, 1, -1), ('tempfile', 1, 0, -1), ('contextlib', 1, 0, -1), ('distutils.log', 1, 1, -1)] binaries=[] datas=[]>
distutils.re: None -> None
distutils._sysconfigdata: None -> None
_sysconfigdata: None -> <PyModule '_sysconfigdata' /usr/lib/python2.7/_sysconfigdata.pyc imports=[] binaries=[] datas=[]>
distutils.log: None -> <PyModule 'distutils.log' /usr/lib/python2.7/distutils/log.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
distutils.spawn: None -> <PyModule 'distutils.spawn' /usr/lib/python2.7/distutils/spawn.pyc imports=[('distutils', 0, 1, -1), ('distutils.log', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('distutils.debug.DEBUG', 0, 0, -1), ('distutils.debug', 0, 0, -1), ('distutils.errors.DistutilsExecError', 0, 0, -1), ('distutils.errors.DistutilsPlatformError', 0, 0, -1), ('distutils.sysconfig', 0, 1, -1), ('distutils.errors', 0, 0, -1), ('errno', 1, 1, -1), ('distutils', 0, 0, -1)] binaries=[] datas=[]>
distutils.pwd: None -> None
distutils.tempfile: None -> None
distutils.dep_util: None -> <PyModule 'distutils.dep_util' /usr/lib/python2.7/distutils/dep_util.pyc imports=[('stat.ST_MTIME', 0, 0, -1), ('os', 0, 0, -1), ('stat', 0, 0, -1), ('distutils.errors.DistutilsFileError', 0, 0, -1), ('distutils.errors', 0, 0, -1)] binaries=[] datas=[]>
distutils.py_compile: None -> None
py_compile: None -> <PyModule 'py_compile' /usr/lib/python2.7/py_compile.pyc imports=[('imp', 0, 0, -1), ('sys', 0, 0, -1), ('marshal', 0, 0, -1), ('os', 0, 0, -1), ('__builtin__', 0, 0, -1), ('traceback', 0, 0, -1)] binaries=[] datas=[]>
distutils.errno: None -> None
distutils.stat: None -> None
distutils.ConfigParser: None -> None
ConfigParser: None -> <PyModule 'ConfigParser' /usr/lib/python2.7/ConfigParser.pyc imports=[('collections', 0, 0, -1), ('re', 0, 0, -1), ('UserDict', 0, 0, -1), ('collections.OrderedDict', 0, 0, -1)] binaries=[] datas=[]>
distutils.fancy_getopt: None -> <PyModule 'distutils.fancy_getopt' /usr/lib/python2.7/distutils/fancy_getopt.pyc imports=[('distutils.errors.DistutilsArgError', 0, 0, -1), ('re', 0, 0, -1), ('sys', 0, 0, -1), ('getopt', 0, 0, -1), ('string', 0, 0, -1), ('distutils.errors', 0, 0, -1), ('distutils.errors.DistutilsGetoptError', 0, 0, -1)] binaries=[] datas=[]>
distutils.dir_util: None -> <PyModule 'distutils.dir_util' /usr/lib/python2.7/distutils/dir_util.pyc imports=[('distutils.file_util', 1, 0, -1), ('os', 0, 0, -1), ('distutils.errors.DistutilsInternalError', 0, 0, -1), ('distutils', 0, 0, -1), ('distutils.errors', 0, 0, -1), ('errno', 0, 0, -1), ('distutils.log', 0, 0, -1), ('distutils.file_util.copy_file', 1, 0, -1), ('distutils.errors.DistutilsFileError', 0, 0, -1)] binaries=[] datas=[]>
distutils.archive_util: None -> <PyModule 'distutils.archive_util' /usr/lib/python2.7/distutils/archive_util.pyc imports=[('distutils.spawn', 0, 0, -1), ('pwd.getpwnam', 0, 0, -1), ('distutils.dir_util', 0, 0, -1), ('distutils.log', 0, 0, -1), ('sys', 0, 0, -1), ('grp', 0, 0, -1), ('os', 0, 0, -1), ('distutils.spawn.spawn', 0, 0, -1), ('warnings', 0, 0, -1), ('distutils', 0, 0, -1), ('distutils.errors.DistutilsExecError', 0, 0, -1), ('pwd', 0, 0, -1), ('distutils.dir_util.mkpath', 0, 0, -1), ('grp.getgrnam', 0, 0, -1), ('distutils.errors', 0, 0, -1), ('zipfile', 1, 0, -1), ('warnings.warn', 0, 0, -1), ('tarfile', 1, 0, -1)] binaries=[] datas=[]>
distutils.file_util: None -> <PyModule 'distutils.file_util' /usr/lib/python2.7/distutils/file_util.pyc imports=[('os.path.exists', 1, 0, -1), ('stat', 1, 0, -1), ('errno', 1, 0, -1), ('os', 0, 0, -1), ('os.path.isdir', 1, 0, -1), ('stat.S_IMODE', 1, 0, -1), ('distutils', 0, 0, -1), ('os.path.basename', 1, 0, -1), ('os.path.dirname', 1, 0, -1), ('stat.ST_ATIME', 1, 0, -1), ('stat.ST_MTIME', 1, 0, -1), ('distutils.errors', 0, 0, -1), ('os.path.isfile', 1, 0, -1), ('stat.ST_MODE', 1, 0, -1), ('os.path', 1, 0, -1), ('distutils.log', 0, 0, -1), ('distutils.dep_util.newer', 1, 0, -1), ('distutils.dep_util', 1, 0, -1), ('distutils.errors.DistutilsFileError', 0, 0, -1)] binaries=[] datas=[]>
distutils.getopt: None -> None
distutils.pprint: None -> None
distutils.email: None -> None
distutils.command: None -> <PkgModule 'distutils.command' /usr/lib/python2.7/distutils/command/__init__.pyc imports=[] binaries=[] datas=[]>
email.message_from_file: None -> None
  DEL email.message_from_file
distutils.versionpredicate: None -> <PyModule 'distutils.versionpredicate' /usr/lib/python2.7/distutils/versionpredicate.pyc imports=[('re', 0, 0, -1), ('distutils.version', 0, 0, -1), ('operator', 0, 0, -1)] binaries=[] datas=[]>
distutils.version: None -> <PyModule 'distutils.version' /usr/lib/python2.7/distutils/version.pyc imports=[('re', 0, 0, -1), ('types.StringType', 0, 0, -1), ('string', 0, 0, -1), ('types', 0, 0, -1)] binaries=[] datas=[]>
distutils.operator: None -> None
distutils.grp: None -> None
grp: None -> <ExtensionModule 'grp' /usr/lib/python2.7/lib-dynload/grp.so imports=[] binaries=[] datas=[]>
distutils.zipfile: None -> None
zipfile: None -> <PyModule 'zipfile' /usr/lib/python2.7/zipfile.pyc imports=[('re', 0, 0, -1), ('textwrap', 1, 0, -1), ('sys', 0, 0, -1), ('shutil', 0, 0, -1), ('os', 0, 0, -1), ('warnings', 1, 1, -1), ('struct', 0, 0, -1), ('cStringIO', 0, 0, -1), ('stat', 0, 0, -1), ('string', 0, 0, -1), ('zlib', 0, 0, -1), ('binascii', 0, 0, -1), ('py_compile', 1, 1, -1), ('time', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
distutils.tarfile: None -> None
tarfile: None -> <PyModule 'tarfile' /usr/lib/python2.7/tarfile.pyc imports=[('pwd', 0, 0, -1), ('cStringIO.StringIO', 1, 0, -1), ('os', 0, 0, -1), ('StringIO', 1, 1, -1), ('struct', 0, 0, -1), ('grp', 0, 0, -1), ('calendar', 1, 0, -1), ('gzip', 1, 0, -1), ('sys', 0, 0, -1), ('shutil', 0, 0, -1), ('warnings', 1, 0, -1), ('bz2', 1, 0, -1), ('time', 0, 0, -1), ('warnings.warnpy3k', 1, 0, -1), ('zlib', 1, 1, -1), ('errno', 0, 0, -1), ('cStringIO', 1, 0, -1), ('re', 0, 0, -1), ('copy', 0, 0, -1), ('StringIO.StringIO', 1, 1, -1), ('warnings', 1, 1, -1), ('operator', 0, 0, -1), ('bz2', 1, 1, -1), ('stat', 0, 0, -1)] binaries=[] datas=[]>
shutil: None -> <PyModule 'shutil' /usr/lib/python2.7/shutil.pyc imports=[('collections', 0, 0, -1), ('distutils.spawn', 1, 0, -1), ('pwd', 0, 0, -1), ('sys', 0, 0, -1), ('os.path', 0, 0, -1), ('os', 0, 0, -1), ('distutils.errors', 1, 0, -1), ('tarfile', 1, 0, -1), ('fnmatch', 0, 0, -1), ('grp', 0, 0, -1), ('os.path.abspath', 0, 0, -1), ('stat', 0, 0, -1), ('grp.getgrnam', 0, 0, -1), ('pwd.getpwnam', 0, 0, -1), ('errno', 0, 0, -1), ('zipfile', 1, 0, -1), ('distutils.spawn.spawn', 1, 0, -1), ('distutils.errors.DistutilsExecError', 1, 0, -1)] binaries=[] datas=[]>
gzip: None -> <PyModule 'gzip' /usr/lib/python2.7/gzip.pyc imports=[('sys', 0, 0, -1), ('os', 0, 0, -1), ('struct', 0, 0, -1), ('__builtin__', 0, 0, -1), ('zlib', 0, 0, -1), ('warnings', 1, 0, -1), ('errno', 1, 1, -1), ('time', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
cffi.importlib: None -> None
importlib: None -> <PkgModule 'importlib' /usr/lib/python2.7/importlib/__init__.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
importlib.machinery: None -> None
  DEL importlib.machinery
cffi.shutil: None -> None
cffi.__version_verifier_modules__: None -> None
__version_verifier_modules__: None -> None
  DEL __version_verifier_modules__
cffi.imp: None -> None
cffi.vengine_gen: None -> <PyModule 'cffi.vengine_gen' /usr/lib/python2.7/site-packages/cffi/vengine_gen.pyc imports=[('sys', 0, 0, -1), ('ffiplatform', 0, 0, 1), ('os', 0, 0, -1), ('', 0, 0, 1), ('types', 0, 0, -1), ('model', 0, 0, 1)] binaries=[] datas=[]>
cffi.binascii: None -> None
cffi.vengine_cpy: None -> <PyModule 'cffi.vengine_cpy' /usr/lib/python2.7/site-packages/cffi/vengine_cpy.pyc imports=[('imp', 0, 0, -1), ('sys', 0, 0, -1), ('ffiplatform', 0, 0, 1), ('', 0, 0, 1), ('warnings', 1, 1, -1), ('model', 0, 0, 1)] binaries=[] datas=[]>
importlib.sys: None -> None
cffi.warnings: None -> None
cffi._pycparser: None -> None
_pycparser: None -> None
  DEL _pycparser
cffi.re: None -> None
_thread: None -> None
  DEL _thread
cffi.commontypes: None -> <PyModule 'cffi.commontypes' /usr/lib/python2.7/site-packages/cffi/commontypes.pyc imports=[('', 0, 0, 1), ('model', 0, 0, 1), ('sys', 0, 0, -1), ('api', 0, 0, 1)] binaries=[] datas=[]>
cffi.pycparser: None -> None
pycparser: None -> <PkgModule 'pycparser' /usr/lib/python2.7/site-packages/pycparser/__init__.pyc imports=[('subprocess.Popen', 0, 0, -1), ('c_parser', 0, 0, 1), ('subprocess.PIPE', 0, 0, -1), ('subprocess', 0, 0, -1), ('c_parser.CParser', 0, 0, 1)] binaries=[] datas=[]>
pycparser.subprocess: None -> None
pycparser.c_parser: None -> <PyModule 'pycparser.c_parser' /usr/lib/python2.7/site-packages/pycparser/c_parser.pyc imports=[('re', 0, 0, -1), ('c_lexer.CLexer', 0, 0, 1), ('ply.yacc', 0, 0, 1), ('ply', 0, 0, 1), ('plyparser.PLYParser', 0, 0, 1), ('', 0, 0, 1), ('time', 0, 1, -1), ('plyparser', 0, 0, 1), ('ast_transforms', 0, 0, 1), ('plyparser.ParseError', 0, 0, 1), ('ast_transforms.fix_switch_cases', 0, 0, 1), ('c_lexer', 0, 0, 1), ('sys', 0, 1, -1), ('c_ast', 0, 0, 1), ('plyparser.Coord', 0, 0, 1), ('pprint', 0, 1, -1)] binaries=[] datas=[]>
pycparser.re: None -> None
pycparser.c_lexer: None -> <PyModule 'pycparser.c_lexer' /usr/lib/python2.7/site-packages/pycparser/c_lexer.pyc imports=[('ply', 0, 0, 1), ('ply.lex.TOKEN', 0, 0, 1), ('re', 0, 0, -1), ('ply.lex', 0, 0, 1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
pycparser.ply: None -> <PkgModule 'pycparser.ply' /usr/lib/python2.7/site-packages/pycparser/ply/__init__.pyc imports=[] binaries=[] datas=[]>
pycparser.ply.yacc: None -> <PyModule 'pycparser.ply.yacc' /usr/lib/python2.7/site-packages/pycparser/ply/yacc.pyc imports=[('re', 0, 0, -1), ('ply.lex', 1, 1, -1), ('sys', 0, 0, -1), ('cPickle', 1, 0, -1), ('os.path', 0, 0, -1), ('pickle', 1, 1, -1), ('types', 0, 0, -1), ('lex', 1, 1, -1), ('hashlib.md5', 1, 0, -1), ('md5', 1, 1, -1), ('hashlib', 1, 0, -1), ('md5.md5', 1, 1, -1)] binaries=[] datas=[]>
pycparser.plyparser: None -> <PyModule 'pycparser.plyparser' /usr/lib/python2.7/site-packages/pycparser/plyparser.pyc imports=[] binaries=[] datas=[]>
pycparser.time: None -> None
pycparser.ast_transforms: None -> <PyModule 'pycparser.ast_transforms' /usr/lib/python2.7/site-packages/pycparser/ast_transforms.pyc imports=[('', 0, 0, 1), ('c_ast', 0, 0, 1)] binaries=[] datas=[]>
pycparser.sys: None -> None
pycparser.c_ast: None -> <PyModule 'pycparser.c_ast' /usr/lib/python2.7/site-packages/pycparser/c_ast.pyc imports=[('sys', 0, 0, -1)] binaries=[] datas=[]>
pycparser.pprint: None -> None
pycparser.ply.lex: None -> <PyModule 'pycparser.ply.lex' /usr/lib/python2.7/site-packages/pycparser/ply/lex.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('copy', 0, 0, -1), ('os', 0, 0, -1), ('os.path', 1, 0, -1)] binaries=[] datas=[]>
pycparser.ply.re: None -> None
pycparser.ply.sys: None -> None
pycparser.ply.types: None -> None
pycparser.ply.copy: None -> None
pycparser.ply.os: None -> None
pycparser.ply.ply: None -> None
ply: None -> <PkgModule 'ply' /usr/lib/python2.7/site-packages/ply/__init__.pyc imports=[] binaries=[] datas=[]>
ply.lex: None -> <PyModule 'ply.lex' /usr/lib/python2.7/site-packages/ply/lex.pyc imports=[('re', 0, 0, -1), ('sys', 0, 0, -1), ('types', 0, 0, -1), ('copy', 0, 0, -1), ('os', 0, 0, -1), ('inspect', 0, 0, -1)] binaries=[] datas=[]>
pycparser.ply.cPickle: None -> None
pycparser.ply.pickle: None -> None
pycparser.ply.hashlib: None -> None
pycparser.ply.md5: None -> None
md5: None -> <PyModule 'md5' /usr/lib/python2.7/md5.pyc imports=[('hashlib.md5', 0, 0, -1), ('hashlib', 0, 0, -1), ('warnings', 0, 0, -1)] binaries=[] datas=[]>
ply.re: None -> None
ply.sys: None -> None
ply.types: None -> None
ply.copy: None -> None
ply.os: None -> None
ply.inspect: None -> None
PIL.GimpPaletteFile: None -> <PyModule 'PIL.GimpPaletteFile' /usr/lib/python2.7/site-packages/PIL/GimpPaletteFile.pyc imports=[('re', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL._binary.o8', 0, 0, -1)] binaries=[] datas=[]>
PIL.random: None -> None
PIL.array: None -> None
PIL.PaletteFile: None -> <PyModule 'PIL.PaletteFile' /usr/lib/python2.7/site-packages/PIL/PaletteFile.pyc imports=[('PIL._binary', 0, 0, -1), ('PIL._binary.o8', 0, 0, -1)] binaries=[] datas=[]>
PIL.GimpGradientFile: None -> <PyModule 'PIL.GimpGradientFile' /usr/lib/python2.7/site-packages/PIL/GimpGradientFile.pyc imports=[('math.pi', 0, 0, -1), ('math', 0, 0, -1), ('PIL._binary.o8', 0, 0, -1), ('math.sqrt', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('math.log', 0, 0, -1), ('math.sin', 0, 0, -1)] binaries=[] datas=[]>
PIL.traceback: None -> None
PIL.re: None -> None
PIL.colorsys: None -> None
colorsys: None -> <PyModule 'colorsys' /usr/lib/python2.7/colorsys.pyc imports=[] binaries=[] datas=[]>
PIL.shlex: None -> None
PIL.pipes: None -> None
pipes: None -> <PyModule 'pipes' /usr/lib/python2.7/pipes.pyc imports=[('os', 0, 0, -1), ('re', 0, 0, -1), ('tempfile', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
PIL.subprocess: None -> None
PIL.copy: None -> None
PIL.ImageFile: None -> <PyModule 'PIL.ImageFile' /usr/lib/python2.7/site-packages/PIL/ImageFile.pyc imports=[('PIL._util', 0, 0, -1), ('sys', 0, 0, -1), ('os', 0, 0, -1), ('PIL._util.isPath', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('traceback', 0, 0, -1), ('mmap', 1, 1, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
PIL._imaging_gif: None -> None
_imaging_gif: None -> None
  DEL _imaging_gif
PIL.mmap: None -> None
mmap: None -> <ExtensionModule 'mmap' /usr/lib/python2.7/lib-dynload/mmap.so imports=[] binaries=[] datas=[]>
PIL.zlib: None -> None
PIL.string: None -> None
PIL.locale: None -> None
cffi.FFI: None -> None
  DEL cffi.FFI
PIL.MpoImagePlugin: None -> <PyModule 'PIL.MpoImagePlugin' /usr/lib/python2.7/site-packages/PIL/MpoImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.JpegImagePlugin', 0, 0, -1)] binaries=[] datas=[]>
PIL.JpegPresets: None -> <PyModule 'PIL.JpegPresets' /usr/lib/python2.7/site-packages/PIL/JpegPresets.pyc imports=[] binaries=[] datas=[]>
PIL.TiffImagePlugin: None -> <PyModule 'PIL.TiffImagePlugin' /usr/lib/python2.7/site-packages/PIL/TiffImagePlugin.pyc imports=[('PIL._util', 0, 0, -1), ('collections', 0, 0, -1), ('itertools', 0, 0, -1), ('PIL', 1, 0, -1), ('__future__.print_function', 0, 0, -1), ('PIL', 1, 1, -1), ('os', 0, 0, -1), ('array', 0, 0, -1), ('warnings', 0, 0, -1), ('PIL.TiffTags', 1, 1, -1), ('__future__', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.TiffTags', 1, 0, -1), ('PIL.Image', 0, 0, -1), ('io', 0, 0, -1), ('PIL._util.isStringType', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PIL.itertools: None -> None
PIL.TiffTags: None -> <PyModule 'PIL.TiffTags' /usr/lib/python2.7/site-packages/PIL/TiffTags.pyc imports=[] binaries=[] datas=[]>
ImageShow: None -> <PyModule 'ImageShow' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/ImageShow.pyc imports=[('os', 0, 0, -1), ('Image', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PpmImagePlugin: None -> <PyModule 'PpmImagePlugin' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/PpmImagePlugin.pyc imports=[('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
BmpImagePlugin: None -> <PyModule 'BmpImagePlugin' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/BmpImagePlugin.pyc imports=[('ImagePalette', 0, 0, -1), ('Image', 0, 0, -1), ('ImageFile', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
ImageMode: None -> <PyModule 'ImageMode' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/ImageMode.pyc imports=[('Image', 1, 1, -1)] binaries=[] datas=[]>
ImageChops: None -> <PyModule 'ImageChops' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/ImageChops.pyc imports=[('Image', 0, 0, -1)] binaries=[] datas=[]>
PngImagePlugin: None -> <PyModule 'PngImagePlugin' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/PngImagePlugin.pyc imports=[('ImagePalette', 0, 0, -1), ('re', 0, 0, -1), ('ImageFile', 0, 0, -1), ('string', 0, 0, -1), ('zlib', 1, 1, -1), ('zlib', 0, 0, -1), ('ICCProfile', 1, 1, -1), ('Image', 0, 0, -1), ('zlib', 1, 0, -1)] binaries=[] datas=[]>
JpegImagePlugin: None -> <PyModule 'JpegImagePlugin' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/JpegImagePlugin.pyc imports=[('ImageFile', 0, 0, -1), ('array', 0, 0, -1), ('string', 0, 0, -1), ('tempfile', 1, 0, -1), ('struct', 0, 0, -1), ('StringIO', 1, 0, -1), ('Image', 0, 0, -1), ('os', 1, 0, -1), ('TiffImagePlugin', 1, 0, -1)] binaries=[] datas=[]>
ImagePalette: None -> <PyModule 'ImagePalette' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/ImagePalette.pyc imports=[('ImageColor', 0, 0, -1), ('random', 1, 0, -1), ('array', 0, 0, -1), ('GimpGradientFile', 1, 1, -1), ('GimpPaletteFile', 1, 1, -1), ('PaletteFile', 1, 1, -1), ('random.randint', 1, 0, -1), ('Image', 0, 0, -1)] binaries=[] datas=[]>
_imaging: None -> <ExtensionModule '_imaging' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/_imaging.so imports=[] binaries=[] datas=[]>
GifImagePlugin: None -> <PyModule 'GifImagePlugin' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/GifImagePlugin.pyc imports=[('ImagePalette', 0, 0, -1), ('Image', 0, 0, -1), ('os', 1, 0, -1), ('ImageFile', 0, 0, -1), ('_imaging_gif', 0, 0, -1)] binaries=[] datas=[]>
ImageColor: None -> <PyModule 'ImageColor' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/ImageColor.pyc imports=[('colorsys', 1, 1, -1), ('re', 0, 0, -1), ('Image', 0, 0, -1), ('colorsys.hls_to_rgb', 1, 1, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
PIL.MicImagePlugin: None -> <PyModule 'PIL.MicImagePlugin' /usr/lib/python2.7/site-packages/PIL/MicImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.OleFileIO.*', 0, 0, -1), ('PIL.TiffImagePlugin', 0, 0, -1), ('PIL.OleFileIO', 0, 0, -1)] binaries=[] datas=[]>
PIL.WmfImagePlugin: None -> <PyModule 'PIL.WmfImagePlugin' /usr/lib/python2.7/site-packages/PIL/WmfImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.ImtImagePlugin: None -> <PyModule 'PIL.ImtImagePlugin' /usr/lib/python2.7/site-packages/PIL/ImtImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('re', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.ImImagePlugin: None -> <PyModule 'PIL.ImImagePlugin' /usr/lib/python2.7/site-packages/PIL/ImImagePlugin.pyc imports=[('PIL._binary.i8', 0, 0, -1), ('re', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1)] binaries=[] datas=[]>
PIL.PdfImagePlugin: None -> <PyModule 'PIL.PdfImagePlugin' /usr/lib/python2.7/site-packages/PIL/PdfImagePlugin.pyc imports=[('PIL._binary.i8', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
PIL.PcdImagePlugin: None -> <PyModule 'PIL.PcdImagePlugin' /usr/lib/python2.7/site-packages/PIL/PcdImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.GribStubImagePlugin: None -> <PyModule 'PIL.GribStubImagePlugin' /usr/lib/python2.7/site-packages/PIL/GribStubImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.XbmImagePlugin: None -> <PyModule 'PIL.XbmImagePlugin' /usr/lib/python2.7/site-packages/PIL/XbmImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('re', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.BufrStubImagePlugin: None -> <PyModule 'PIL.BufrStubImagePlugin' /usr/lib/python2.7/site-packages/PIL/BufrStubImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.SgiImagePlugin: None -> <PyModule 'PIL.SgiImagePlugin' /usr/lib/python2.7/site-packages/PIL/SgiImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.FpxImagePlugin: None -> <PyModule 'PIL.FpxImagePlugin' /usr/lib/python2.7/site-packages/PIL/FpxImagePlugin.pyc imports=[('PIL.OleFileIO.OleFileIO', 0, 0, -1), ('PIL.OleFileIO.MAGIC', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.OleFileIO.i8', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('PIL.OleFileIO', 0, 0, -1), ('PIL.OleFileIO.i32', 0, 0, -1)] binaries=[] datas=[]>
PIL.FliImagePlugin: None -> <PyModule 'PIL.FliImagePlugin' /usr/lib/python2.7/site-packages/PIL/FliImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.WebPImagePlugin: None -> <PyModule 'PIL.WebPImagePlugin' /usr/lib/python2.7/site-packages/PIL/WebPImagePlugin.pyc imports=[('PIL.JpegImagePlugin', 1, 0, -1), ('PIL._webp', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.JpegImagePlugin._getexif', 1, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('io.BytesIO', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
PIL.EpsImagePlugin: None -> <PyModule 'PIL.EpsImagePlugin' /usr/lib/python2.7/site-packages/PIL/EpsImagePlugin.pyc imports=[('subprocess', 1, 0, -1), ('re', 0, 0, -1), ('sys', 0, 0, -1), ('distutils.spawn', 0, 1, -1), ('tempfile', 1, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('subprocess', 1, 1, -1), ('shutil', 0, 1, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('os', 1, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
PIL.XpmImagePlugin: None -> <PyModule 'PIL.XpmImagePlugin' /usr/lib/python2.7/site-packages/PIL/XpmImagePlugin.pyc imports=[('PIL._binary.i8', 0, 0, -1), ('re', 0, 0, -1), ('PIL._binary.o8', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1)] binaries=[] datas=[]>
PIL.FitsStubImagePlugin: None -> <PyModule 'PIL.FitsStubImagePlugin' /usr/lib/python2.7/site-packages/PIL/FitsStubImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.CurImagePlugin: None -> <PyModule 'PIL.CurImagePlugin' /usr/lib/python2.7/site-packages/PIL/CurImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.BmpImagePlugin', 0, 0, -1)] binaries=[] datas=[]>
PIL.TgaImagePlugin: None -> <PyModule 'PIL.TgaImagePlugin' /usr/lib/python2.7/site-packages/PIL/TgaImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.IcnsImagePlugin: None -> <PyModule 'PIL.IcnsImagePlugin' /usr/lib/python2.7/site-packages/PIL/IcnsImagePlugin.pyc imports=[('PIL', 0, 1, -1), ('PIL.PngImagePlugin', 0, 0, -1), ('struct', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('sys', 0, 1, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('PIL.Jpeg2KImagePlugin', 0, 1, -1), ('os', 0, 1, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
PIL.IptcImagePlugin: None -> <PyModule 'PIL.IptcImagePlugin' /usr/lib/python2.7/site-packages/PIL/IptcImagePlugin.pyc imports=[('PIL', 1, 0, -1), ('__future__.print_function', 0, 0, -1), ('os', 0, 0, -1), ('PIL.JpegImagePlugin', 1, 0, -1), ('__future__', 0, 0, -1), ('PIL', 0, 0, -1), ('io', 1, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('tempfile', 0, 0, -1), ('PIL.TiffImagePlugin', 1, 0, -1)] binaries=[] datas=[]>
PIL.Hdf5StubImagePlugin: None -> <PyModule 'PIL.Hdf5StubImagePlugin' /usr/lib/python2.7/site-packages/PIL/Hdf5StubImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.SpiderImagePlugin: None -> <PyModule 'PIL.SpiderImagePlugin' /usr/lib/python2.7/site-packages/PIL/SpiderImagePlugin.pyc imports=[('PIL', 1, 0, -1), ('__future__.print_function', 0, 0, -1), ('os', 0, 0, -1), ('struct', 0, 0, -1), ('__future__', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageTk', 1, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PIL.XVThumbImagePlugin: None -> <PyModule 'PIL.XVThumbImagePlugin' /usr/lib/python2.7/site-packages/PIL/XVThumbImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.PalmImagePlugin: None -> <PyModule 'PIL.PalmImagePlugin' /usr/lib/python2.7/site-packages/PIL/PalmImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.PsdImagePlugin: None -> <PyModule 'PIL.PsdImagePlugin' /usr/lib/python2.7/site-packages/PIL/PsdImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.MpegImagePlugin: None -> <PyModule 'PIL.MpegImagePlugin' /usr/lib/python2.7/site-packages/PIL/MpegImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL._binary.i8', 0, 0, -1)] binaries=[] datas=[]>
PIL.McIdasImagePlugin: None -> <PyModule 'PIL.McIdasImagePlugin' /usr/lib/python2.7/site-packages/PIL/McIdasImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('struct', 0, 0, -1)] binaries=[] datas=[]>
PIL.Jpeg2KImagePlugin: None -> <PyModule 'PIL.Jpeg2KImagePlugin' /usr/lib/python2.7/site-packages/PIL/Jpeg2KImagePlugin.pyc imports=[('os', 0, 0, -1), ('struct', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
PIL.PcxImagePlugin: None -> <PyModule 'PIL.PcxImagePlugin' /usr/lib/python2.7/site-packages/PIL/PcxImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.IcoImagePlugin: None -> <PyModule 'PIL.IcoImagePlugin' /usr/lib/python2.7/site-packages/PIL/IcoImagePlugin.pyc imports=[('PIL.PngImagePlugin', 0, 0, -1), ('math', 0, 0, -1), ('struct', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.BmpImagePlugin', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1), ('math.log', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('io.BytesIO', 0, 0, -1), ('math.ceil', 0, 0, -1), ('io', 0, 0, -1)] binaries=[] datas=[]>
PIL.DcxImagePlugin: None -> <PyModule 'PIL.DcxImagePlugin' /usr/lib/python2.7/site-packages/PIL/DcxImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.PcxImagePlugin.PcxImageFile', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.PcxImagePlugin', 0, 0, -1)] binaries=[] datas=[]>
PIL.MspImagePlugin: None -> <PyModule 'PIL.MspImagePlugin' /usr/lib/python2.7/site-packages/PIL/MspImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.PixarImagePlugin: None -> <PyModule 'PIL.PixarImagePlugin' /usr/lib/python2.7/site-packages/PIL/PixarImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.GbrImagePlugin: None -> <PyModule 'PIL.GbrImagePlugin' /usr/lib/python2.7/site-packages/PIL/GbrImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
PIL.SunImagePlugin: None -> <PyModule 'PIL.SunImagePlugin' /usr/lib/python2.7/site-packages/PIL/SunImagePlugin.pyc imports=[('PIL.Image', 0, 0, -1), ('PIL', 0, 0, -1), ('PIL.ImagePalette', 0, 0, -1), ('PIL._binary', 0, 0, -1), ('PIL.ImageFile', 0, 0, -1)] binaries=[] datas=[]>
ImageFile: None -> <PyModule 'ImageFile' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/ImageFile.pyc imports=[('traceback', 0, 0, -1), ('os', 0, 0, -1), ('mmap', 1, 1, -1), ('Image', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
GimpGradientFile: None -> <PyModule 'GimpGradientFile' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/GimpGradientFile.pyc imports=[('math.pi', 0, 0, -1), ('math', 0, 0, -1), ('string', 0, 0, -1), ('math.sqrt', 0, 0, -1), ('math.log', 0, 0, -1), ('math.sin', 0, 0, -1)] binaries=[] datas=[]>
GimpPaletteFile: None -> <PyModule 'GimpPaletteFile' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/GimpPaletteFile.pyc imports=[('re', 0, 0, -1), ('string', 0, 0, -1)] binaries=[] datas=[]>
PaletteFile: None -> <PyModule 'PaletteFile' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/PaletteFile.pyc imports=[('string', 0, 0, -1)] binaries=[] datas=[]>
ICCProfile: None -> None
  DEL ICCProfile
TiffImagePlugin: None -> <PyModule 'TiffImagePlugin' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/TiffImagePlugin.pyc imports=[('ImagePalette', 0, 0, -1), ('ImageFile', 0, 0, -1), ('array', 0, 0, -1), ('string', 0, 0, -1), ('Image', 0, 0, -1), ('TiffTags', 1, 1, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
TiffTags: None -> <PyModule 'TiffTags' /usr/lib/python2.7/site-packages/PIL-1.1.7-py2.7-linux-x86_64.egg/TiffTags.pyc imports=[] binaries=[] datas=[]>
_imaging_gif: None -> None
  DEL _imaging_gif
PIL.OleFileIO: None -> <PyModule 'PIL.OleFileIO' /usr/lib/python2.7/site-packages/PIL/OleFileIO.pyc imports=[('__future__.print_function', 0, 0, -1), ('os.path', 0, 0, -1), ('array', 0, 0, -1), ('struct', 0, 0, -1), ('__future__', 0, 0, -1), ('datetime', 0, 0, -1), ('io', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PIL.datetime: None -> None
PIL._webp: None -> <ExtensionModule 'PIL._webp' /usr/lib/python2.7/site-packages/PIL/_webp.so imports=[] binaries=[] datas=[]>
PIL.distutils: None -> None
PIL.shutil: None -> None
PIL.ImageTk: None -> <PyModule 'PIL.ImageTk' /usr/lib/python2.7/site-packages/PIL/ImageTk.pyc imports=[('PIL._imagingtk', 1, 1, -1), ('Tkinter', 0, 1, -1), ('PIL', 1, 1, -1), ('PIL', 0, 0, -1), ('tkinter', 0, 0, -1), ('PIL.Image', 0, 0, -1), ('io.BytesIO', 1, 1, -1), ('io', 1, 1, -1)] binaries=[] datas=[]>
PIL._imagingtk: None -> <ExtensionModule 'PIL._imagingtk' /usr/lib/python2.7/site-packages/PIL/_imagingtk.so imports=[] binaries=[] datas=[]>
PIL.Tkinter: None -> None
Tkinter: None -> <PyModule 'Tkinter' /usr/lib/python2.7/lib-tk/Tkinter.pyc imports=[('Tkconstants.*', 0, 0, -1), ('re', 0, 0, -1), ('types.*', 0, 0, -1), ('types', 0, 0, -1), ('os', 1, 1, -1), ('_tkinter', 0, 0, -1), ('Tkconstants', 0, 0, -1), ('sys', 1, 0, -1), ('warnings', 1, 0, -1), ('traceback', 1, 0, -1), ('os', 1, 0, -1), ('FixTk', 0, 1, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
PIL.tkinter: None -> None
tkinter: None -> None
  DEL tkinter
Tkconstants: None -> <PyModule 'Tkconstants' /usr/lib/python2.7/lib-tk/Tkconstants.pyc imports=[] binaries=[] datas=[]>
_tkinter: None -> <ExtensionModule '_tkinter' /usr/lib/python2.7/lib-dynload/_tkinter.so imports=[] binaries=[] datas=[('_MEI/tcl/tclAppInit.c', '/usr/lib/tcl8.6/tclAppInit.c', 'DATA'), ('_MEI/tcl/auto.tcl', '/usr/lib/tcl8.6/auto.tcl', 'DATA'), ('_MEI/tcl/parray.tcl', '/usr/lib/tcl8.6/parray.tcl', 'DATA'), ('_MEI/tcl/word.tcl', '/usr/lib/tcl8.6/word.tcl', 'DATA'), ('_MEI/tcl/package.tcl', '/usr/lib/tcl8.6/package.tcl', 'DATA'), ('_MEI/tcl/tm.tcl', '/usr/lib/tcl8.6/tm.tcl', 'DATA'), ('_MEI/tcl/tclIndex', '/usr/lib/tcl8.6/tclIndex', 'DATA'), ('_MEI/tcl/history.tcl', '/usr/lib/tcl8.6/history.tcl', 'DATA'), ('_MEI/tcl/clock.tcl', '/usr/lib/tcl8.6/clock.tcl', 'DATA'), ('_MEI/tcl/safe.tcl', '/usr/lib/tcl8.6/safe.tcl', 'DATA'), ('_MEI/tcl/init.tcl', '/usr/lib/tcl8.6/init.tcl', 'DATA'), ('_MEI/tcl/encoding/jis0208.enc', '/usr/lib/tcl8.6/encoding/jis0208.enc', 'DATA'), ('_MEI/tcl/encoding/dingbats.enc', '/usr/lib/tcl8.6/encoding/dingbats.enc', 'DATA'), ('_MEI/tcl/encoding/macThai.enc', '/usr/lib/tcl8.6/encoding/macThai.enc', 'DATA'), ('_MEI/tcl/encoding/macJapan.enc', '/usr/lib/tcl8.6/encoding/macJapan.enc', 'DATA'), ('_MEI/tcl/encoding/cp1256.enc', '/usr/lib/tcl8.6/encoding/cp1256.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-3.enc', '/usr/lib/tcl8.6/encoding/iso8859-3.enc', 'DATA'), ('_MEI/tcl/encoding/iso2022-jp.enc', '/usr/lib/tcl8.6/encoding/iso2022-jp.enc', 'DATA'), ('_MEI/tcl/encoding/gb2312.enc', '/usr/lib/tcl8.6/encoding/gb2312.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-7.enc', '/usr/lib/tcl8.6/encoding/iso8859-7.enc', 'DATA'), ('_MEI/tcl/encoding/macCyrillic.enc', '/usr/lib/tcl8.6/encoding/macCyrillic.enc', 'DATA'), ('_MEI/tcl/encoding/macCroatian.enc', '/usr/lib/tcl8.6/encoding/macCroatian.enc', 'DATA'), ('_MEI/tcl/encoding/euc-kr.enc', '/usr/lib/tcl8.6/encoding/euc-kr.enc', 'DATA'), ('_MEI/tcl/encoding/big5.enc', '/usr/lib/tcl8.6/encoding/big5.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-14.enc', '/usr/lib/tcl8.6/encoding/iso8859-14.enc', 'DATA'), ('_MEI/tcl/encoding/cp775.enc', '/usr/lib/tcl8.6/encoding/cp775.enc', 'DATA'), ('_MEI/tcl/encoding/cp850.enc', '/usr/lib/tcl8.6/encoding/cp850.enc', 'DATA'), ('_MEI/tcl/encoding/gb1988.enc', '/usr/lib/tcl8.6/encoding/gb1988.enc', 'DATA'), ('_MEI/tcl/encoding/cp1258.enc', '/usr/lib/tcl8.6/encoding/cp1258.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-9.enc', '/usr/lib/tcl8.6/encoding/iso8859-9.enc', 'DATA'), ('_MEI/tcl/encoding/cp1255.enc', '/usr/lib/tcl8.6/encoding/cp1255.enc', 'DATA'), ('_MEI/tcl/encoding/macUkraine.enc', '/usr/lib/tcl8.6/encoding/macUkraine.enc', 'DATA'), ('_MEI/tcl/encoding/symbol.enc', '/usr/lib/tcl8.6/encoding/symbol.enc', 'DATA'), ('_MEI/tcl/encoding/gb2312-raw.enc', '/usr/lib/tcl8.6/encoding/gb2312-raw.enc', 'DATA'), ('_MEI/tcl/encoding/cp866.enc', '/usr/lib/tcl8.6/encoding/cp866.enc', 'DATA'), ('_MEI/tcl/encoding/cp1250.enc', '/usr/lib/tcl8.6/encoding/cp1250.enc', 'DATA'), ('_MEI/tcl/encoding/cp861.enc', '/usr/lib/tcl8.6/encoding/cp861.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-10.enc', '/usr/lib/tcl8.6/encoding/iso8859-10.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-15.enc', '/usr/lib/tcl8.6/encoding/iso8859-15.enc', 'DATA'), ('_MEI/tcl/encoding/jis0212.enc', '/usr/lib/tcl8.6/encoding/jis0212.enc', 'DATA'), ('_MEI/tcl/encoding/macGreek.enc', '/usr/lib/tcl8.6/encoding/macGreek.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-6.enc', '/usr/lib/tcl8.6/encoding/iso8859-6.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-8.enc', '/usr/lib/tcl8.6/encoding/iso8859-8.enc', 'DATA'), ('_MEI/tcl/encoding/macTurkish.enc', '/usr/lib/tcl8.6/encoding/macTurkish.enc', 'DATA'), ('_MEI/tcl/encoding/shiftjis.enc', '/usr/lib/tcl8.6/encoding/shiftjis.enc', 'DATA'), ('_MEI/tcl/encoding/jis0201.enc', '/usr/lib/tcl8.6/encoding/jis0201.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-16.enc', '/usr/lib/tcl8.6/encoding/iso8859-16.enc', 'DATA'), ('_MEI/tcl/encoding/koi8-r.enc', '/usr/lib/tcl8.6/encoding/koi8-r.enc', 'DATA'), ('_MEI/tcl/encoding/euc-jp.enc', '/usr/lib/tcl8.6/encoding/euc-jp.enc', 'DATA'), ('_MEI/tcl/encoding/cp857.enc', '/usr/lib/tcl8.6/encoding/cp857.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-2.enc', '/usr/lib/tcl8.6/encoding/iso8859-2.enc', 'DATA'), ('_MEI/tcl/encoding/cp874.enc', '/usr/lib/tcl8.6/encoding/cp874.enc', 'DATA'), ('_MEI/tcl/encoding/ebcdic.enc', '/usr/lib/tcl8.6/encoding/ebcdic.enc', 'DATA'), ('_MEI/tcl/encoding/cp437.enc', '/usr/lib/tcl8.6/encoding/cp437.enc', 'DATA'), ('_MEI/tcl/encoding/ascii.enc', '/usr/lib/tcl8.6/encoding/ascii.enc', 'DATA'), ('_MEI/tcl/encoding/cp869.enc', '/usr/lib/tcl8.6/encoding/cp869.enc', 'DATA'), ('_MEI/tcl/encoding/macRomania.enc', '/usr/lib/tcl8.6/encoding/macRomania.enc', 'DATA'), ('_MEI/tcl/encoding/cp950.enc', '/usr/lib/tcl8.6/encoding/cp950.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-4.enc', '/usr/lib/tcl8.6/encoding/iso8859-4.enc', 'DATA'), ('_MEI/tcl/encoding/iso2022-kr.enc', '/usr/lib/tcl8.6/encoding/iso2022-kr.enc', 'DATA'), ('_MEI/tcl/encoding/ksc5601.enc', '/usr/lib/tcl8.6/encoding/ksc5601.enc', 'DATA'), ('_MEI/tcl/encoding/macIceland.enc', '/usr/lib/tcl8.6/encoding/macIceland.enc', 'DATA'), ('_MEI/tcl/encoding/iso2022.enc', '/usr/lib/tcl8.6/encoding/iso2022.enc', 'DATA'), ('_MEI/tcl/encoding/cp1252.enc', '/usr/lib/tcl8.6/encoding/cp1252.enc', 'DATA'), ('_MEI/tcl/encoding/cp737.enc', '/usr/lib/tcl8.6/encoding/cp737.enc', 'DATA'), ('_MEI/tcl/encoding/cp863.enc', '/usr/lib/tcl8.6/encoding/cp863.enc', 'DATA'), ('_MEI/tcl/encoding/cp855.enc', '/usr/lib/tcl8.6/encoding/cp855.enc', 'DATA'), ('_MEI/tcl/encoding/cp936.enc', '/usr/lib/tcl8.6/encoding/cp936.enc', 'DATA'), ('_MEI/tcl/encoding/koi8-u.enc', '/usr/lib/tcl8.6/encoding/koi8-u.enc', 'DATA'), ('_MEI/tcl/encoding/cp932.enc', '/usr/lib/tcl8.6/encoding/cp932.enc', 'DATA'), ('_MEI/tcl/encoding/cp865.enc', '/usr/lib/tcl8.6/encoding/cp865.enc', 'DATA'), ('_MEI/tcl/encoding/tis-620.enc', '/usr/lib/tcl8.6/encoding/tis-620.enc', 'DATA'), ('_MEI/tcl/encoding/cp1251.enc', '/usr/lib/tcl8.6/encoding/cp1251.enc', 'DATA'), ('_MEI/tcl/encoding/gb12345.enc', '/usr/lib/tcl8.6/encoding/gb12345.enc', 'DATA'), ('_MEI/tcl/encoding/cp1254.enc', '/usr/lib/tcl8.6/encoding/cp1254.enc', 'DATA'), ('_MEI/tcl/encoding/euc-cn.enc', '/usr/lib/tcl8.6/encoding/euc-cn.enc', 'DATA'), ('_MEI/tcl/encoding/cp1253.enc', '/usr/lib/tcl8.6/encoding/cp1253.enc', 'DATA'), ('_MEI/tcl/encoding/cp862.enc', '/usr/lib/tcl8.6/encoding/cp862.enc', 'DATA'), ('_MEI/tcl/encoding/macCentEuro.enc', '/usr/lib/tcl8.6/encoding/macCentEuro.enc', 'DATA'), ('_MEI/tcl/encoding/macRoman.enc', '/usr/lib/tcl8.6/encoding/macRoman.enc', 'DATA'), ('_MEI/tcl/encoding/cp864.enc', '/usr/lib/tcl8.6/encoding/cp864.enc', 'DATA'), ('_MEI/tcl/encoding/cp852.enc', '/usr/lib/tcl8.6/encoding/cp852.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-1.enc', '/usr/lib/tcl8.6/encoding/iso8859-1.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-13.enc', '/usr/lib/tcl8.6/encoding/iso8859-13.enc', 'DATA'), ('_MEI/tcl/encoding/cp860.enc', '/usr/lib/tcl8.6/encoding/cp860.enc', 'DATA'), ('_MEI/tcl/encoding/cp949.enc', '/usr/lib/tcl8.6/encoding/cp949.enc', 'DATA'), ('_MEI/tcl/encoding/cp1257.enc', '/usr/lib/tcl8.6/encoding/cp1257.enc', 'DATA'), ('_MEI/tcl/encoding/macDingbats.enc', '/usr/lib/tcl8.6/encoding/macDingbats.enc', 'DATA'), ('_MEI/tcl/encoding/iso8859-5.enc', '/usr/lib/tcl8.6/encoding/iso8859-5.enc', 'DATA'), ('_MEI/tcl/opt0.4/optparse.tcl', '/usr/lib/tcl8.6/opt0.4/optparse.tcl', 'DATA'), ('_MEI/tcl/opt0.4/pkgIndex.tcl', '/usr/lib/tcl8.6/opt0.4/pkgIndex.tcl', 'DATA'), ('_MEI/tcl/msgs/kw_gb.msg', '/usr/lib/tcl8.6/msgs/kw_gb.msg', 'DATA'), ('_MEI/tcl/msgs/it_ch.msg', '/usr/lib/tcl8.6/msgs/it_ch.msg', 'DATA'), ('_MEI/tcl/msgs/tr.msg', '/usr/lib/tcl8.6/msgs/tr.msg', 'DATA'), ('_MEI/tcl/msgs/de_at.msg', '/usr/lib/tcl8.6/msgs/de_at.msg', 'DATA'), ('_MEI/tcl/msgs/sr.msg', '/usr/lib/tcl8.6/msgs/sr.msg', 'DATA'), ('_MEI/tcl/msgs/es_ni.msg', '/usr/lib/tcl8.6/msgs/es_ni.msg', 'DATA'), ('_MEI/tcl/msgs/zh.msg', '/usr/lib/tcl8.6/msgs/zh.msg', 'DATA'), ('_MEI/tcl/msgs/en_bw.msg', '/usr/lib/tcl8.6/msgs/en_bw.msg', 'DATA'), ('_MEI/tcl/msgs/ja.msg', '/usr/lib/tcl8.6/msgs/ja.msg', 'DATA'), ('_MEI/tcl/msgs/es_pe.msg', '/usr/lib/tcl8.6/msgs/es_pe.msg', 'DATA'), ('_MEI/tcl/msgs/ar_sy.msg', '/usr/lib/tcl8.6/msgs/ar_sy.msg', 'DATA'), ('_MEI/tcl/msgs/el.msg', '/usr/lib/tcl8.6/msgs/el.msg', 'DATA'), ('_MEI/tcl/msgs/en_be.msg', '/usr/lib/tcl8.6/msgs/en_be.msg', 'DATA'), ('_MEI/tcl/msgs/eo.msg', '/usr/lib/tcl8.6/msgs/eo.msg', 'DATA'), ('_MEI/tcl/msgs/ms_my.msg', '/usr/lib/tcl8.6/msgs/ms_my.msg', 'DATA'), ('_MEI/tcl/msgs/id_id.msg', '/usr/lib/tcl8.6/msgs/id_id.msg', 'DATA'), ('_MEI/tcl/msgs/lv.msg', '/usr/lib/tcl8.6/msgs/lv.msg', 'DATA'), ('_MEI/tcl/msgs/en_zw.msg', '/usr/lib/tcl8.6/msgs/en_zw.msg', 'DATA'), ('_MEI/tcl/msgs/te.msg', '/usr/lib/tcl8.6/msgs/te.msg', 'DATA'), ('_MEI/tcl/msgs/fo_fo.msg', '/usr/lib/tcl8.6/msgs/fo_fo.msg', 'DATA'), ('_MEI/tcl/msgs/nb.msg', '/usr/lib/tcl8.6/msgs/nb.msg', 'DATA'), ('_MEI/tcl/msgs/lt.msg', '/usr/lib/tcl8.6/msgs/lt.msg', 'DATA'), ('_MEI/tcl/msgs/fa_ir.msg', '/usr/lib/tcl8.6/msgs/fa_ir.msg', 'DATA'), ('_MEI/tcl/msgs/es_pa.msg', '/usr/lib/tcl8.6/msgs/es_pa.msg', 'DATA'), ('_MEI/tcl/msgs/es_sv.msg', '/usr/lib/tcl8.6/msgs/es_sv.msg', 'DATA'), ('_MEI/tcl/msgs/fr.msg', '/usr/lib/tcl8.6/msgs/fr.msg', 'DATA'), ('_MEI/tcl/msgs/es_bo.msg', '/usr/lib/tcl8.6/msgs/es_bo.msg', 'DATA'), ('_MEI/tcl/msgs/de.msg', '/usr/lib/tcl8.6/msgs/de.msg', 'DATA'), ('_MEI/tcl/msgs/en_au.msg', '/usr/lib/tcl8.6/msgs/en_au.msg', 'DATA'), ('_MEI/tcl/msgs/fa.msg', '/usr/lib/tcl8.6/msgs/fa.msg', 'DATA'), ('_MEI/tcl/msgs/sk.msg', '/usr/lib/tcl8.6/msgs/sk.msg', 'DATA'), ('_MEI/tcl/msgs/eu_es.msg', '/usr/lib/tcl8.6/msgs/eu_es.msg', 'DATA'), ('_MEI/tcl/msgs/es_py.msg', '/usr/lib/tcl8.6/msgs/es_py.msg', 'DATA'), ('_MEI/tcl/msgs/zh_tw.msg', '/usr/lib/tcl8.6/msgs/zh_tw.msg', 'DATA'), ('_MEI/tcl/msgs/ko_kr.msg', '/usr/lib/tcl8.6/msgs/ko_kr.msg', 'DATA'), ('_MEI/tcl/msgs/af.msg', '/usr/lib/tcl8.6/msgs/af.msg', 'DATA'), ('_MEI/tcl/msgs/gv.msg', '/usr/lib/tcl8.6/msgs/gv.msg', 'DATA'), ('_MEI/tcl/msgs/en_ie.msg', '/usr/lib/tcl8.6/msgs/en_ie.msg', 'DATA'), ('_MEI/tcl/msgs/es_co.msg', '/usr/lib/tcl8.6/msgs/es_co.msg', 'DATA'), ('_MEI/tcl/msgs/pt_br.msg', '/usr/lib/tcl8.6/msgs/pt_br.msg', 'DATA'), ('_MEI/tcl/msgs/sq.msg', '/usr/lib/tcl8.6/msgs/sq.msg', 'DATA'), ('_MEI/tcl/msgs/be.msg', '/usr/lib/tcl8.6/msgs/be.msg', 'DATA'), ('_MEI/tcl/msgs/da.msg', '/usr/lib/tcl8.6/msgs/da.msg', 'DATA'), ('_MEI/tcl/msgs/en_ca.msg', '/usr/lib/tcl8.6/msgs/en_ca.msg', 'DATA'), ('_MEI/tcl/msgs/mt.msg', '/usr/lib/tcl8.6/msgs/mt.msg', 'DATA'), ('_MEI/tcl/msgs/en_ph.msg', '/usr/lib/tcl8.6/msgs/en_ph.msg', 'DATA'), ('_MEI/tcl/msgs/es_uy.msg', '/usr/lib/tcl8.6/msgs/es_uy.msg', 'DATA'), ('_MEI/tcl/msgs/bg.msg', '/usr/lib/tcl8.6/msgs/bg.msg', 'DATA'), ('_MEI/tcl/msgs/he.msg', '/usr/lib/tcl8.6/msgs/he.msg', 'DATA'), ('_MEI/tcl/msgs/ta.msg', '/usr/lib/tcl8.6/msgs/ta.msg', 'DATA'), ('_MEI/tcl/msgs/fo.msg', '/usr/lib/tcl8.6/msgs/fo.msg', 'DATA'), ('_MEI/tcl/msgs/eu.msg', '/usr/lib/tcl8.6/msgs/eu.msg', 'DATA'), ('_MEI/tcl/msgs/es_ar.msg', '/usr/lib/tcl8.6/msgs/es_ar.msg', 'DATA'), ('_MEI/tcl/msgs/kl_gl.msg', '/usr/lib/tcl8.6/msgs/kl_gl.msg', 'DATA'), ('_MEI/tcl/msgs/es_hn.msg', '/usr/lib/tcl8.6/msgs/es_hn.msg', 'DATA'), ('_MEI/tcl/msgs/it.msg', '/usr/lib/tcl8.6/msgs/it.msg', 'DATA'), ('_MEI/tcl/msgs/nl_be.msg', '/usr/lib/tcl8.6/msgs/nl_be.msg', 'DATA'), ('_MEI/tcl/msgs/en_hk.msg', '/usr/lib/tcl8.6/msgs/en_hk.msg', 'DATA'), ('_MEI/tcl/msgs/ar.msg', '/usr/lib/tcl8.6/msgs/ar.msg', 'DATA'), ('_MEI/tcl/msgs/ko.msg', '/usr/lib/tcl8.6/msgs/ko.msg', 'DATA'), ('_MEI/tcl/msgs/kok_in.msg', '/usr/lib/tcl8.6/msgs/kok_in.msg', 'DATA'), ('_MEI/tcl/msgs/es.msg', '/usr/lib/tcl8.6/msgs/es.msg', 'DATA'), ('_MEI/tcl/msgs/en_sg.msg', '/usr/lib/tcl8.6/msgs/en_sg.msg', 'DATA'), ('_MEI/tcl/msgs/zh_cn.msg', '/usr/lib/tcl8.6/msgs/zh_cn.msg', 'DATA'), ('_MEI/tcl/msgs/kok.msg', '/usr/lib/tcl8.6/msgs/kok.msg', 'DATA'), ('_MEI/tcl/msgs/fr_ca.msg', '/usr/lib/tcl8.6/msgs/fr_ca.msg', 'DATA'), ('_MEI/tcl/msgs/ta_in.msg', '/usr/lib/tcl8.6/msgs/ta_in.msg', 'DATA'), ('_MEI/tcl/msgs/hu.msg', '/usr/lib/tcl8.6/msgs/hu.msg', 'DATA'), ('_MEI/tcl/msgs/uk.msg', '/usr/lib/tcl8.6/msgs/uk.msg', 'DATA'), ('_MEI/tcl/msgs/de_be.msg', '/usr/lib/tcl8.6/msgs/de_be.msg', 'DATA'), ('_MEI/tcl/msgs/kl.msg', '/usr/lib/tcl8.6/msgs/kl.msg', 'DATA'), ('_MEI/tcl/msgs/gl.msg', '/usr/lib/tcl8.6/msgs/gl.msg', 'DATA'), ('_MEI/tcl/msgs/sl.msg', '/usr/lib/tcl8.6/msgs/sl.msg', 'DATA'), ('_MEI/tcl/msgs/ar_jo.msg', '/usr/lib/tcl8.6/msgs/ar_jo.msg', 'DATA'), ('_MEI/tcl/msgs/ga.msg', '/usr/lib/tcl8.6/msgs/ga.msg', 'DATA'), ('_MEI/tcl/msgs/fr_be.msg', '/usr/lib/tcl8.6/msgs/fr_be.msg', 'DATA'), ('_MEI/tcl/msgs/vi.msg', '/usr/lib/tcl8.6/msgs/vi.msg', 'DATA'), ('_MEI/tcl/msgs/es_pr.msg', '/usr/lib/tcl8.6/msgs/es_pr.msg', 'DATA'), ('_MEI/tcl/msgs/ro.msg', '/usr/lib/tcl8.6/msgs/ro.msg', 'DATA'), ('_MEI/tcl/msgs/th.msg', '/usr/lib/tcl8.6/msgs/th.msg', 'DATA'), ('_MEI/tcl/msgs/hr.msg', '/usr/lib/tcl8.6/msgs/hr.msg', 'DATA'), ('_MEI/tcl/msgs/en_gb.msg', '/usr/lib/tcl8.6/msgs/en_gb.msg', 'DATA'), ('_MEI/tcl/msgs/en_in.msg', '/usr/lib/tcl8.6/msgs/en_in.msg', 'DATA'), ('_MEI/tcl/msgs/zh_hk.msg', '/usr/lib/tcl8.6/msgs/zh_hk.msg', 'DATA'), ('_MEI/tcl/msgs/es_cl.msg', '/usr/lib/tcl8.6/msgs/es_cl.msg', 'DATA'), ('_MEI/tcl/msgs/is.msg', '/usr/lib/tcl8.6/msgs/is.msg', 'DATA'), ('_MEI/tcl/msgs/te_in.msg', '/usr/lib/tcl8.6/msgs/te_in.msg', 'DATA'), ('_MEI/tcl/msgs/bn_in.msg', '/usr/lib/tcl8.6/msgs/bn_in.msg', 'DATA'), ('_MEI/tcl/msgs/et.msg', '/usr/lib/tcl8.6/msgs/et.msg', 'DATA'), ('_MEI/tcl/msgs/nn.msg', '/usr/lib/tcl8.6/msgs/nn.msg', 'DATA'), ('_MEI/tcl/msgs/es_ve.msg', '/usr/lib/tcl8.6/msgs/es_ve.msg', 'DATA'), ('_MEI/tcl/msgs/ar_in.msg', '/usr/lib/tcl8.6/msgs/ar_in.msg', 'DATA'), ('_MEI/tcl/msgs/ms.msg', '/usr/lib/tcl8.6/msgs/ms.msg', 'DATA'), ('_MEI/tcl/msgs/sw.msg', '/usr/lib/tcl8.6/msgs/sw.msg', 'DATA'), ('_MEI/tcl/msgs/en_nz.msg', '/usr/lib/tcl8.6/msgs/en_nz.msg', 'DATA'), ('_MEI/tcl/msgs/ru.msg', '/usr/lib/tcl8.6/msgs/ru.msg', 'DATA'), ('_MEI/tcl/msgs/es_gt.msg', '/usr/lib/tcl8.6/msgs/es_gt.msg', 'DATA'), ('_MEI/tcl/msgs/ru_ua.msg', '/usr/lib/tcl8.6/msgs/ru_ua.msg', 'DATA'), ('_MEI/tcl/msgs/mk.msg', '/usr/lib/tcl8.6/msgs/mk.msg', 'DATA'), ('_MEI/tcl/msgs/kw.msg', '/usr/lib/tcl8.6/msgs/kw.msg', 'DATA'), ('_MEI/tcl/msgs/es_cr.msg', '/usr/lib/tcl8.6/msgs/es_cr.msg', 'DATA'), ('_MEI/tcl/msgs/sh.msg', '/usr/lib/tcl8.6/msgs/sh.msg', 'DATA'), ('_MEI/tcl/msgs/ca.msg', '/usr/lib/tcl8.6/msgs/ca.msg', 'DATA'), ('_MEI/tcl/msgs/gv_gb.msg', '/usr/lib/tcl8.6/msgs/gv_gb.msg', 'DATA'), ('_MEI/tcl/msgs/id.msg', '/usr/lib/tcl8.6/msgs/id.msg', 'DATA'), ('_MEI/tcl/msgs/es_do.msg', '/usr/lib/tcl8.6/msgs/es_do.msg', 'DATA'), ('_MEI/tcl/msgs/en_za.msg', '/usr/lib/tcl8.6/msgs/en_za.msg', 'DATA'), ('_MEI/tcl/msgs/hi.msg', '/usr/lib/tcl8.6/msgs/hi.msg', 'DATA'), ('_MEI/tcl/msgs/hi_in.msg', '/usr/lib/tcl8.6/msgs/hi_in.msg', 'DATA'), ('_MEI/tcl/msgs/sv.msg', '/usr/lib/tcl8.6/msgs/sv.msg', 'DATA'), ('_MEI/tcl/msgs/zh_sg.msg', '/usr/lib/tcl8.6/msgs/zh_sg.msg', 'DATA'), ('_MEI/tcl/msgs/mr.msg', '/usr/lib/tcl8.6/msgs/mr.msg', 'DATA'), ('_MEI/tcl/msgs/fr_ch.msg', '/usr/lib/tcl8.6/msgs/fr_ch.msg', 'DATA'), ('_MEI/tcl/msgs/gl_es.msg', '/usr/lib/tcl8.6/msgs/gl_es.msg', 'DATA'), ('_MEI/tcl/msgs/nl.msg', '/usr/lib/tcl8.6/msgs/nl.msg', 'DATA'), ('_MEI/tcl/msgs/fa_in.msg', '/usr/lib/tcl8.6/msgs/fa_in.msg', 'DATA'), ('_MEI/tcl/msgs/es_ec.msg', '/usr/lib/tcl8.6/msgs/es_ec.msg', 'DATA'), ('_MEI/tcl/msgs/fi.msg', '/usr/lib/tcl8.6/msgs/fi.msg', 'DATA'), ('_MEI/tcl/msgs/ar_lb.msg', '/usr/lib/tcl8.6/msgs/ar_lb.msg', 'DATA'), ('_MEI/tcl/msgs/cs.msg', '/usr/lib/tcl8.6/msgs/cs.msg', 'DATA'), ('_MEI/tcl/msgs/bn.msg', '/usr/lib/tcl8.6/msgs/bn.msg', 'DATA'), ('_MEI/tcl/msgs/pt.msg', '/usr/lib/tcl8.6/msgs/pt.msg', 'DATA'), ('_MEI/tcl/msgs/af_za.msg', '/usr/lib/tcl8.6/msgs/af_za.msg', 'DATA'), ('_MEI/tcl/msgs/ga_ie.msg', '/usr/lib/tcl8.6/msgs/ga_ie.msg', 'DATA'), ('_MEI/tcl/msgs/pl.msg', '/usr/lib/tcl8.6/msgs/pl.msg', 'DATA'), ('_MEI/tcl/msgs/mr_in.msg', '/usr/lib/tcl8.6/msgs/mr_in.msg', 'DATA'), ('_MEI/tcl/msgs/es_mx.msg', '/usr/lib/tcl8.6/msgs/es_mx.msg', 'DATA'), ('_MEI/tcl/http1.0/http.tcl', '/usr/lib/tcl8.6/http1.0/http.tcl', 'DATA'), ('_MEI/tcl/http1.0/pkgIndex.tcl', '/usr/lib/tcl8.6/http1.0/pkgIndex.tcl', 'DATA'), ('_MEI/tk/palette.tcl', '/usr/lib/tk8.6/palette.tcl', 'DATA'), ('_MEI/tk/choosedir.tcl', '/usr/lib/tk8.6/choosedir.tcl', 'DATA'), ('_MEI/tk/clrpick.tcl', '/usr/lib/tk8.6/clrpick.tcl', 'DATA'), ('_MEI/tk/xmfbox.tcl', '/usr/lib/tk8.6/xmfbox.tcl', 'DATA'), ('_MEI/tk/menu.tcl', '/usr/lib/tk8.6/menu.tcl', 'DATA'), ('_MEI/tk/scale.tcl', '/usr/lib/tk8.6/scale.tcl', 'DATA'), ('_MEI/tk/fontchooser.tcl', '/usr/lib/tk8.6/fontchooser.tcl', 'DATA'), ('_MEI/tk/dialog.tcl', '/usr/lib/tk8.6/dialog.tcl', 'DATA'), ('_MEI/tk/console.tcl', '/usr/lib/tk8.6/console.tcl', 'DATA'), ('_MEI/tk/listbox.tcl', '/usr/lib/tk8.6/listbox.tcl', 'DATA'), ('_MEI/tk/button.tcl', '/usr/lib/tk8.6/button.tcl', 'DATA'), ('_MEI/tk/obsolete.tcl', '/usr/lib/tk8.6/obsolete.tcl', 'DATA'), ('_MEI/tk/unsupported.tcl', '/usr/lib/tk8.6/unsupported.tcl', 'DATA'), ('_MEI/tk/text.tcl', '/usr/lib/tk8.6/text.tcl', 'DATA'), ('_MEI/tk/focus.tcl', '/usr/lib/tk8.6/focus.tcl', 'DATA'), ('_MEI/tk/entry.tcl', '/usr/lib/tk8.6/entry.tcl', 'DATA'), ('_MEI/tk/bgerror.tcl', '/usr/lib/tk8.6/bgerror.tcl', 'DATA'), ('_MEI/tk/tk.tcl', '/usr/lib/tk8.6/tk.tcl', 'DATA'), ('_MEI/tk/icons.tcl', '/usr/lib/tk8.6/icons.tcl', 'DATA'), ('_MEI/tk/scrlbar.tcl', '/usr/lib/tk8.6/scrlbar.tcl', 'DATA'), ('_MEI/tk/mkpsenc.tcl', '/usr/lib/tk8.6/mkpsenc.tcl', 'DATA'), ('_MEI/tk/safetk.tcl', '/usr/lib/tk8.6/safetk.tcl', 'DATA'), ('_MEI/tk/comdlg.tcl', '/usr/lib/tk8.6/comdlg.tcl', 'DATA'), ('_MEI/tk/optMenu.tcl', '/usr/lib/tk8.6/optMenu.tcl', 'DATA'), ('_MEI/tk/tkfbox.tcl', '/usr/lib/tk8.6/tkfbox.tcl', 'DATA'), ('_MEI/tk/panedwindow.tcl', '/usr/lib/tk8.6/panedwindow.tcl', 'DATA'), ('_MEI/tk/megawidget.tcl', '/usr/lib/tk8.6/megawidget.tcl', 'DATA'), ('_MEI/tk/iconlist.tcl', '/usr/lib/tk8.6/iconlist.tcl', 'DATA'), ('_MEI/tk/tkAppInit.c', '/usr/lib/tk8.6/tkAppInit.c', 'DATA'), ('_MEI/tk/spinbox.tcl', '/usr/lib/tk8.6/spinbox.tcl', 'DATA'), ('_MEI/tk/pkgIndex.tcl', '/usr/lib/tk8.6/pkgIndex.tcl', 'DATA'), ('_MEI/tk/tclIndex', '/usr/lib/tk8.6/tclIndex', 'DATA'), ('_MEI/tk/tearoff.tcl', '/usr/lib/tk8.6/tearoff.tcl', 'DATA'), ('_MEI/tk/msgbox.tcl', '/usr/lib/tk8.6/msgbox.tcl', 'DATA'), ('_MEI/tk/images/pwrdLogo175.gif', '/usr/lib/tk8.6/images/pwrdLogo175.gif', 'DATA'), ('_MEI/tk/images/pwrdLogo.eps', '/usr/lib/tk8.6/images/pwrdLogo.eps', 'DATA'), ('_MEI/tk/images/pwrdLogo100.gif', '/usr/lib/tk8.6/images/pwrdLogo100.gif', 'DATA'), ('_MEI/tk/images/lamp.svg', '/usr/lib/tk8.6/images/lamp.svg', 'DATA'), ('_MEI/tk/images/lamp.png', '/usr/lib/tk8.6/images/lamp.png', 'DATA'), ('_MEI/tk/images/logoLarge.gif', '/usr/lib/tk8.6/images/logoLarge.gif', 'DATA'), ('_MEI/tk/images/pwrdLogo150.gif', '/usr/lib/tk8.6/images/pwrdLogo150.gif', 'DATA'), ('_MEI/tk/images/logo100.gif', '/usr/lib/tk8.6/images/logo100.gif', 'DATA'), ('_MEI/tk/images/tai-ku.gif', '/usr/lib/tk8.6/images/tai-ku.gif', 'DATA'), ('_MEI/tk/images/logo.eps', '/usr/lib/tk8.6/images/logo.eps', 'DATA'), ('_MEI/tk/images/logo64.gif', '/usr/lib/tk8.6/images/logo64.gif', 'DATA'), ('_MEI/tk/images/README', '/usr/lib/tk8.6/images/README', 'DATA'), ('_MEI/tk/images/pwrdLogo75.gif', '/usr/lib/tk8.6/images/pwrdLogo75.gif', 'DATA'), ('_MEI/tk/images/pwrdLogo200.gif', '/usr/lib/tk8.6/images/pwrdLogo200.gif', 'DATA'), ('_MEI/tk/images/logoMed.gif', '/usr/lib/tk8.6/images/logoMed.gif', 'DATA'), ('_MEI/tk/msgs/el.msg', '/usr/lib/tk8.6/msgs/el.msg', 'DATA'), ('_MEI/tk/msgs/eo.msg', '/usr/lib/tk8.6/msgs/eo.msg', 'DATA'), ('_MEI/tk/msgs/fr.msg', '/usr/lib/tk8.6/msgs/fr.msg', 'DATA'), ('_MEI/tk/msgs/de.msg', '/usr/lib/tk8.6/msgs/de.msg', 'DATA'), ('_MEI/tk/msgs/en.msg', '/usr/lib/tk8.6/msgs/en.msg', 'DATA'), ('_MEI/tk/msgs/da.msg', '/usr/lib/tk8.6/msgs/da.msg', 'DATA'), ('_MEI/tk/msgs/it.msg', '/usr/lib/tk8.6/msgs/it.msg', 'DATA'), ('_MEI/tk/msgs/es.msg', '/usr/lib/tk8.6/msgs/es.msg', 'DATA'), ('_MEI/tk/msgs/hu.msg', '/usr/lib/tk8.6/msgs/hu.msg', 'DATA'), ('_MEI/tk/msgs/en_gb.msg', '/usr/lib/tk8.6/msgs/en_gb.msg', 'DATA'), ('_MEI/tk/msgs/ru.msg', '/usr/lib/tk8.6/msgs/ru.msg', 'DATA'), ('_MEI/tk/msgs/sv.msg', '/usr/lib/tk8.6/msgs/sv.msg', 'DATA'), ('_MEI/tk/msgs/nl.msg', '/usr/lib/tk8.6/msgs/nl.msg', 'DATA'), ('_MEI/tk/msgs/cs.msg', '/usr/lib/tk8.6/msgs/cs.msg', 'DATA'), ('_MEI/tk/msgs/pt.msg', '/usr/lib/tk8.6/msgs/pt.msg', 'DATA'), ('_MEI/tk/msgs/pl.msg', '/usr/lib/tk8.6/msgs/pl.msg', 'DATA'), ('_MEI/tk/ttk/altTheme.tcl', '/usr/lib/tk8.6/ttk/altTheme.tcl', 'DATA'), ('_MEI/tk/ttk/defaults.tcl', '/usr/lib/tk8.6/ttk/defaults.tcl', 'DATA'), ('_MEI/tk/ttk/utils.tcl', '/usr/lib/tk8.6/ttk/utils.tcl', 'DATA'), ('_MEI/tk/ttk/scale.tcl', '/usr/lib/tk8.6/ttk/scale.tcl', 'DATA'), ('_MEI/tk/ttk/aquaTheme.tcl', '/usr/lib/tk8.6/ttk/aquaTheme.tcl', 'DATA'), ('_MEI/tk/ttk/treeview.tcl', '/usr/lib/tk8.6/ttk/treeview.tcl', 'DATA'), ('_MEI/tk/ttk/cursors.tcl', '/usr/lib/tk8.6/ttk/cursors.tcl', 'DATA'), ('_MEI/tk/ttk/vistaTheme.tcl', '/usr/lib/tk8.6/ttk/vistaTheme.tcl', 'DATA'), ('_MEI/tk/ttk/xpTheme.tcl', '/usr/lib/tk8.6/ttk/xpTheme.tcl', 'DATA'), ('_MEI/tk/ttk/combobox.tcl', '/usr/lib/tk8.6/ttk/combobox.tcl', 'DATA'), ('_MEI/tk/ttk/sizegrip.tcl', '/usr/lib/tk8.6/ttk/sizegrip.tcl', 'DATA'), ('_MEI/tk/ttk/clamTheme.tcl', '/usr/lib/tk8.6/ttk/clamTheme.tcl', 'DATA'), ('_MEI/tk/ttk/button.tcl', '/usr/lib/tk8.6/ttk/button.tcl', 'DATA'), ('_MEI/tk/ttk/notebook.tcl', '/usr/lib/tk8.6/ttk/notebook.tcl', 'DATA'), ('_MEI/tk/ttk/entry.tcl', '/usr/lib/tk8.6/ttk/entry.tcl', 'DATA'), ('_MEI/tk/ttk/scrollbar.tcl', '/usr/lib/tk8.6/ttk/scrollbar.tcl', 'DATA'), ('_MEI/tk/ttk/panedwindow.tcl', '/usr/lib/tk8.6/ttk/panedwindow.tcl', 'DATA'), ('_MEI/tk/ttk/winTheme.tcl', '/usr/lib/tk8.6/ttk/winTheme.tcl', 'DATA'), ('_MEI/tk/ttk/ttk.tcl', '/usr/lib/tk8.6/ttk/ttk.tcl', 'DATA'), ('_MEI/tk/ttk/classicTheme.tcl', '/usr/lib/tk8.6/ttk/classicTheme.tcl', 'DATA'), ('_MEI/tk/ttk/spinbox.tcl', '/usr/lib/tk8.6/ttk/spinbox.tcl', 'DATA'), ('_MEI/tk/ttk/progress.tcl', '/usr/lib/tk8.6/ttk/progress.tcl', 'DATA'), ('_MEI/tk/ttk/menubutton.tcl', '/usr/lib/tk8.6/ttk/menubutton.tcl', 'DATA'), ('_MEI/tk/ttk/fonts.tcl', '/usr/lib/tk8.6/ttk/fonts.tcl', 'DATA')]>
FixTk: None -> <PyModule 'FixTk' /usr/lib/python2.7/lib-tk/FixTk.pyc imports=[('os', 0, 0, -1), ('_tkinter', 0, 1, -1), ('sys', 0, 0, -1), ('ctypes', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.codecs.__future__: None -> None
pyglet.image.codecs.s3tc: None -> <PyModule 'pyglet.image.codecs.s3tc' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/image/codecs/s3tc.pyc imports=[('ctypes', 0, 0, -1), ('re', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('pyglet.image.AbstractImage', 0, 0, -1), ('pyglet.gl.gl_info', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.image.Texture', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.CompressedImageData: None -> None
  DEL pyglet.image.CompressedImageData
pyglet.image.codecs.re: None -> None
pyglet.image.AbstractImage: None -> None
  DEL pyglet.image.AbstractImage
pyglet.image.Texture: None -> None
  DEL pyglet.image.Texture
pyglet.image.codecs.sys: None -> None
pyglet.window.carbon._oscheck: None -> None
  DEL pyglet.window.carbon._oscheck
pyglet.window.carbon.carbon: None -> None
  DEL pyglet.window.carbon.carbon
pyglet.window.carbon.quicktime: None -> None
  DEL pyglet.window.carbon.quicktime
pyglet.image.codecs.ImageDecodeException: None -> None
  DEL pyglet.image.codecs.ImageDecodeException
pyglet.image.ImageData: None -> None
  DEL pyglet.image.ImageData
pyglet.image.codecs.ImageDecoder: None -> None
  DEL pyglet.image.codecs.ImageDecoder
pyglet.image.ImageData: None -> None
  DEL pyglet.image.ImageData
pyglet.image.AnimationFrame: None -> None
  DEL pyglet.image.AnimationFrame
pyglet.image.Animation: None -> None
  DEL pyglet.image.Animation
pyglet.font.ctypes: None -> None
pyglet.libs.darwin._oscheck: None -> None
  DEL pyglet.libs.darwin._oscheck
pyglet.libs.win32._gdi32: None -> None
  DEL pyglet.libs.win32._gdi32
pyglet.font.win32query: None -> <PyModule 'pyglet.font.win32query' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/win32query.pyc imports=[('sys', 0, 1, -1), ('ctypes', 0, 0, -1), ('ctypes.wintypes', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.win32._user32: None -> None
  DEL pyglet.libs.win32._user32
pyglet.libs.win32._kernel32: None -> None
  DEL pyglet.libs.win32._kernel32
pyglet.font.freetype_lib: None -> <PyModule 'pyglet.font.freetype_lib' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/freetype_lib.pyc imports=[('base', 0, 0, -1), ('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('base.FontException', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.font.fontconfig: None -> <PyModule 'pyglet.font.fontconfig' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/font/fontconfig.pyc imports=[('collections', 0, 0, -1), ('pyglet.compat.asstr', 0, 0, -1), ('pyglet.font.base', 0, 0, -1), ('collections.OrderedDict', 0, 0, -1), ('pyglet.lib', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.font.base.FontException', 0, 0, -1), ('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.font.collections: None -> None
_dummy_threading: None -> None
  DEL _dummy_threading
_dummy_threading: None -> None
  DEL _dummy_threading
_dummy_threading: None -> None
  DEL _dummy_threading
pyglet.app.ctypes: None -> None
pyglet.libs.win32._user32: None -> None
  DEL pyglet.libs.win32._user32
pyglet.libs.win32._kernel32: None -> None
  DEL pyglet.libs.win32._kernel32
pyglet.app.select: None -> None
pyglet.app.os: None -> None
pyglet.gl.agl: None -> <PyModule 'pyglet.gl.agl' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/agl.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.link_AGL', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.ContextException: None -> None
  DEL pyglet.gl.ContextException
pyglet.libs.darwin._oscheck: None -> None
  DEL pyglet.libs.darwin._oscheck
pyglet.gl.ContextException: None -> None
  DEL pyglet.gl.ContextException
pyglet.gl.wglext_arb: None -> <PyModule 'pyglet.gl.wglext_arb' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/wglext_arb.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.link_WGL', 0, 0, -1), ('pyglet.gl.lib.c_ptrdiff_t', 0, 0, -1), ('pyglet.gl.lib.c_void', 0, 0, -1), ('ctypes.*', 0, 0, -1)] binaries=[] datas=[]>
pyglet.gl.wgl: None -> <PyModule 'pyglet.gl.wgl' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/wgl.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.gl.lib.c_ptrdiff_t', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.lib.link_WGL', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.win32._gdi32: None -> None
  DEL pyglet.libs.win32._gdi32
pyglet.libs.win32._kernel32: None -> None
  DEL pyglet.libs.win32._kernel32
pyglet.gl.wgl_info: None -> <PyModule 'pyglet.gl.wgl_info' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/gl/wgl_info.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.gl.gl_info', 0, 0, -1), ('pyglet.gl.wglext_arb.*', 0, 0, -1), ('pyglet.gl.wglext_arb', 0, 0, -1), ('pyglet.gl.gl.*', 0, 0, -1), ('pyglet.compat.asstr', 0, 0, -1), ('warnings', 0, 0, -1), ('pyglet.gl.lib', 0, 0, -1), ('pyglet.gl.gl', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.gl.lib.MissingFunctionException', 0, 0, -1), ('pyglet.gl.wgl.*', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.gl.wgl', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.win32._user32: None -> None
  DEL pyglet.libs.win32._user32
pyglet.urllib2: None -> None
urllib2: None -> <PyModule 'urllib2' /usr/lib/python2.7/urllib2.pyc imports=[('urllib.splithost', 0, 0, -1), ('ssl', 0, 0, -1), ('urllib.splitattr', 0, 0, -1), ('os', 0, 0, -1), ('email.utils', 1, 0, -1), ('urllib.unwrap', 0, 0, -1), ('warnings', 0, 0, -1), ('urllib.splittag', 0, 0, -1), ('posixpath', 0, 0, -1), ('hashlib', 0, 0, -1), ('urllib.ftpwrapper', 0, 0, -1), ('urllib', 0, 0, -1), ('random', 0, 0, -1), ('types', 1, 0, -1), ('urllib.unquote', 0, 0, -1), ('cookielib', 1, 0, -1), ('urllib.quote', 0, 0, -1), ('sys', 0, 0, -1), ('urllib.localhost', 0, 0, -1), ('urllib.splittype', 0, 0, -1), ('cStringIO', 0, 0, -1), ('base64', 0, 0, -1), ('ftplib', 1, 0, -1), ('time', 0, 0, -1), ('bisect', 0, 0, -1), ('urlparse', 0, 0, -1), ('mimetypes', 1, 0, -1), ('urllib.splituser', 0, 0, -1), ('socket', 0, 0, -1), ('urllib.proxy_bypass', 0, 0, -1), ('urllib.getproxies', 0, 0, -1), ('mimetools', 0, 0, -1), ('StringIO.StringIO', 0, 1, -1), ('cStringIO.StringIO', 0, 0, -1), ('urllib.splitpasswd', 0, 0, -1), ('urllib.addinfourl', 0, 0, -1), ('urllib.splitvalue', 0, 0, -1), ('re', 0, 0, -1), ('urllib.splitport', 0, 0, -1), ('httplib', 0, 0, -1), ('urllib.url2pathname', 0, 0, -1), ('StringIO', 0, 1, -1), ('urllib.toBytes', 0, 0, -1)] binaries=[] datas=[]>
pyglet.weakref: None -> None
pyglet.urlparse: None -> None
pyglet.zipfile: None -> None
cookielib: None -> <PyModule 'cookielib' /usr/lib/python2.7/cookielib.pyc imports=[('StringIO', 1, 0, -1), ('re', 0, 0, -1), ('urlparse', 0, 0, -1), ('logging', 1, 1, -1), ('copy', 0, 0, -1), ('calendar', 0, 0, -1), ('traceback', 1, 0, -1), ('threading', 0, 0, -1), ('_MozillaCookieJar', 0, 0, -1), ('_LWPCookieJar', 0, 0, -1), ('httplib', 0, 0, -1), ('_LWPCookieJar.lwp_cookie_str', 0, 0, -1), ('urllib', 0, 0, -1), ('_MozillaCookieJar.MozillaCookieJar', 0, 0, -1), ('warnings', 1, 0, -1), ('dummy_threading', 0, 1, -1), ('time', 0, 0, -1), ('_LWPCookieJar.LWPCookieJar', 0, 0, -1), ('calendar.timegm', 0, 0, -1)] binaries=[] datas=[]>
bisect: None -> <PyModule 'bisect' /usr/lib/python2.7/bisect.pyc imports=[('_bisect', 0, 0, -1), ('_bisect.*', 0, 0, -1)] binaries=[] datas=[]>
_MozillaCookieJar: None -> <PyModule '_MozillaCookieJar' /usr/lib/python2.7/_MozillaCookieJar.pyc imports=[('re', 0, 0, -1), ('cookielib.FileCookieJar', 0, 0, -1), ('cookielib', 0, 0, -1), ('cookielib.Cookie', 0, 0, -1), ('cookielib._warn_unhandled_exception', 0, 0, -1), ('cookielib.LoadError', 0, 0, -1), ('cookielib.MISSING_FILENAME_TEXT', 0, 0, -1), ('time', 0, 0, -1)] binaries=[] datas=[]>
_LWPCookieJar: None -> <PyModule '_LWPCookieJar' /usr/lib/python2.7/_LWPCookieJar.pyc imports=[('re', 0, 0, -1), ('cookielib.FileCookieJar', 0, 0, -1), ('cookielib', 0, 0, -1), ('cookielib.iso2time', 0, 0, -1), ('cookielib.Cookie', 0, 0, -1), ('cookielib._warn_unhandled_exception', 0, 0, -1), ('cookielib.LoadError', 0, 0, -1), ('cookielib.split_header_words', 0, 0, -1), ('cookielib.time2isoz', 0, 0, -1), ('cookielib.MISSING_FILENAME_TEXT', 0, 0, -1), ('time', 0, 0, -1), ('cookielib.join_header_words', 0, 0, -1)] binaries=[] datas=[]>
_bisect: None -> <ExtensionModule '_bisect' /usr/lib/python2.7/lib-dynload/_bisect.so imports=[] binaries=[] datas=[]>
pyglet.media.drivers: None -> <PkgModule 'pyglet.media.drivers' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/__init__.pyc imports=[] binaries=[] datas=[]>
pyglet.media.drivers.openal: None -> <PkgModule 'pyglet.media.drivers.openal' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/openal/__init__.pyc imports=[('ctypes', 0, 0, -1), ('threading', 0, 0, -1), ('Queue', 0, 0, -1), ('pyglet.media', 0, 0, -1), ('pyglet.media.AbstractListener', 0, 0, -1), ('lib_alc', 0, 0, -1), ('pyglet.media.MediaThread', 0, 0, -1), ('atexit', 0, 0, -1), ('pyglet.media.MediaException', 0, 0, -1), ('pyglet.media.AbstractAudioPlayer', 0, 0, -1), ('pyglet.media.AbstractAudioDriver', 0, 0, -1), ('heapq', 0, 0, -1), ('lib_openal', 0, 0, -1), ('time', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.media.MediaEvent', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.pyglet: None -> None
pyglet.image.AnimationFrame: None -> None
  DEL pyglet.image.AnimationFrame
pyglet.media.warnings: None -> None
pyglet.media.avbin: None -> <PyModule 'pyglet.media.avbin' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/avbin.pyc imports=[('ctypes', 0, 0, -1), ('threading', 0, 0, -1), ('pyglet.image', 0, 0, -1), ('pyglet.media.AudioData', 0, 0, -1), ('pyglet.compat.asbytes_filename', 0, 0, -1), ('pyglet.media', 0, 0, -1), ('pyglet.lib', 0, 0, -1), ('pyglet.media.VideoFormat', 0, 0, -1), ('pyglet.media.SourceInfo', 0, 0, -1), ('pyglet.gl.gl_info', 0, 0, -1), ('struct', 0, 0, -1), ('pyglet.compat', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('pyglet.media.MediaFormatException', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.media.WorkerThread', 0, 0, -1), ('pyglet.media.AudioFormat', 0, 0, -1), ('time', 0, 0, -1), ('pyglet.media.StreamingSource', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.media.MediaEvent', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.drivers.silent: None -> <PyModule 'pyglet.media.drivers.silent' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/silent.pyc imports=[('pyglet.media', 0, 0, -1), ('pyglet.media.MediaThread', 0, 0, -1), ('pyglet.media.AbstractAudioPlayer', 0, 0, -1), ('pyglet.media.AbstractAudioDriver', 0, 0, -1), ('time', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.media.MediaEvent', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.threading: None -> None
pyglet.media.sys: None -> None
pyglet.media.riff: None -> <PyModule 'pyglet.media.riff' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/riff.pyc imports=[('pyglet.media.AudioData', 0, 0, -1), ('pyglet.media', 0, 0, -1), ('pyglet.compat.asbytes', 0, 0, -1), ('pyglet.compat.BytesIO', 0, 0, -1), ('struct', 0, 0, -1), ('pyglet.media.StreamingSource', 0, 0, -1), ('pyglet.media.MediaFormatException', 0, 0, -1), ('pyglet.media.AudioFormat', 0, 0, -1), ('pyglet.compat', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.drivers.pulse: None -> <PkgModule 'pyglet.media.drivers.pulse' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/pulse/__init__.pyc imports=[('sys', 0, 0, -1), ('pyglet.media', 0, 0, -1), ('pyglet.media.AbstractListener', 0, 0, -1), ('lib_pulseaudio', 0, 0, -1), ('pyglet.media.MediaException', 0, 0, -1), ('pyglet.media.AbstractAudioPlayer', 0, 0, -1), ('pyglet.media.AbstractAudioDriver', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.media.MediaEvent', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.heapq: None -> None
pyglet.media.time: None -> None
pyglet.media.drivers.directsound: None -> <PkgModule 'pyglet.media.drivers.directsound' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/directsound/__init__.pyc imports=[('pyglet.window.win32', 0, 0, -1), ('ctypes', 0, 0, -1), ('threading', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.media', 0, 0, -1), ('math', 0, 0, -1), ('pyglet.window.win32._user32', 0, 0, -1), ('pyglet.media.MediaThread', 0, 0, -1), ('pyglet.media.MediaException', 0, 0, -1), ('pyglet.media.AbstractAudioPlayer', 0, 0, -1), ('pyglet.media.AbstractAudioDriver', 0, 0, -1), ('pyglet.window.win32._kernel32', 0, 0, -1), ('lib_dsound', 0, 0, -1), ('time', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.media.MediaEvent', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.atexit: None -> None
pyglet.media.ctypes: None -> None
pyglet.image.Animation: None -> None
  DEL pyglet.image.Animation
pyglet.media.drivers.openal.ctypes: None -> None
pyglet.media.drivers.openal.threading: None -> None
pyglet.media.drivers.openal.Queue: None -> None
pyglet.media.drivers.openal.pyglet: None -> None
pyglet.media.AbstractListener: None -> None
  DEL pyglet.media.AbstractListener
pyglet.media.drivers.openal.lib_alc: None -> <PyModule 'pyglet.media.drivers.openal.lib_alc' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/openal/lib_alc.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.MediaThread: None -> None
  DEL pyglet.media.MediaThread
pyglet.media.drivers.openal.atexit: None -> None
pyglet.media.MediaException: None -> None
  DEL pyglet.media.MediaException
pyglet.media.AbstractAudioPlayer: None -> None
  DEL pyglet.media.AbstractAudioPlayer
pyglet.media.AbstractAudioDriver: None -> None
  DEL pyglet.media.AbstractAudioDriver
pyglet.media.drivers.openal.heapq: None -> None
pyglet.media.drivers.openal.lib_openal: None -> <PyModule 'pyglet.media.drivers.openal.lib_openal' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/openal/lib_openal.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.drivers.openal.time: None -> None
pyglet.media.MediaEvent: None -> None
  DEL pyglet.media.MediaEvent
pyglet.media.drivers.openal.sys: None -> None
pyglet.media.AudioData: None -> None
  DEL pyglet.media.AudioData
pyglet.media.VideoFormat: None -> None
  DEL pyglet.media.VideoFormat
pyglet.media.SourceInfo: None -> None
  DEL pyglet.media.SourceInfo
pyglet.media.struct: None -> None
pyglet.media.MediaFormatException: None -> None
  DEL pyglet.media.MediaFormatException
pyglet.media.WorkerThread: None -> None
  DEL pyglet.media.WorkerThread
pyglet.media.AudioFormat: None -> None
  DEL pyglet.media.AudioFormat
pyglet.media.StreamingSource: None -> None
  DEL pyglet.media.StreamingSource
pyglet.media.MediaEvent: None -> None
  DEL pyglet.media.MediaEvent
pyglet.media.drivers.pyglet: None -> None
pyglet.media.MediaThread: None -> None
  DEL pyglet.media.MediaThread
pyglet.media.AbstractAudioPlayer: None -> None
  DEL pyglet.media.AbstractAudioPlayer
pyglet.media.AbstractAudioDriver: None -> None
  DEL pyglet.media.AbstractAudioDriver
pyglet.media.drivers.time: None -> None
pyglet.media.MediaEvent: None -> None
  DEL pyglet.media.MediaEvent
pyglet.media.AudioData: None -> None
  DEL pyglet.media.AudioData
pyglet.media.StreamingSource: None -> None
  DEL pyglet.media.StreamingSource
pyglet.media.MediaFormatException: None -> None
  DEL pyglet.media.MediaFormatException
pyglet.media.AudioFormat: None -> None
  DEL pyglet.media.AudioFormat
pyglet.media.drivers.pulse.sys: None -> None
pyglet.media.drivers.pulse.pyglet: None -> None
pyglet.media.AbstractListener: None -> None
  DEL pyglet.media.AbstractListener
pyglet.media.drivers.pulse.lib_pulseaudio: None -> <PyModule 'pyglet.media.drivers.pulse.lib_pulseaudio' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/pulse/lib_pulseaudio.pyc imports=[('ctypes', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.MediaException: None -> None
  DEL pyglet.media.MediaException
pyglet.media.AbstractAudioPlayer: None -> None
  DEL pyglet.media.AbstractAudioPlayer
pyglet.media.AbstractAudioDriver: None -> None
  DEL pyglet.media.AbstractAudioDriver
pyglet.media.MediaEvent: None -> None
  DEL pyglet.media.MediaEvent
pyglet.media.drivers.pulse.ctypes: None -> None
pyglet.media.drivers.directsound.pyglet: None -> None
pyglet.media.drivers.directsound.ctypes: None -> None
pyglet.media.drivers.directsound.threading: None -> None
pyglet.media.drivers.directsound.sys: None -> None
pyglet.media.drivers.directsound.math: None -> None
pyglet.window.win32._user32: None -> None
  DEL pyglet.window.win32._user32
pyglet.media.MediaThread: None -> None
  DEL pyglet.media.MediaThread
pyglet.media.MediaException: None -> None
  DEL pyglet.media.MediaException
pyglet.media.AbstractAudioPlayer: None -> None
  DEL pyglet.media.AbstractAudioPlayer
pyglet.media.AbstractAudioDriver: None -> None
  DEL pyglet.media.AbstractAudioDriver
pyglet.window.win32._kernel32: None -> None
  DEL pyglet.window.win32._kernel32
pyglet.media.drivers.directsound.lib_dsound: None -> <PyModule 'pyglet.media.drivers.directsound.lib_dsound' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/media/drivers/directsound/lib_dsound.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.com', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.media.drivers.directsound.time: None -> None
pyglet.media.MediaEvent: None -> None
  DEL pyglet.media.MediaEvent
pyglet.input.darwin_hid: None -> <PyModule 'pyglet.input.darwin_hid' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/darwin_hid.pyc imports=[('base', 0, 0, -1), ('base.Joystick', 0, 0, -1), ('pyglet.libs.darwin.cocoapy.*', 0, 0, -1), ('base.Device', 0, 0, -1), ('base.Button', 0, 0, -1), ('pyglet.libs.darwin.cocoapy', 0, 0, -1), ('base.AppleRemote', 0, 0, -1), ('base.RelativeAxis', 0, 0, -1), ('base.Control', 0, 0, -1), ('base.AbsoluteAxis', 0, 0, -1), ('base.DeviceExclusiveException', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.carbon_hid: None -> <PyModule 'pyglet.input.carbon_hid' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/carbon_hid.pyc imports=[('base', 0, 0, -1), ('ctypes', 0, 0, -1), ('base.Device', 0, 0, -1), ('pyglet.libs.darwin.constants', 0, 0, -1), ('base.Button', 0, 0, -1), ('base.Joystick', 0, 0, -1), ('pyglet.libs.darwin', 0, 0, -1), ('pyglet.libs.darwin.constants.*', 0, 0, -1), ('base.AppleRemote', 0, 0, -1), ('pyglet.libs.darwin.create_cfstring', 0, 0, -1), ('base.Control', 0, 0, -1), ('pyglet.libs.darwin._oscheck', 0, 0, -1), ('base.RelativeAxis', 0, 0, -1), ('base.AbsoluteAxis', 0, 0, -1), ('base.DeviceExclusiveException', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.libs.darwin.carbon', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.base: None -> <PyModule 'pyglet.input.base' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/base.pyc imports=[('pyglet.event', 0, 0, -1), ('sys', 0, 0, -1), ('pyglet.event.EventDispatcher', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.directinput: None -> <PyModule 'pyglet.input.directinput' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/directinput.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.libs.win32.dinput', 0, 0, -1), ('pyglet.input.base', 0, 0, -1), ('pyglet.input', 0, 0, -1), ('pyglet.libs', 0, 0, -1), ('pyglet.libs.win32', 0, 0, -1), ('pyglet', 0, 0, -1), ('pyglet.libs.win32._kernel32', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.carbon_tablet: None -> <PyModule 'pyglet.input.carbon_tablet' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/carbon_tablet.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.input.base.TabletCanvas', 0, 0, -1), ('pyglet.input.base.TabletCursor', 0, 0, -1), ('pyglet.window.carbon.CarbonEventHandler', 0, 0, -1), ('pyglet.input.base', 0, 0, -1), ('pyglet.libs.darwin', 0, 0, -1), ('pyglet.input.base.Tablet', 0, 0, -1), ('pyglet.libs.darwin._oscheck', 0, 0, -1), ('pyglet.libs.darwin.*', 0, 0, -1), ('pyglet.window.carbon', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.sys: None -> None
pyglet.input.x11_xinput: None -> <PyModule 'pyglet.input.x11_xinput' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/x11_xinput.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.compat.asstr', 0, 0, -1), ('pyglet.input.base.Device', 0, 0, -1), ('pyglet.input.base.AbsoluteAxis', 0, 0, -1), ('pyglet.input.base.RelativeAxis', 0, 0, -1), ('pyglet.input.base.Control', 0, 0, -1), ('pyglet.input.base', 0, 0, -1), ('pyglet.libs.x11', 0, 0, -1), ('pyglet.libs.x11.xinput', 0, 0, -1), ('pyglet.input.base.Button', 0, 0, -1), ('pyglet.compat', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('pyglet.input.base.DeviceException', 0, 0, -1), ('pyglet.input.base.DeviceOpenException', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.wintab: None -> <PyModule 'pyglet.input.wintab' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/wintab.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.input.base.TabletCanvas', 0, 0, -1), ('pyglet.input.base.TabletCursor', 0, 0, -1), ('pyglet.input.base', 0, 0, -1), ('pyglet.input.base.Tablet', 0, 0, -1), ('pyglet.libs.win32', 0, 0, -1), ('pyglet.libs.win32.libwintab', 0, 0, -1), ('pyglet.input.base.DeviceOpenException', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.pyglet: None -> None
pyglet.compat_platform: None -> None
  DEL pyglet.compat_platform
pyglet.input.evdev: None -> <PyModule 'pyglet.input.evdev' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/evdev.pyc imports=[('base', 0, 0, -1), ('ctypes', 0, 0, -1), ('evdev_constants._rel_raw_names', 0, 0, -1), ('base.Device', 0, 0, -1), ('os', 0, 0, -1), ('evdev_constants.*', 0, 0, -1), ('base.DeviceOpenException', 0, 0, -1), ('evdev_constants', 0, 0, -1), ('base.RelativeAxis', 0, 0, -1), ('base.Control', 0, 0, -1), ('evdev_constants._abs_raw_names', 0, 0, -1), ('base.Joystick', 0, 0, -1), ('base.Button', 0, 0, -1), ('pyglet.app.xlib', 0, 0, -1), ('errno', 0, 0, -1), ('base.AbsoluteAxis', 0, 0, -1), ('pyglet.app.xlib.XlibSelectDevice', 0, 0, -1), ('pyglet', 0, 0, -1), ('evdev_constants._key_raw_names', 0, 0, -1)] binaries=[] datas=[]>
pyglet.options: None -> None
  DEL pyglet.options
pyglet.input.x11_xinput_tablet: None -> <PyModule 'pyglet.input.x11_xinput_tablet' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/x11_xinput_tablet.pyc imports=[('pyglet.libs.x11.xinput', 0, 0, -1), ('pyglet.input.base.TabletCanvas', 0, 0, -1), ('pyglet.input.base.TabletCursor', 0, 0, -1), ('pyglet.input.base', 0, 0, -1), ('pyglet.libs.x11', 0, 0, -1), ('pyglet.input.x11_xinput.DeviceResponder', 0, 0, -1), ('pyglet.input.base.Tablet', 0, 0, -1), ('pyglet.input.x11_xinput.get_devices', 0, 0, -1), ('pyglet.input.x11_xinput.XInputWindowEventDispatcher', 0, 0, -1), ('pyglet.input.x11_xinput', 0, 0, -1), ('pyglet.input.base.DeviceOpenException', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.ctypes: None -> None
pyglet.libs.darwin.create_cfstring: None -> None
  DEL pyglet.libs.darwin.create_cfstring
pyglet.libs.darwin._oscheck: None -> None
  DEL pyglet.libs.darwin._oscheck
pyglet.libs.darwin.carbon: None -> None
  DEL pyglet.libs.darwin.carbon
pyglet.libs.win32.dinput: None -> <PyModule 'pyglet.libs.win32.dinput' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/win32/dinput.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.com', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.win32._kernel32: None -> None
  DEL pyglet.libs.win32._kernel32
pyglet.window.carbon.CarbonEventHandler: None -> None
  DEL pyglet.window.carbon.CarbonEventHandler
pyglet.libs.darwin._oscheck: None -> None
  DEL pyglet.libs.darwin._oscheck
pyglet.libs.x11.xinput: None -> <PyModule 'pyglet.libs.x11.xinput' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/x11/xinput.pyc imports=[('ctypes', 0, 0, -1), ('pyglet.libs.x11.xlib', 0, 0, -1), ('ctypes.*', 0, 0, -1), ('pyglet.lib', 0, 0, -1)] binaries=[] datas=[]>
pyglet.libs.win32.libwintab: None -> <PyModule 'pyglet.libs.win32.libwintab' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/libs/win32/libwintab.pyc imports=[('ctypes', 0, 0, -1)] binaries=[] datas=[]>
pyglet.input.evdev_constants: None -> <PyModule 'pyglet.input.evdev_constants' /media/ssd/fredspipa/src/peace-tw/deploy/src/pyglet/input/evdev_constants.pyc imports=[] binaries=[] datas=[]>
pyglet.input.os: None -> None
pyglet.input.errno: None -> None
pyglet.math: None -> None
lepton.ParticleGroup: None -> None
  DEL lepton.ParticleGroup
lepton.Particle: None -> None
  DEL lepton.Particle
lepton.default_system: None -> None
  DEL lepton.default_system
lepton._controller: None -> <ExtensionModule 'lepton._controller' /media/ssd/fredspipa/src/peace-tw/deploy/src/lepton/_controller.so imports=[] binaries=[] datas=[]>
lepton.sys: None -> None
grid: None -> <PyModule 'grid' /media/ssd/fredspipa/src/peace-tw/deploy/src/grid.pyc imports=[('main', 0, 0, -1), ('functions', 0, 0, -1), ('subprocess', 0, 0, -1), ('main.pypf', 0, 0, -1), ('functions.get_neighbors', 0, 0, -1)] binaries=[] datas=[]>
tiles: None -> <PyModule 'tiles' /media/ssd/fredspipa/src/peace-tw/deploy/src/tiles.pyc imports=[('pyglet.image', 0, 0, -1), ('pytmx.*', 0, 0, -1), ('pytmx', 0, 0, -1), ('pytmx.util_pyglet.load_pyglet', 0, 0, -1), ('pyglet.image.ImageDataRegion', 0, 0, -1), ('pyglet.sprite.Sprite', 0, 0, -1), ('functions', 0, 0, -1), ('functions.*', 0, 0, -1), ('pytmx.util_pyglet', 0, 0, -1), ('pyglet.sprite', 0, 0, -1)] binaries=[] datas=[]>
main: None -> <PyModule 'main' /media/ssd/fredspipa/src/peace-tw/deploy/src/main.pyc imports=[('lepton.texturizer.SpriteTexturizer', 0, 0, -1), ('ui', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('animation.*', 0, 0, -1), ('lepton', 0, 0, -1), ('mob', 0, 0, -1), ('particles.*', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('lepton.emitter.StaticEmitter', 0, 0, -1), ('game', 0, 0, -1), ('mob.*', 0, 0, -1), ('lepton.Particle', 0, 0, -1), ('lepton.renderer', 0, 0, -1), ('math.cos', 0, 0, -1), ('math.sin', 0, 0, -1), ('collections.OrderedDict', 0, 0, -1), ('math.pi', 0, 0, -1), ('tower', 0, 0, -1), ('functions.*', 0, 0, -1), ('lepton.controller.Gravity', 0, 0, -1), ('animation', 0, 0, -1), ('collections', 0, 0, -1), ('lepton.renderer.PointRenderer', 0, 0, -1), ('lepton.ParticleGroup', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('lepton.controller.Lifetime', 0, 0, -1), ('pypf', 0, 0, -1), ('lepton.texturizer', 0, 0, -1), ('functions', 0, 0, -1), ('particles', 0, 0, -1), ('lepton.controller.Fader', 0, 0, -1), ('pyglet.window.mouse', 0, 0, -1), ('tower.*', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('lepton.controller', 0, 0, -1), ('math', 0, 0, -1), ('lepton.emitter', 0, 0, -1), ('lepton.controller.Movement', 0, 0, -1), ('lepton.default_system', 0, 0, -1), ('ui.*', 0, 0, -1), ('game.*', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
lepton.Particle: None -> None
  DEL lepton.Particle
lepton.ParticleGroup: None -> None
  DEL lepton.ParticleGroup
lepton.default_system: None -> None
  DEL lepton.default_system
lepton.Particle: None -> None
  DEL lepton.Particle
pytmx: None -> <PkgModule 'pytmx' /media/ssd/fredspipa/src/peace-tw/deploy/src/pytmx/__init__.pyc imports=[('logging', 0, 0, -1), ('pytmx.*', 0, 0, 1), ('pytmx.util_pyglet', 0, 0, -1), ('pytmx.util_pyglet.load_pyglet', 0, 0, -1), ('pytmx', 0, 0, 1)] binaries=[] datas=[]>
pytmx.util_pyglet: None -> <PyModule 'pytmx.util_pyglet' /media/ssd/fredspipa/src/peace-tw/deploy/src/pytmx/util_pyglet.pyc imports=[('logging', 0, 0, -1), ('pytmx', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]>
pyglet.image.ImageDataRegion: None -> None
  DEL pyglet.image.ImageDataRegion
pytmx.logging: None -> None
pytmx.pytmx: None -> <PyModule 'pytmx.pytmx' /media/ssd/fredspipa/src/peace-tw/deploy/src/pytmx/pytmx.pyc imports=[('xml.etree', 0, 0, -1), ('os', 0, 0, -1), ('operator', 0, 0, -1), ('itertools.product', 0, 0, -1), ('base64', 1, 1, -1), ('array', 1, 0, -1), ('itertools', 0, 0, -1), ('collections.defaultdict', 0, 0, -1), ('six', 0, 0, -1), ('struct', 1, 0, -1), ('collections', 0, 0, -1), ('base64.b64decode', 1, 1, -1), ('itertools.chain', 0, 0, -1), ('six.moves.zip', 0, 0, -1), ('zlib', 1, 1, -1), ('collections.namedtuple', 0, 0, -1), ('os', 1, 0, -1), ('gzip', 1, 1, -1), ('six.moves', 0, 0, -1), ('logging', 0, 0, -1), ('operator.attrgetter', 0, 0, -1), ('xml.etree.ElementTree', 0, 0, -1), ('six.moves.map', 0, 0, -1)] binaries=[] datas=[]>
pytmx.xml: None -> None
xml.etree: None -> <PkgModule 'xml.etree' /usr/lib/python2.7/xml/etree/__init__.pyc imports=[] binaries=[] datas=[]>
pytmx.os: None -> None
pytmx.operator: None -> None
pytmx.itertools: None -> None
pytmx.base64: None -> None
pytmx.array: None -> None
pytmx.collections: None -> None
pytmx.six: None -> None
six: None -> <PyModule 'six' /usr/lib/python2.7/site-packages/six.pyc imports=[('types', 0, 0, 0), ('sys', 0, 0, 0), ('io', 0, 1, 0), ('itertools', 0, 0, 0), ('__future__', 0, 0, 0), ('__future__.absolute_import', 0, 0, 0), ('functools', 0, 0, 0), ('StringIO', 0, 1, 0), ('operator', 0, 0, 0)] binaries=[] datas=[]>
pytmx.struct: None -> None
pytmx.zlib: None -> None
pytmx.gzip: None -> None
xml.etree.ElementTree: None -> <PyModule 'xml.etree.ElementTree' /usr/lib/python2.7/xml/etree/ElementTree.pyc imports=[('re', 0, 0, -1), ('xml.parsers.expat', 1, 0, -1), ('sys', 0, 0, -1), ('', 0, 0, 1), ('pyexpat', 1, 1, -1), ('warnings', 0, 0, -1), ('ElementC14N._serialize_c14n', 0, 0, -1), ('xml.parsers', 1, 1, -1), ('xml.parsers', 1, 0, -1), ('ElementPath', 0, 0, 1), ('ElementC14N', 0, 0, -1), ('xml.parsers.expat', 1, 1, -1)] binaries=[] datas=[]>
xml.etree.re: None -> None
xml.etree.xml: None -> None
xml.etree.sys: None -> None
xml.etree.pyexpat: None -> None
xml.etree.warnings: None -> None
xml.etree.ElementC14N: None -> None
ElementC14N: None -> None
  DEL ElementC14N
xml.etree.ElementPath: None -> <PyModule 'xml.etree.ElementPath' /usr/lib/python2.7/xml/etree/ElementPath.pyc imports=[('re', 0, 0, -1)] binaries=[] datas=[]>
ElementC14N: None -> None
  DEL ElementC14N
pytmx.pyglet: None -> None
__main__: <PyScript '__main__' main.py imports=[('lepton.texturizer.SpriteTexturizer', 0, 0, -1), ('ui', 0, 0, -1), ('pyglet.window', 0, 0, -1), ('animation.*', 0, 0, -1), ('lepton', 0, 0, -1), ('mob', 0, 0, -1), ('particles.*', 0, 0, -1), ('pyglet.gl', 0, 0, -1), ('lepton.emitter.StaticEmitter', 0, 0, -1), ('game', 0, 0, -1), ('mob.*', 0, 0, -1), ('lepton.Particle', 0, 0, -1), ('lepton.renderer', 0, 0, -1), ('math.cos', 0, 0, -1), ('math.sin', 0, 0, -1), ('collections.OrderedDict', 0, 0, -1), ('math.pi', 0, 0, -1), ('tower', 0, 0, -1), ('functions.*', 0, 0, -1), ('lepton.controller.Gravity', 0, 0, -1), ('animation', 0, 0, -1), ('collections', 0, 0, -1), ('lepton.renderer.PointRenderer', 0, 0, -1), ('lepton.ParticleGroup', 0, 0, -1), ('pyglet.gl.*', 0, 0, -1), ('lepton.controller.Lifetime', 0, 0, -1), ('pypf', 0, 0, -1), ('lepton.texturizer', 0, 0, -1), ('functions', 0, 0, -1), ('particles', 0, 0, -1), ('lepton.controller.Fader', 0, 0, -1), ('pyglet.window.mouse', 0, 0, -1), ('tower.*', 0, 0, -1), ('pyglet.window.key', 0, 0, -1), ('lepton.controller', 0, 0, -1), ('math', 0, 0, -1), ('lepton.emitter', 0, 0, -1), ('lepton.controller.Movement', 0, 0, -1), ('lepton.default_system', 0, 0, -1), ('ui.*', 0, 0, -1), ('game.*', 0, 0, -1), ('pyglet', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/rthooks/pyi_rth_PIL_Image.py imports=[('pyi_importers', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
msvcrt: None -> None
  DEL msvcrt
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
org: None -> None
  DEL org
org: None -> None
  DEL org
_sha256: None -> None
  DEL _sha256
_sha512: None -> None
  DEL _sha512
_sha: None -> None
  DEL _sha
_md5: None -> None
  DEL _md5
org: None -> None
  DEL org
org: None -> None
  DEL org
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
__main__: <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/rthooks/pyi_rth_PIL_Image.py imports=[('pyi_importers', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/rthooks/pyi_rth_Tkinter.py imports=[('os', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
msvcrt: None -> None
  DEL msvcrt
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
org: None -> None
  DEL org
org: None -> None
  DEL org
_sha256: None -> None
  DEL _sha256
_sha512: None -> None
  DEL _sha512
_sha: None -> None
  DEL _sha
_md5: None -> None
  DEL _md5
org: None -> None
  DEL org
org: None -> None
  DEL org
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
__main__: <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/rthooks/pyi_rth_Tkinter.py imports=[('os', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]> -> <PyScript '__main__' /usr/lib/python2.7/site-packages/PyInstaller/loader/rthooks/pyi_rth_Image.py imports=[('pyi_importers', 0, 0, -1), ('sys', 0, 0, -1)] binaries=[] datas=[]>
_emx_link: None -> None
  DEL _emx_link
_emx_link: None -> None
  DEL _emx_link
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
msvcrt: None -> None
  DEL msvcrt
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
_subprocess: None -> None
  DEL _subprocess
org: None -> None
  DEL org
org: None -> None
  DEL org
_sha256: None -> None
  DEL _sha256
_sha512: None -> None
  DEL _sha512
_sha: None -> None
  DEL _sha
_md5: None -> None
  DEL _md5
org: None -> None
  DEL org
org: None -> None
  DEL org
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
nt: None -> None
  DEL nt
